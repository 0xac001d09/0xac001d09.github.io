<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前缀和</title>
      <link href="/2020/03/26/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2020/03/26/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>最近刷了几个前缀和的题，也都是板子题，记录一下</p><h2 id="LeetCode-560-和为K的子数组"><a href="#LeetCode-560-和为K的子数组" class="headerlink" title="LeetCode 560. 和为K的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">LeetCode 560. 和为K的子数组</a></h2><blockquote><p>给定一个整数数组和一个整数 <strong>k，</strong>你需要找到该数组中和为 <strong>k</strong> 的连续的子数组的个数。</p><p><strong>示例 1 :</strong></p><pre><code>输入:nums = [1,1,1], k = 2输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</code></pre><p><strong>说明 :</strong></p><ol><li>数组的长度为 [1, 20,000]。</li><li>数组中元素的范围是 [-1000, 1000] ，且整数 <strong>k</strong> 的范围是 [-1e7, 1e7]。</li></ol></blockquote><p>这个题直接前缀和就能过，下面一种不好的暴力求法，虽然能过，但是巨慢</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> ps<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> e <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> e <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ps<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">-</span> ps<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>但实际上，我们要看<code>ps[j] - ps[i] = k</code>，那么<code>[i,j]</code>就是我们需要的区间，所以我们对于每个<code>j</code>，我们只要计算有多少个 <code>i</code> 使得 <code>ps[j] - ps[i] = k</code>，这样我们就得到了以 <code>P[j]</code> 作为右区间并且和为 <code>k</code>的区间数。这里用个 hashmap 统计  <code>ps[i]</code> 即可。但是要注意初始化map的细节，要放一个<code>{0:1}</code>进去，当 <code>ps[j]==k</code> 时，<code>ps[i]=0</code> ，此时是要算进结果的</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curSum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>curSum <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curSum <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="LeetCode-974-和可被-K-整除的子数组"><a href="#LeetCode-974-和可被-K-整除的子数组" class="headerlink" title="LeetCode 974. 和可被 K 整除的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/" target="_blank" rel="noopener">LeetCode 974. 和可被 K 整除的子数组</a></h2><blockquote><p>给定一个整数数组 <code>A</code>，返回其中元素之和可被 <code>K</code> 整除的（连续、非空）子数组的数目。</p><p><strong>示例：</strong></p><pre><code>输入：A = [4,5,0,-2,-3,1], K = 5输出：7解释：有 7 个子数组满足其元素之和可被 K = 5 整除：[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</code></pre></blockquote><p>这个题，暴力前缀和就不合适了，有什么好的方法呢？</p><p>我们要判断的是<code>(ps[j] - ps[i]) % K</code>是否等于0。那么根据取余的性质，<code>(ps[j] - ps[i]) % K = ps[j] % K - ps[i] % K</code>，所以，若要<code>(ps[j] - ps[i] )% K = 0</code>只要 <code>ps[j] % K = ps[i] % K</code>，以<code>ps[i] % K</code>作为键值统计其出现的频率，从而对于每个下标 <code>j</code> 我们可以立即获得能和它组成满足要求的子数组的开始下标 <code>i</code> 的数量。生成前缀和数组的过程中，将 <code>key = ps[j]% k</code> 出现的频率加入结果数组， 同时将 <code>key = ps[j] % k</code> 的出现频率加1。</p><p>由于数组中有可能出现负数，需要将其加 <code>K</code> ，使其 %K 之后的值为正数。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraysDivByK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> k <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> k<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在加进去前先统计下数量</span>            res <span class="token operator">+=</span> map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subarraysDivByK</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> K<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n<span class="token punctuation">,</span> res<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> dict <span class="token operator">=</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        dict<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            sum <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            key <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> K <span class="token operator">+</span> K<span class="token punctuation">)</span> <span class="token operator">%</span> K            res <span class="token operator">+=</span> dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre><h2 id="LeetCode-1074-元素和为目标值的子矩阵数量"><a href="#LeetCode-1074-元素和为目标值的子矩阵数量" class="headerlink" title="LeetCode 1074. 元素和为目标值的子矩阵数量"></a><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/" target="_blank" rel="noopener">LeetCode 1074. 元素和为目标值的子矩阵数量</a></h2><blockquote><p>给出矩阵 matrix 和目标值 target，返回元素总和等于目标值的非空子矩阵的数量。</p><p>子矩阵 x1, y1, x2, y2 是满足 x1 &lt;= x &lt;= x2 且 y1 &lt;= y &lt;= y2 的所有单元 matrix[x][y] 的集合。</p><p>如果 (x1, y1, x2, y2) 和 (x1’, y1’, x2’, y2’) 两个子矩阵中部分坐标不同（如：x1 != x1’），那么这两个子矩阵也不同。</p><p><strong>示例 1：</strong></p><pre><code>输入：matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0输出：4解释：四个只含 0 的 1x1 子矩阵。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：matrix = [[1,-1],[-1,1]], target = 0输出：5解释：两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。</code></pre><p><strong>提示：</strong></p><pre><code>1 &lt;= matrix.length &lt;= 3001 &lt;= matrix[0].length &lt;= 300-1000 &lt;= matrix[i] &lt;= 1000-10^8 &lt;= target &lt;= 10^8</code></pre></blockquote><p>这个题，一看就是二维前缀和，所谓二维前缀和就是，对于每一行从前向后累加，对于每一列从前向后累加，得到的矩阵就是前缀和矩阵。</p><p>当我们构建好了二维前缀和，想要求 <code>(i1,j1)</code> 为左上角，<code>(i2,j2)</code> 为右下角的矩阵的内部和的时候，是这么一张图。要求 <code>S4</code>，实际上就是<code>（S1+S2+S3+S4）</code>，也就是 <code>S(0,0,i2,j2)</code>，这么一整块大的，减去 <code>S2+S1</code> ，减去 <code>S3+S1</code> ，再加上 <code>S1</code>。因为单个的 <code>S2</code> 和 <code>S3</code> 我们是不好算的，但是<code>S1+S2</code>、<code>S1+S3</code>是很好算的。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200326174552841.png" alt=""></p><p>如果直接莽，那时间复杂度是 $O(n^2 * m^2)$，需要继续优化，这个题和 <code>560题</code> 差不多吧，之前是一维问题，现在是二维问题，但是处理思想是一样的。要将二维转化为一维，此时我们只要计算每一行的前缀和，而不是整个矩阵的前缀和。然后可以取不同的两个列 <code>(j1,j2)</code>，以这两个列为边界，计算每一行的前缀和，这就是二维前缀和。</p><p>那么我们固定好左右边界后，遍历每一行，记录每一行的前缀和，以及它出现的次数，放在map中，那么对于当前行的前缀和，我们只要看map里有没有<code>curSum - target</code>，有的话加上它的出现次数即可。</p><p>注意，map初始化也要放入<code>{0:1}</code></p><p>java 代码</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSubmatrixSumTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> mat<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//枚举两列</span>        <span class="token comment" spellcheck="true">//第i列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j1 <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//第j列</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j2 <span class="token operator">=</span> j1<span class="token punctuation">;</span> j2 <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//矩阵为空的情况</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//枚举行数</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cur <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j2<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>j1 <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>cur <span class="token operator">-</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>python 代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numSubmatrixSumTarget</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 首先计算每行的前缀和</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 枚举两列</span>        <span class="token keyword">for</span> j1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j2 <span class="token keyword">in</span> range<span class="token punctuation">(</span>j1<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>                dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>                dict<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                cur_sum <span class="token operator">=</span> <span class="token number">0</span>                <span class="token comment" spellcheck="true"># 枚举每一行</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                    cur_sum <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j2<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> j1 <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>                    res <span class="token operator">+=</span> dict<span class="token punctuation">[</span>cur_sum <span class="token operator">-</span> target<span class="token punctuation">]</span>                    dict<span class="token punctuation">[</span>cur_sum<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre><h2 id="LeetCode-363-矩形区域不超过-K-的最大数值和"><a href="#LeetCode-363-矩形区域不超过-K-的最大数值和" class="headerlink" title="LeetCode 363. 矩形区域不超过 K 的最大数值和"></a><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/" target="_blank" rel="noopener">LeetCode 363. 矩形区域不超过 K 的最大数值和</a></h2><blockquote><p>给定一个非空二维矩阵 <code>matrix</code> 和一个整数 <code>k</code>，找到这个矩阵内部不大于 <code>k</code> 的最大矩形和。</p><p><strong>示例:</strong></p><pre><code>输入: matrix = [[1,0,1],[0,-2,3]], k = 2输出: 2 解释: 矩形区域 [[0, 1], [-2, 3]] 的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）。</code></pre><p><strong>说明：</strong></p><ol><li>矩阵内的矩形区域面积必须大于 0。</li><li>如果行数远大于列数，你将如何解答呢？</li></ol></blockquote><p>这个题就和上一个题太像了，几乎一致，<code>1074</code> 是找面积等于 <code>k</code> 的，这个题是找小于等于<code>k</code> 的最大矩形和，但是也没给数据范围，直接莽的话 $ O(n^2 * m^2)$吧，不太合适，还是要转成先求行的前缀和，再枚举两列、枚举行来求，固定左右边界，只考虑行，在哪两个行之间组成矩形的面积最大。如果是和1074一样用map的话，我怎么找到当前情况下，<code>某个值 + curSum &lt;= k</code>？直接遍历，那就不好了，为了加快查找！那么这里就要用到 <code>TreeSet</code> 的 <code>ceiling()</code> 了，之前在 <code>300</code> 题也用过，<code>ceiling()</code>  方法返回的是大于这个值的最小值，如果不存在返回null。</p><p>用 <code>set</code> 保存之前的子矩阵的和 <code>sum</code>，然后在 <code>set</code> 中找出大于等于<code>（sum - k）</code>的最小值。set中都是存放的是起始列和中止列相同的矩阵的和，求出 <code>set</code> 中大于等于<code>（curSum - k）</code>最小值，设找到的数为 <code>c</code>，则 <code>c &gt;= cur-k</code>，必有 <code>cur - c &lt;= k</code>，所有最小的 <code>c</code>，使得 <code>cur-c</code>的值最大，且该值小于等于<code>k</code>，妙啊</p><p>java 代码</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSumSubmatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> mat<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//首先计算每一行的前缀和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span>        TreeSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 枚举j1列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j1 <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 枚举j2列</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j2 <span class="token operator">=</span> j1<span class="token punctuation">;</span> j2 <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> curSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> curMax <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 枚举每一行</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    curSum <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j2<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>j1 <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curSum<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Integer c <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">ceiling</span><span class="token punctuation">(</span>curSum <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        curMax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>curMax<span class="token punctuation">,</span> curSum <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curSum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> curMax<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>python 代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSumSubmatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">import</span> bisect        n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> res <span class="token operator">=</span> len<span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 首先计算每一行前缀和</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>                mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 枚举列1</span>        <span class="token keyword">for</span> j1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 枚举列2</span>            <span class="token keyword">for</span> j2 <span class="token keyword">in</span> range<span class="token punctuation">(</span>j1<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur_sum<span class="token punctuation">,</span>arr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># 枚举每一行</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                    cur_sum <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j2<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> j1 <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>                    loc <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>cur_sum <span class="token operator">-</span> k<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 如果能找到</span>                    <span class="token keyword">if</span> loc <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>                        res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span>cur_sum <span class="token operator">-</span> arr<span class="token punctuation">[</span>loc<span class="token punctuation">]</span><span class="token punctuation">)</span>                    bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>cur_sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> res</code></pre><h2 id="1292-元素和小于等于阈值的正方形的最大边长"><a href="#1292-元素和小于等于阈值的正方形的最大边长" class="headerlink" title="1292. 元素和小于等于阈值的正方形的最大边长"></a><a href="https://leetcode-cn.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/" target="_blank" rel="noopener">1292. 元素和小于等于阈值的正方形的最大边长</a></h2><blockquote><p>给你一个大小为 <code>m x n</code> 的矩阵 <code>mat</code> 和一个整数阈值 <code>threshold</code>。请你返回元素总和小于或等于阈值的正方形区域的最大边长；如果没有这样的正方形区域，则返回 <strong>0</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200326225929153.png" alt=""></p><pre><code>输入：mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4输出：2解释：总和小于 4 的正方形的最大边长为 2，如图所示。</code></pre><p><strong>提示：</strong></p><pre><code>1 &lt;= m, n &lt;= 300m == mat.lengthn == mat[i].length0 &lt;= mat[i][j] &lt;= 100000 &lt;= threshold &lt;= 10^5</code></pre></blockquote><p>第167场周赛题，和前面题基本上一样，只不过这里不是矩形，变成了正方形。依然是利用前缀和+二分的思想。直接算二维前缀和。</p><p>比如我现在要计算坐标为(i,j)的二维前缀和，就要利用到它左边的前缀和和上边的前缀和，如图所示，左边那块  $sum[i][j-1]$（粉色）和上面那块  $sum[i-1][j]$（紫色），这两个前缀和加起来，再减去共同区域  $sum[i-1][j-1]$，最后加上这个点的值 $mat[i-1][j-1]$（这里开的都是n+1，下标从1开始） ，那就是 $sum[i][j]$</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200326231955055.png" alt=""></p><pre><code>sum[i][j] = sum[i][j-1] + sum[i-1][j] - sum[i-1][j-1] + A[i-1][j-1] （sum比A的行和列都多开一维）</code></pre><p>当我们要计算某块区域元素内的和</p><pre><code>int val = sum[i][j] - sum[i][j-k] - sum[i-k][j] +sum[i-k][j-k]，k代表区间的长度（以正方形为例）</code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200326232706782.png" alt=""></p><p>Java 代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSideLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> mat<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算二维前缀和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mat<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// for (int i = 0; i &lt;= n; i++) {</span>        <span class="token comment" spellcheck="true">//     for (int j = 0; j &lt;= m; j++) {</span>        <span class="token comment" spellcheck="true">//         System.out.print(sum[i][j] +" ");</span>        <span class="token comment" spellcheck="true">//     }</span>        <span class="token comment" spellcheck="true">//     System.out.println();</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">//二分找答案</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> threshold<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//double check</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> end<span class="token punctuation">,</span> threshold<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> end<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> start<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 枚举正方形右下角</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> len<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> len<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> len<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> len<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> len<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员修炼之道</title>
      <link href="/2020/03/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
      <url>/2020/03/19/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h1 id="程序员修炼之道读书笔记"><a href="#程序员修炼之道读书笔记" class="headerlink" title="程序员修炼之道读书笔记"></a>程序员修炼之道读书笔记</h1><p><strong>补上前言</strong></p><p>一直有个读书的计划，每一年都是懒过去了，白稚卿说的很对，能战胜懒的只有ddl和绝对的自律，在学校里也只有老师要求写读书笔记才会去翻阅一下了，在学校各种压力都很大，大家选择解压的方式各不相同，我也开始尝试读一些经典的书，希望能做一些思考和产出，这是今年第一本断断续续读完的，只有一点零碎的记录</p><blockquote><ul><li>开会就是编程，并能够改善编程</li><li>注重实效的程序员应当不断学习，我们也应当不断学习下去</li><li>provide options,dont make lame excess<ul><li>提供选择，不要找借口</li></ul></li><li>dont live with broken wondows!<ul><li>把问题放入注释、或是其他能够让你想到的地方，日后修复</li><li>对每一个设计不合理的地方，至少注释声明，不要让熵越变越大</li><li>我之前刷力扣碰到调不好的bug总是放弃，过一阵子也是忘掉了，虽然有意识要去修复，但总视而不见，工作中和同事之间，其实也会有一种总是期望同事去修窗户，可能因为自己缺乏实战经验，害怕自己能力不足吧，当我能力足够强的时候也希望自己是能够冒着窗户被修错的风险，能够出来修窗户、工作效率高的人</li></ul></li><li>不要过度修饰和追求精而损坏完好的程序，go on<ul><li>代码是不完美的，也不可能完美</li></ul></li><li><strong>每年至少学习一种新语言，每季度阅读一本技术书籍，但也要阅读非技术书籍</strong></li><li>交流<ul><li>没有太大的概念，虽然在人月神话中意识到了交流的重要性，但并没有切身感受，日后再补</li></ul></li><li>dont repeat yourself<ul><li>这里就想到了软工书上背过的那些东西了，这里的重复不再指代码的重复，包含了开发者之间的重复、加强的重复、无意的重复等等</li><li>做到正交，大白话就是解耦合，两个或多个事物中的一个发生变化，不会影响到另一个。正交得到的结果是 M+N 而不是 M*N</li></ul></li><li>分析你读到和听到的都东西<ul><li>从一些情况来看，我的反应能力很慢，无论是技术上还是非技术上，很慢</li></ul></li><li>消除无关事物之间的影响<ul><li>这章太长了，书中提到了一些aop日志的使用，我还没做过相关的事，日后再读</li></ul></li><li>如果某个想法是你唯一的想法，在没有比这个更危险了，言外之意，思维和想法多元，如何多元？</li><li>凡事没有最终决策！</li><li>Tracer Bullet<ul><li>曳光弹的重要性，之前在人月神话还是哪里看到过？</li></ul></li><li>不要用你不熟悉的框架与工具<ul><li>如果对各种框架的底层不熟悉，也不去了解它的实现，项目将会是不可控制的，很多时候我们没办法维护，调试也会带来极大的困难</li><li>面试最喜欢问的就是Spring源码这块了，但自己确实只会使用，对于源码的了解也很少，要加把劲</li></ul></li><li>关于文档和测试<ul><li>这是大多数人最讨厌的两件事，目前正巧是服务端计算课 的助教，在陶老师的课上，他也是反复和学弟学妹们强调了测试的重要性，并且每次作业也是需要加测试图的，为什么大多数程序员讨厌写文档和测试，是觉得麻烦还是会影响自己的进度？在我工作之后应该有一点体会了，日后补</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-最短路</title>
      <link href="/2020/03/10/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2020/03/10/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路算法"><a href="#最短路算法" class="headerlink" title="最短路算法"></a>最短路算法</h1><p>这篇博客主要是记一下最短路板子，板子三天不练就忘（x</p><p>回到正题，图的最短路算法有很多，在此记录一下非常常用的三个算法</p><ul><li>单源最短路<ul><li>不带负权边：$Dijkstra$</li><li>带负权边：$Bellman-Ford$、$SPFA$</li></ul></li><li>多源最短路<ul><li>$Floyd$</li></ul></li></ul><p><strong>假设图中顶点V个，边E条，有如下结论：</strong></p><ul><li>$Dijkstra$<ul><li>本质是贪心+广搜</li><li>朴素写法，时间复杂度$O(V^2+E)$，可以认为是$O(V^2)$，这个一般不怎么写，需要松弛，太蠢啦</li><li>堆优化（小堆），时间复杂度$O(VlogV+E)$</li><li>$Dijkstra$ 算法更适合<strong>稠密图</strong>（边多的图）</li><li>无论图有没有环，$Dijkstra$ 算法都是可以用的，它只是不能处理负权边，因为它本质上是贪心策略，每个点选择之后就不再更新，如果碰到了负边的存在就会破坏这个贪心的策略就无法处理了</li><li>一般堆优化+邻接矩阵用起来贼爽</li></ul></li><li>$SPFA$<ul><li>它是 $Bellman-Ford$ 的优化，$ Bellman-Ford$的时间复杂度为 $O(VE)$，效率太低了，SPFA是 $Bellman-Ford$ 的队列优化，但是算法时间效率不稳定，时间复杂度为$O(E)$，最好情况下，每个节点只入队一次，就是 $BFS$，最坏情况下，每一个节点都要入队 $V-1$ 次，这时候就退化成$Bellman-Ford$ 了</li><li>$SPFA$时间复杂度某种情况下略高于 $Dijkstra$， 适合稀疏图</li><li>$SPFA$ 是可以用于带有负权图的，在 $SPFA$ 中每一个点松弛过后说明这个点距离更近了，所以有可能通过这个点会再次优化其他点，所以它的策略是将 $vis$ 位置为 $false$，把这个点入队再判断一次！这就和 $Dijkstra$ 的贪心策略不同了！</li><li>$SPFA$ 还有个用处是可以判断图是否存在负环，我们只要用一个 $cnt[x]$ 数组来存放经过这个点的次数，上面提到过，最坏情况下每个节点入队 $V-1$次，如果 $cnt[x]$ 为 $V$ 的个数，那就说明存在负环了。</li></ul></li><li>$Floyd$<ul><li>本质是动态规划，能解决任意两点间的最短路径，时间复杂度 $O(V^3)$</li><li>看了 $Aoxiang Cui$ 大佬的一个回复，$ Floyd$它是可以判断有没有负权边环的，走N-1步，如果再走一步，更短了，那么就说明有环。另外 $Floyd$ 是不能处理带有负权的最短路的，因为本质是一个动态规划算法，有了负边，最优子结构的性质就不满足了。<strong>由此可见，它能够判断是否存在负环，但是不能够处理带有负权的额最短路</strong></li><li>$Floyd$ 有个神奇的特性，这个是其他算法没有的，$  Floyd$第 $k$ 轮算的结果，是每个源点到每个汇点经过前 $k$ 个点的最短路，这一点可以出题。</li></ul></li></ul><h2 id="743-网络延迟时间"><a href="#743-网络延迟时间" class="headerlink" title="743. 网络延迟时间"></a><a href="https://leetcode-cn.com/problems/network-delay-time/" target="_blank" rel="noopener">743. 网络延迟时间</a></h2><h3 id="Dijkstra（堆优化）"><a href="#Dijkstra（堆优化）" class="headerlink" title="Dijkstra（堆优化）"></a>Dijkstra（堆优化）</h3><blockquote><ul><li><p>times中的数组 a a[0]代表源，a[1]代表目标，a[2]代表权值，单向的</p></li><li><p>一般堆优化的都用邻接表， <code>map&lt; Integer,List&lt; int[]&gt;&gt;</code>来存放源到目的节点及权值，而朴素dijkstra直接用数组就可以了</p></li><li><p>dijkstra 需要 dis数组和vis数组，都开N+1，dis的初始化要当心，具体是初始化为-1还是INF看情况，其次不要忘记初始化之后再重置dis[源]和dis{0}为0</p></li></ul></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> times<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化邻接表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> times<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化dis数组和vis数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//起点的dis为0，但是别忘记0也要搞一下，因为它是不参与的，但是我计算结果的时候直接用了stream，所以这个0也就要初始化下了</span>        dis<span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new一个小堆出来，按照dis升序排，一定要让它从小到大排，省去了松弛工作</span>        PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> dis<span class="token punctuation">[</span>o1<span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span>o2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把起点放进去</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当队列不空，拿出一个源出来</span>            Integer poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把它标记为访问过</span>            vis<span class="token punctuation">[</span>poll<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历它的邻居们，当然可能没邻居，这里用getOrDefault处理就很方便</span>            List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>poll<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> next <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果这个邻居访问过了，继续</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//更新到这个邻居的最短距离，看看是不是当前poll出来的节点到它更近一点</span>                dis<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>poll<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果堆中有这个节点，就要先把它剔除，再放进去</span>                queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拿到数组中的最大值比较下，返回结果</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h3><blockquote><ul><li>SPFA是一种用队列优化的B-F算法，在稀疏图中，采用类似邻接链表储存比较节省空间。</li><li>也需要用到dis和vis数组，开N+1，初始化也要看情况</li></ul><p>【算法思想】</p><ol><li>初始时，只有把起点放入队列中。</li><li>遍历与起点相连的边，如果可以松弛就更新距离dis[],然后判断如果这个点没有在队列中就入队标记。</li><li>出队队首，取消标记，循环2-3步，直至队为空。</li><li>所有能更新的点都更新完毕，dis[]数组中的距离就是，起点到其他点的最短距离。</li></ol><p><strong>ps：这边我犯的一个错误是这样的</strong></p><pre class=" language-java"><code class="language-java">Integer poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token keyword">if</span><span class="token punctuation">(</span>判断是否是poll的邻居<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>判断是否需要更新<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//更新代码</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      vis<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>这样写是错的，如果图中有环，在不需要更新的情况下，就能重复入队，所以应该改为</p><pre class=" language-java"><code class="language-java">Integer poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token keyword">if</span><span class="token punctuation">(</span>判断是否是poll的邻居 <span class="token operator">&amp;&amp;</span> 判断是否需要更新<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//更新代码</span>      <span class="token comment" spellcheck="true">//...</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      vis<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></blockquote><h4 id="邻接表写法"><a href="#邻接表写法" class="headerlink" title="邻接表写法"></a>邻接表写法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//SPFA：用邻接表写</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> times<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构建临街表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> times<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化dis数组和vis数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//dis的初始化可以-1，也可以INF，看情况</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//new一个队列，而不是堆。放入起点</span>    Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取出队首节点</span>        Integer poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历起点的邻居,更新距离</span>        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>poll<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果没更新过，或者需要更新距离()</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">==</span> INF <span class="token operator">||</span> dis<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>poll<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//更新距离</span>                dis<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>poll<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果没有访问过，才入队 （那么判断入度可以在这里做文章）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    vis<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当遍历完 当前节点的邻居后，就可以重置为false了！！！这就是可以重复入队，可以再更新，而不是像dijkstra那样贪心</span>        vis<span class="token punctuation">[</span>poll<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res <span class="token operator">==</span> INF <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="邻接矩阵写法"><a href="#邻接矩阵写法" class="headerlink" title="邻接矩阵写法"></a>邻接矩阵写法</h4><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> times<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化edge</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">==</span> j <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> times<span class="token punctuation">)</span> <span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span>        dis<span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这里就和邻接链表不太一样，要遍历所有的节点，看是不是邻居关系，所以用邻接链表更适合</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                如果是邻居，，一定要在这一步全部写完，如果能更新才能判断能不能入队，                不要写成下面这样，血的教训，这样是判断邻居，但是不更新，也能入队！                if (edge[poll][i] != -1) {                    //更新                    if (dis[i] == INF || dis[i] > dis[poll] + edge[poll][i]) {                        dis[i] = dis[poll] + edge[poll][i];                    }                    if (!vis[i]) {                        vis[i] = true;                        queue.offer(i);                    }                }                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>poll<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> INF <span class="token operator">||</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>poll<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>poll<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//更新</span>                    dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>poll<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>poll<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            vis<span class="token punctuation">[</span>poll<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> INF <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><blockquote><ul><li>由于是动态规划，所以都是用邻接矩阵</li><li>并且它是不用 dis 数组和  vis 数组的</li><li>这边注意，初始化邻接矩阵的时候，如果两个顶点没有边，<strong>最好初始化为INF</strong>，别初始化为-1，这也是我提交时候注意到的，上面说过Floyd是不能处理负权边的，只能判断有没有负环！</li></ul></blockquote><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> times<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">==</span> j <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> INF<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//注意，我一开始距离是初始化为INF的，而不是-1，因为要取min的啊</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> times<span class="token punctuation">)</span> <span class="token punctuation">{</span>            edge<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用K节点来松弛i->j的最短路径（大白话就是利用k作为中间节点）</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> k <span class="token operator">&amp;&amp;</span> j <span class="token operator">!=</span> k <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拿结果</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> distance <span class="token operator">:</span> edge<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> INF <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2020/03/01/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%BA%90%E7%A0%81/"/>
      <url>/2020/03/01/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池源码"><a href="#线程池源码" class="headerlink" title="线程池源码"></a>线程池源码</h1><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311165430764.png" alt=""></p><blockquote><p>首先来了一个任务，先判断下核心线程池里的线程数有没有达到设定的值，如果没有，就可以新建个Worker出来处理任务，处理任务的时候如果这个任务为空，那这个worker就阻塞住，因为这个任务不需要处理，如果这个任务不为空，就会准备执行任务，这个Worker实现了Runnable接口，并且继承了AQS，那么它就会重写run方法，它重写的run方法里面调用了runWorker()，这个是真正执行任务的，执行任务时，那么首先就会所在执行任务前看看你有没有重写beforeExecute，如果重写了，那就会执行下，然后再执行任务，执行完也会看下有没有重写afterExecute。</p><p>如果来了一个任务，队列没满，就尝试放进阻塞队列，在尝试放入阻塞队列的时候，如果线程池状态异常，那就会拒绝任务，如果队列满了，那就要看此时你设置的maxinumPoolSize，看线程池里的线程有没有达到这个最大值，如果没有，那就可以创建线程出来执行任务，如果达到了，没有线程了，那就只能采取拒绝策略，常用的拒绝策略是 abortpolicy（抛异常），还有discardPolicy（直接丢弃任务），还有discardOldestPolicy（直接丢弃队列中最老的任务），还有个忘了</p></blockquote><h3 id="1、Executor"><a href="#1、Executor" class="headerlink" title="1、Executor"></a>1、Executor</h3><p>这个是多线程的顶级接口，只有一个execute方法</p><h3 id="2、ExecutorService"><a href="#2、ExecutorService" class="headerlink" title="2、ExecutorService"></a>2、ExecutorService</h3><p>Executor 的功能太弱，只有一个execute，ExecutorService接口 丰富了对任务的执行和管理的功能，它继承了Executor接口</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程池关闭，不会接受新的任务，也不会等待未完成的任务</span><span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// executor 是否已经关闭了，返回值 true 表示已关闭</span><span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 所有的任务是否都已经终止，是的话，返回 true</span><span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在超时时间内，等待剩余的任务终止</span><span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 提交有返回值的任务，使用 get 方法可以阻塞等待任务的执行结果返回</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入Runnable就没有返回结果了</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还有其他一些方法，这里只是举例</span></code></pre></blockquote><h3 id="3、AbstractExecutorService"><a href="#3、AbstractExecutorService" class="headerlink" title="3、AbstractExecutorService"></a>3、AbstractExecutorService</h3><p>这个是个一个抽象类，封装ExecutorService里的功能</p><h3 id="4、注释得到的信息"><a href="#4、注释得到的信息" class="headerlink" title="4、注释得到的信息"></a>4、注释得到的信息</h3><ul><li>线程池可以使用Executors进行配置<ul><li>Executors.newCachedThreadPool 无界的线程池，并且可以自动回收;</li><li>Executors#newFixedThreadPool 固定大小线程池;</li><li>Executors#newSingleThreadExecutor 单个线程的线程池;</li></ul></li><li>线程池提供可供扩展的参数设置,corsSize和maxSize，一般来说这两个值初始化时候就设定了，当然我们可以自己set，来修改这两个值</li><li>线程池创建时有多种队列可供选择，有四种队列，可见我另一篇博客<ul><li>LinkedBlockingQueue，无界阻塞队列</li><li>ArrayBlockingQueue，有界阻塞队列</li><li>DelayBlockingQueue，延迟队列</li><li>SynchronousQueue，同步阻塞队列</li></ul></li><li>线程池用了模版方法模式，提供了很多hook函数，比如beforeExecute()、afterExecute()，在线程执行前后需要做什么</li><li>还有很多信息就不写了</li></ul><h3 id="5、ThreadPoolExecutor的重要属性"><a href="#5、ThreadPoolExecutor的重要属性" class="headerlink" title="5、ThreadPoolExecutor的重要属性"></a>5、ThreadPoolExecutor的重要属性</h3><ul><li><code>ctl</code>：线程池状态字段，它是由两部分构成的<ul><li><code>workerCount</code>，wc 工作线程数， workerCount 最大到(2^29)-1，大概 5 亿个线程</li><li>runState，rs 线程池的状态</li></ul></li><li><code>RUNNING</code>：值为-536870912，表示线程池正在接受新任务或者处理队列里的任务</li><li><code>SHUTDOWN</code>：值为0，表示不接受新任务，但仍在处理已经在队列里面的任务</li><li><code>STOP</code>：值为-536870912，不接受新任务，也不处理队列中的任务，有正在执行的任务就中断</li><li><code>TIDYING</code>：值为1073741824，它是整理状态，所有任务都被中断，此时wc是0</li><li><code>TERMINATED</code>：terminated() 已经完成的时候</li><li><code>ThreadFactory threadFactory</code>：使用 threadFactory 创建 thread</li><li><code>RejectedExecutionHandler handler</code>：拒绝任务的 handler 处理类</li><li><code>corePoolSize</code>：线程池线程核心数</li><li><code>maximumPoolSize</code>：线程池最大线程数</li></ul><p>Worker是线程池中运行任务的最小单元，Worker实现了Runnable接口，继承了AQS类。Worker本身就是一个Runnable，在它的构造方法中，<code>getThreadFactory().newThread(this)</code>这是话是说它是把自己作为任务传递给了thread</p><pre class=" language-java"><code class="language-java"><span class="token function">Worker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inhibit interrupts until runWorker</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Worker就像是任务的一个代理，Worker实现了Runnable，所以要重写run方法，这个run方法调用了<code>runWorker()</code>，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Worker继承了AQS，那么它本身就是一个锁，在执行任务的时候，它会锁住它自己，执行完任务然后再释放自己，Worker里面也是重写了<code>tryAcquire()</code>和<code>tryRelease（）</code></p><h2 id="创建线程池及一些线上问题"><a href="#创建线程池及一些线上问题" class="headerlink" title="创建线程池及一些线上问题"></a>创建线程池及一些线上问题</h2><p>第一种线程池的创建方式是利用线程池的工具类Executors来new一个这个线程池</p><pre class=" language-java"><code class="language-java">ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3就是corePoolSize，核心线程数量</span></code></pre><p>第二线程池的创建方式是直接new一个ThreadPollExecutor()，下面这种方式更推荐</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311152100833.png" alt=""></p><p>这边有几个参数</p><ul><li><code>corePollSize</code>：指定核心线程数量，这个就是线程池里</li><li><code>maximumPoolSize</code>：这个是假设我线程池里已经有<code>corePollSize</code>个线程了，但是它们处理任务很慢，然后阻塞队列也满了，如果此时<code>maximumPoolSize</code>它是大于这个核心线程数的，那就会再创建这个线程出来执行任务，那么这个<code>maximumPoolSize</code>创建出来的线程什么时候被回收呢，就用到了下面这个参数</li><li><code>keepAliveTime</code>：这个也就是说，我<code>maximumPoolSize</code>里面的线程空闲时间达到<code>keepAliveTime</code>，那就可以回收了</li><li>还有一种情况是这个<code>corePollSize</code>满了，队列满了，<code>maximumPoolSize</code>也满了，那就不能再创建额外的线程出来了，所以这边就有拒绝策略，常见的拒绝策略是 <code>AbortPolicy</code>，就直接丢弃任务，还有<code>DiscardPolicy</code>、<code>DiscardOldestPolicy</code>等等</li><li>一般用的是fixed线程池，它的<code>corePollSize</code>和<code>maximumPoolSize</code>是一样大的，然后默认的阻塞队列是无界阻塞队列，可以无限制放任务，如果用无界阻塞队列不设置上限，然后处理任务也很慢，队列积压很多，那么内存飙升，回收也没法回收，就可能导致<code>OOM</code></li><li>针对上面的解决策略是，我可以自定义一个拒绝策略，队列满了，来任务了，我就持久化到磁盘上去，等我任务处理的差不多了，再从磁盘上读进来再处理任务。</li><li>当然线程机器可能宕机，那么这个任务不就没了吗，所以一种处理措施是，我在提交任务的时候，往数据库里写上这个任务的信息，然后给他设置个状态，是未提交、提交了、已完成，提交成功后更改状态，如果此时系统宕机也没关系，系统重启再去扫描数据库里面未提交和已提交的任务，再执行</li></ul><h2 id="submit-和execute"><a href="#submit-和execute" class="headerlink" title="submit()和execute()"></a>submit()和execute()</h2><p>首先看一下结构</p><p><code>Executor</code>是线程池最顶级的接口，它的一个子接口是<code>ExecutorService</code>，然后是有一个抽象类<code>AbstractExecutorService</code>实现了<code>ExecutorService</code>这个接口，最后才是这个<code>ThreadPoolExecutor</code>来继承这个抽象类。</p><blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExecutorService</span>（二级接口） <span class="token keyword">extends</span> <span class="token class-name">Executor</span>（线程顶级接口）<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExecutorService</span>（第三级） <span class="token keyword">implements</span> <span class="token class-name">ExecutorService</span><span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutor</span>（第四级） <span class="token keyword">extends</span> <span class="token class-name">AbstractExecutorService</span></code></pre></blockquote><p>但是我们new一个<code>ThreadPoolExecutor</code>出来后，既可以执行<code>submit()</code>，也可以执行<code>execute()</code>，实际上这两个是有区别的</p><ul><li><p>顶级接口<code>Executor</code>这个接口它只有一个<code>execute()</code>方法</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>二级接口<code>ExecutorService</code>，在这一层，添加了<code>submit()</code>方法</p><ul><li><p>command+F12</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311160725648.png" alt=""></p></li></ul></li><li><p>到了第三层<code>AbstractExecutorService</code>，它实现了<code>ExecutorService</code>这个接口，自然有<code>submit</code>和<code>execute</code>这两个方法</p></li><li><p>到了第四层<code>ThreadPoolExecutor</code>这个实现类，它没有<code>submit</code>这个方法，但是有<code>execute</code>方法</p><ul><li><p>那么实际上<code>ThreadPoolExecutor</code>的实例调用的是<code>AbstractExecutorService</code>的<code>submit</code>方法</p></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//AbstractExecutorService的submit方法，举例两个</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>可以看到这个<code>AbstractExecutorService</code>的submit方法本质上还是调用了Executor的execute方法</p></li></ul></li></ul><p>注意submit的返回值是 Future 类的，而execute的返回值是void</p><p><strong>submit做了两件事情</strong></p><ul><li>submit的参数可以是实现了runnable接口的，也可以是实现了callable接口的，第一件事情就是把Runnable接口和Callable都转化成FutureTask</li><li>第二件事情就是让execute方法执行FutureTask</li></ul><h3 id="execute"><a href="#execute" class="headerlink" title="execute()"></a>execute()</h3><p><strong>那么<code>ThreadPoolExecutor</code>的execute()这个方法的实现是怎样的呢？</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311220043075.png" alt=""></p><p>这一道这边有个，这个意思是说，并发的时候，可能线程还没启动，任务已经跑起来了，所以会预先搞个非核心线程出来</p><pre class=" language-java"><code class="language-java"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="addWorker-与runWorker"><a href="#addWorker-与runWorker" class="headerlink" title="addWorker()与runWorker()"></a>addWorker()与runWorker()</h3><p>接着看一下<code>addWorker()</code>方法，它就是结合线程池的情况看要不要添加Worker</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311220801057.png" alt=""></p><p>注意addWorker方法传进来的参数是firstTask， 在初始化的过程中，会把 worker自己作为任务传给 thread 去初始化，上文说了 Worker 在初始化时的关键代码，<code>this.thread = getThreadFactory ().newThread (this)</code>，<code>Worker(this)</code> 是作为新建线程的构造器入参的，所以 t.start () 会执行到 Worker 的 run 方法上</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311164323092.png" alt=""></p><p>这个worker的run调用了一个runWorker</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311164444333.png" alt=""></p><p>这个runWorker才是真正去执行run方法的，也是比较重要的方法</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311221727104.png" alt=""></p><p>通过<code>w.firstTask</code>拿到的task，此时的task是FutureTask类（Future接口的子接口又个RunnableFuture，这个RunnableFuture的父接口是Future和Runnable，然后FutureTask实现了RunnableFuture这个接口，所以FutureTask里面也有run方法），直接看FutureTask的run的源码，它是没有返回值的</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311223336589.png" alt=""></p><h3 id="执行完任务之后呢"><a href="#执行完任务之后呢" class="headerlink" title="执行完任务之后呢"></a>执行完任务之后呢</h3><p>上面代码也看到了，在runWorker()方法中是一个while循环，如果队列中有任务就继续执行</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311223729888.png" alt=""></p><p>那么关键就是这个getTask方法</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200311225053893.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-树状数组</title>
      <link href="/2019/12/12/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/12/12/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><h2 id="一、树状数组概念"><a href="#一、树状数组概念" class="headerlink" title="一、树状数组概念"></a>一、树状数组概念</h2><p><strong>Binary Indexed Tree</strong>，用于维护前缀信息的结构，对前缀信息处理也十分高校，用于解决前缀信息问题和区间类问题。</p><p>比如：给定一个数组，实现两个函数</p><ul><li><strong>update</strong>(int index,int val)，将数组下标为index的元素改为val</li><li><strong>querySum</strong>(int start,int end)，返回区间内元素和</li></ul><p>这两个用线段树求过很多遍了。树状数组也是通过前缀和的思想来完成单点更新和区间查询。它比线段树用的空间更小，速度更快。</p><h2 id="二、树状数组算法分析"><a href="#二、树状数组算法分析" class="headerlink" title="二、树状数组算法分析"></a>二、树状数组算法分析</h2><p><strong>注意</strong>：树状数组的下标从 1 开始计数。定义数组 C 是一个对原始数组 A 的预处理数组。</p><p>由原数组构造树状数组</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y3FydTNlajMyNHYwdTAwencuanBn?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y2xsdzllajMyMXAwdTBnc20uanBn?x-oss-process=image/format,png" alt="image-20200109002054068"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y25uMDE3ajMyMTYwdTBuM3QuanBn?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y3B3amg0ajMyM3MwdTAwenkuanBn?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y3BjcXV6ajMyZjgwcXN0ZGguanBn?x-oss-process=image/format,png" alt=""></p><blockquote><p><strong>结论</strong>：C[i]来自几个数组A中的元素:取决于i的二进制末尾有几个连续的0。比 如有k个0，那么C[i]来自2^k^个A中的元素。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y29mbGhrajMyM2IwdTBxYXYuanBn?x-oss-process=image/format,png" alt=""></p><p>如果i是当前位置，当前有 $2^k$ 个来自A中的元素，有哪 $2^k$ 个呢？就是从C[i]的正下方出发，往前数 $2^k$ 个，C[i]就是这2^k^个数的和。</p><p>定义一个 $lowbit(i) = 2^k$ 函数，就是把下标i传到函数中来，返回 $2^k$，lowbit表示C[i]这个数值是由A中的多少个元素相加得来的。（根据上面一段，你还能找到这几个元素是啥，从C[i]的正下方开始往前数2^k^个）</p><p>怎么找父亲节点？<code>i+lowbit(i) = 父亲</code>比如C[4]，4的lowbit是4，它有个宽度为4的梯子，这个梯子就是它到它父亲的距离宽度。4+lowbit(4) = 8。再比如6，6的lowbit是2，6+2 = 8</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y3I3cWluajMyYXkwcmc0MmsuanBn?x-oss-process=image/format,png" alt=""></p><h2 id="三、lowbit函数"><a href="#三、lowbit函数" class="headerlink" title="三、lowbit函数"></a>三、lowbit函数</h2><p>lowbit函数用到了补码相关知识。给定一个数，比如12，我们能求得它的二进制1100，如何求-12的二进制？实际上二进制前面有个符号位，正数前面符号位是0，负数前面符号位是1，12的二进制实际上是01100，那么求-12的二进制有两步</p><ul><li>首先把符号位从0改成1，然后对12每位取反。变成10011</li><li>最后+1，即10011+1 = 10100，这就是-12的二进制</li></ul><p>推荐<a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html" target="_blank" rel="noopener">一篇关于原码、反码、补码博客</a></p><p><code>lowbit(i) = 2^k</code>，它就是利用了正数和负数的二进制</p><pre class=" language-java"><code class="language-java">num <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span>k</code></pre><h2 id="四、树状数组的构建、修改、查询"><a href="#四、树状数组的构建、修改、查询" class="headerlink" title="四、树状数组的构建、修改、查询"></a>四、树状数组的构建、修改、查询</h2><h3 id="1、构建"><a href="#1、构建" class="headerlink" title="1、构建"></a>1、构建</h3><p>把原始数组A和预处理数组C都初始化为0，每更新一个元素，都要把它的值累加到它父亲的值上面去。比如初始化A1后，要把它的值累加到它父亲C1上面去，C1接收到值后，还要把C1的值传递给C2，然后C2传递给C4，C4传递给C8，如果A1的值为10，那第一次更新完就是这个样子</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y2x2ZGZvajMxbjYwamtqdDYuanBn?x-oss-process=image/format,png" alt=""></p><p>再更新A2，C2就要开始累加A2的值，并传给C2的父亲们，比如A2为5，就是下面这样子</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXE5Y296c3JsajMxbW8wanEwdjEuanBn?x-oss-process=image/format,png" alt=""></p><h3 id="2、更新"><a href="#2、更新" class="headerlink" title="2、更新"></a>2、更新</h3><p>比如我要把A1从10改为1，那么就会有一个差值delta为9，C1更新成1，然后不断传给它的父亲们继续更新。</p><h3 id="3、查询"><a href="#3、查询" class="headerlink" title="3、查询"></a>3、查询</h3><p>想要查询区间<code>[i,j]</code>的和，首先要查询区间<code>[1,j]</code>（树状数组起点从1开始的）和区间<code>[1,i-1]</code>的和，前者减去后者就是我们要求的答案。</p><p>这里还有个求前缀和<code>[1,i]</code>的公式，是推导出来的，<code>sum(i) = sum(i - lowbit(i)) + C[i]</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BinaryIndexedTree</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> C<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义原始数组A和预处理数组C</span>        <span class="token comment" spellcheck="true">//init</span>        <span class="token keyword">public</span> <span class="token function">BinaryIndexedTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            C <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">update</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> delta <span class="token operator">=</span> val <span class="token operator">-</span> A<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到新val与原val的差值</span>            A<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 从index+1开始，因为C数组我们定义从1开始的。             * 每次更新完C[index+1]，还要再继续更新它的父亲。距离就是宽度lowbit(i)             */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> delta<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">querySum</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getPrefixSum</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getPrefixSum</span><span class="token punctuation">(</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取前缀和</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrefixSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 从正下方开始，先找到它前面2^k个的和,比如6，就是找到它前两个（包括它自身）             * i = i - lowbit(i)意思是，找完那2^k个，下一个应该从C[4]开始找了             */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-线段树</title>
      <link href="/2019/12/12/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/12/12/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>概念：线段树就是一棵二叉树，每个节点代表一个区间，主要用于解决区间类问题。每个节点的属性根据需要可以去自定义，比如节点的属性可以是区间和、区间最大/最小值。。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXBrZWZ3eGthajMxZ2cwaXFkZ24uanBn?x-oss-process=image/format,png" alt="线段树"></p><h2 id="一、线段树节点定义"><a href="#一、线段树节点定义" class="headerlink" title="一、线段树节点定义"></a>一、线段树节点定义</h2><p>每个node有区间的左右端点，以及左右孩子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> start<span class="token punctuation">,</span>end<span class="token punctuation">,</span>val<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//val根据需要定义，比如我定义为区间最大值就是max</span>      SegmentTreeNode left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">SegmentTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、线段树的构建、修改、查询"><a href="#二、线段树的构建、修改、查询" class="headerlink" title="二、线段树的构建、修改、查询"></a>二、线段树的构建、修改、查询</h2><h3 id="1、构建"><a href="#1、构建" class="headerlink" title="1、构建"></a>1、构建</h3><p>自上而下，分治法，递归调用。</p><p>对于区间[m1,m2]，mid = (m1+m2)/2，其左儿子区间是[m1,mid]，右儿子区间是(mid+1,m2)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线段树的构建,以求区间最大值为例,返回根节点</span><span class="token keyword">public</span> SegmentTreeNode <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> A<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//先new根区间,根区间最大值暂时为A[start],不能为其他乱七八糟的值比如-1这种...</span>    SegmentTreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> A<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//改root的val</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>max <span class="token operator">></span> root<span class="token punctuation">.</span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>max <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>max <span class="token operator">></span> root<span class="token punctuation">.</span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>max <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2、修改"><a href="#2、修改" class="headerlink" title="2、修改"></a>2、修改</h3><p>递归调用，一路向下找到最小区间，触底反弹的时候才去修改node。比如数组[6,3,5,1,9]，我要修改1位置上的3，那就是一路向下先找到3，然后返回途中修改 ，时间复杂度logN</p><p><img src="https://img-blog.csdnimg.cn/2020010823242568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQyNDY2OA==,size_16,color_FFFFFF,t_70" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线段树的修改,</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>SegmentTreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">==</span> index <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>end <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>max <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">+</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//看index在左区间还是右区间</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">&lt;=</span> index <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">modify</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> index <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">modify</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最后改下根</span>    root<span class="token punctuation">.</span>max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>max<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、查询"><a href="#3、查询" class="headerlink" title="3、查询"></a>3、查询</h3><p>比如上面例子，找[0,3]，先找[0,2]，再找[3,3]。找[0,2]，直接返回，找[3-3]，就需要走到底</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线段树的查询</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>SegmentTreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> root<span class="token punctuation">.</span>start <span class="token operator">&amp;&amp;</span> end <span class="token operator">==</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span>max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>start <span class="token operator">+</span> root<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left_max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> right_max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求左边最大值</span>    <span class="token comment" spellcheck="true">//如果给定查询范围起点在左子树</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//但是终点在右子树（横跨左子树和右子树）,那么左边最大值就在start到mid之间查询</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left_max <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果只在左子树</span>            left_max <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求右边最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//横跨左右子树的情况，起点为mid+1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            right_max <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果只在右子树</span>            right_max <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left_max<span class="token punctuation">,</span> right_max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三、线段树性质"><a href="#三、线段树性质" class="headerlink" title="三、线段树性质"></a>三、线段树性质</h2><p>对于区间[m1,m2]，mid = (m1+m2)/2，其左儿子区间是[m1,mid]，右儿子区间是(mid+1,m2)</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXBrZWYwc2tvajMxbWUwbXEweWguanBn?x-oss-process=image/format,png" alt=""></p><h2 id="四、题目练习"><a href="#四、题目练习" class="headerlink" title="四、题目练习"></a>四、题目练习</h2><h3 id="1、LintCode-206-Interval-Sum"><a href="#1、LintCode-206-Interval-Sum" class="headerlink" title="1、LintCode 206. Interval Sum"></a>1、LintCode 206. Interval Sum</h3><p>区间求和</p><blockquote><p>给定一个整数数组（下标由 0 到 n-1，其中 n 表示数组的规模），以及一个查询列表。每一个查询列表有两个整数 <code>[start, end]</code> 。 对于每个查询，计算出数组中从下标 start 到 end 之间的数的总和</p><pre><code>输入: 数组 ：[1,2,7,8,5], 查询：[(0,4),(1,2),(2,4)]输出: [23,9,20]</code></pre></blockquote><p>思路</p><ul><li>暴力，枚举O(nm)，n为数组长度，m为查询次数</li><li>线段树/树状数组，O(mlogn)</li><li>前缀和数组O(n+m)，这个题没有涉及到修改，可以用</li></ul><p>首先定义Node和树</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//线段树Node</span>    <span class="token keyword">class</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> start<span class="token punctuation">;</span>        <span class="token keyword">int</span> end<span class="token punctuation">;</span>        <span class="token keyword">long</span> sum<span class="token punctuation">;</span>        SegmentTreeNode left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SegmentTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>            sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span>  <span class="token class-name">SegmentTree</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//区间</span>        <span class="token keyword">private</span> SegmentTreeNode root<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SegmentTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            root <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> SegmentTreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SegmentTreeNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归出口，叶子节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>sum <span class="token operator">=</span> A<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不是出口，递归建立左子树和右子树</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//别忘记维护当前节点的sum</span>            node<span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//查询对外界接口</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">querySum</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">querySum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//重载方法.在node节点下查询原数组start到end区间内的和</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">querySum</span><span class="token punctuation">(</span>SegmentTreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//递归出口</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">==</span> start <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">+</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> leftSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//左边区间</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果不是跨区间</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    leftSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    leftSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//可以合并为一行 !!!!</span>                <span class="token comment" spellcheck="true">// leftSum = querySum(node.left, start, Math.min(mid, end));</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//要考虑右半区间，也就是start-end与右半区间有交集</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果不是跨区间</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rightSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    rightSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 可以合并为一句</span>                <span class="token comment" spellcheck="true">// rightSum = querySum(node.right, Math.max(mid + 1, start), end);</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>实现方法</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interval</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>        <span class="token function">Interval</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token function">intervalSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Interval<span class="token operator">></span> queries<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Long<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SegmentTree segmentTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Interval query <span class="token operator">:</span> queries<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> sum <span class="token operator">=</span> segmentTree<span class="token punctuation">.</span><span class="token function">querySum</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>start<span class="token punctuation">,</span> query<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、LintCode-207-Interval-Sum"><a href="#2、LintCode-207-Interval-Sum" class="headerlink" title="2、LintCode 207.  Interval Sum"></a>2、LintCode 207.  Interval Sum</h3><blockquote><p>在类的构造函数中给一个整数数组, 实现两个方法 <code>query(start, end)</code> 和 <code>modify(index, value)</code>:</p><ul><li>对于 query(<em>start</em>, <em>end</em>), 返回数组中下标 <em>start</em> 到 <em>end</em> 的 <strong>和</strong>。</li><li>对于 modify(<em>index</em>, <em>value</em>), 修改数组中下标为 <em>index</em> 上的数为 <em>value</em>.</li></ul></blockquote><p>比206多了modify，无法使用前缀和数组，暴力O(nm)，线段树/树状数组O(mlogn)，n为数组长度，m为操作次数。</p><p>线段树类中提供三个方法</p><ul><li>构造器传入int[] A</li><li>querySum(int start, int end)</li><li>modify(int index, int val)</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> SegmentTree segmentTree<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> null <span class="token operator">||</span> A<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            segmentTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> segmentTree<span class="token punctuation">.</span><span class="token function">querySum</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            segmentTree<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> sum<span class="token punctuation">;</span>        <span class="token keyword">public</span> SegmentTreeNode left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SegmentTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>            sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> SegmentTreeNode root<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SegmentTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            root <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> SegmentTreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SegmentTreeNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归出口</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>sum <span class="token operator">=</span> A<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不是出口则递归建所有子树</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//公开接口</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">querySum</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">querySum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//公开接口</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">modify</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">querySum</span><span class="token punctuation">(</span>SegmentTreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">==</span> start <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">+</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这边不是start和end 是node的区间</span>            <span class="token keyword">long</span> leftSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                leftSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                rightSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>SegmentTreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//递归出口：到达这个叶子节点，并修改它的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">==</span> node<span class="token punctuation">.</span>end <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>sum <span class="token operator">=</span> val<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//递归：分为在左子树和右子树两种情况,不用求mid</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>end <span class="token operator">>=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">modify</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">modify</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//最后改下根</span>            node<span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、LintCode-248-Count-of-Smaller-Number"><a href="#3、LintCode-248-Count-of-Smaller-Number" class="headerlink" title="3、LintCode 248. Count of Smaller Number"></a>3、LintCode 248. Count of Smaller Number</h3><p>统计比给定整数小的数的个数</p><blockquote><p>给定一个整数数组 （下标由 0 到 n-1，其中 n 表示数组的规模，数值范围由 0 到 10000），以及一个查询列表。对于每一个查询，将会给你一个整数，请你返回该数组中小于给定整数的元素的数量。</p><pre><code>输入: array =[1,2,7,8,5] queries =[1,8,5]输出:[0,4,2]</code></pre></blockquote><p>时间复杂度：</p><ul><li>暴力求O(nm)，n为数组长度，m为查询次数</li><li>线段树/树状数组O(mlogk)，m为查询次数，k为数组最大值</li><li>二分,先排序，nlogn，然后查询比某个数小，只要得到它的位置即可，O(nlogn+mlogn)</li><li>前缀和数组，线性，O(k+n+m)，本题较好的方式，但是扩展较为困难</li></ul><p>线段树思路：</p><ul><li>数组内元素范围在0～10000，用数组B[i]代表i这个值出现了多少次，那么查询比x小的元素只要计算B的前缀和B[0]+B[1]+…+B[x-1]，那就是查询B数组的某一个区间和，查询时间复杂度为logk（k为数组最大值）。这个题用前缀和也是非常的方便，但是遇到follow up就不行了。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">countOfSmallerNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queries<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>                B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//建立线段树，大小为10001</span>            SegmentTree tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tree<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//i位置修改为B[i]，表示这个数出现了多少次</span>            <span class="token punctuation">}</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> queries<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没有数比0小，都是正数</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">querySum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>        <span class="token keyword">public</span>  <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>        <span class="token keyword">public</span>  SegmentTreeNode left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SegmentTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>            sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">private</span> SegmentTreeNode root<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SegmentTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>            root <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化得到的是全0的树</span>        <span class="token keyword">private</span> SegmentTreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SegmentTreeNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">querySum</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">querySum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在node节点的子树下，查询[start,end]区间内维护的和</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">querySum</span><span class="token punctuation">(</span>SegmentTreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">==</span> start <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> leftSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">+</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                leftSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                rightSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">modify</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>SegmentTreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">==</span> node<span class="token punctuation">.</span>end <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//可以省略node.end == index</span>                node<span class="token punctuation">.</span>sum <span class="token operator">=</span> val<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>end <span class="token operator">>=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">modify</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">modify</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//维护当前节点sum</span>            node<span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、LintCode-249-Count-of-Smaller-Number-before-itself"><a href="#4、LintCode-249-Count-of-Smaller-Number-before-itself" class="headerlink" title="4、LintCode 249. Count of Smaller Number before itself"></a>4、LintCode 249. Count of Smaller Number before itself</h3><p>统计前面比自己小的数的个数</p><blockquote><p>给定一个整数数组（下标由 0 到 n-1， n 表示数组的规模，取值范围由 0 到10000）。对于数组中的每个 <code>ai</code> 元素，请计算 <code>ai</code> 前的数中比它小的元素的数量。</p><pre><code>输入:[1,2,7,8,5]输出:[0,1,2,3,2]</code></pre></blockquote><p>时间复杂度：</p><ul><li>暴力，O(n^2^)</li><li>树状数组/线段树，O(nlogk)，n为数组长度，k为数组最大值</li></ul><p>思路：</p><ul><li>数组内范围为0～10000，假设数组B，B[i]表示数组A当前元素之前有多少个i（或者说B[i]表示A中有多少个i，只不过它是实时变化的）。查询比x小的数的个数相当于求B的x-1前缀和，B[0]+B[1]+…+B[x-1]</li></ul><blockquote><p>A=[1,2,7,8,5] </p><p>B=[0,0,0,0,0,0,0,0,0]    初始，这里B得开9，因为0～8一共9位</p><p>B=[0,1,0,0,0,0,0,0,0]     B[1]++，统计比A中第二个元素(2)小的个数，B[0]+B[1]</p><p>B=[0,1,1,0,0,0,0,0,0]     B[2]++，A中第三个元素为7，计算B[0]+…+B[6]</p><p>B=[0,1,1,0,0,0,0,1,1]     B[7]++，A中第四个元素为8，计算B[0]+…+B[7]</p><p>B=[0,1,1,0,0,1,0,1,1]     B[8]++，A中第五个元素为5，计算B[0]+…+B[4]</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">countOfSmallerNumberII</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SegmentTree tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">querySum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//更新B</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            tree<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    <span class="token keyword">public</span> SegmentTreeNode left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SegmentTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        left <span class="token operator">=</span> right <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SegmentTree</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> SegmentTreeNode root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SegmentTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化得到的是全0的树</span>    <span class="token keyword">private</span> SegmentTreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SegmentTreeNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">querySum</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">querySum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在node节点的子树下，查询[start,end]区间内维护的和</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">querySum</span><span class="token punctuation">(</span>SegmentTreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">==</span> start <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> leftSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">+</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            leftSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rightSum <span class="token operator">=</span> <span class="token function">querySum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">modify</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>SegmentTreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">==</span> node<span class="token punctuation">.</span>end <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//可以省略node.end == index</span>            node<span class="token punctuation">.</span>sum <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>end <span class="token operator">>=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">modify</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">modify</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//维护当前节点sum</span>        node<span class="token punctuation">.</span>sum <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="/2019/12/10/%E5%8C%BA%E9%97%B4%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/12/10/%E5%8C%BA%E9%97%B4%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划：区间型"><a href="#动态规划：区间型" class="headerlink" title="动态规划：区间型"></a>动态规划：区间型</h2><p><strong>背景：</strong>给定一个序列或字符串要进行一些操作，最后一步要将序列或字符串<strong>去头、去尾</strong>，区间[i,j]变为区间[i+1,j-1]，力扣上面的最长回文子串就是这样子操作。区间型dp一般用dp[i] [j]，i代表左端点，j代表右端点，若有其他维度可再添加，若两个端点之间存在联系，则可再压缩空间。</p><p><strong>区间型dp不开n+1，开n，区间型dp要按照长度去算。不能按照i，要按照j-i。</strong></p><h3 id="1、LintCode-667-Longest-Palindromic-Subsequence"><a href="#1、LintCode-667-Longest-Palindromic-Subsequence" class="headerlink" title="1、LintCode 667 Longest Palindromic Subsequence"></a>1、<a href="https://www.lintcode.com/problem/longest-palindromic-subsequence/description" target="_blank" rel="noopener"><strong>LintCode 667 Longest Palindromic Subsequence</strong></a></h3><p>【问题】给一字符串 s,，找出在 s 中的最长回文子序列的长度.。你可以假设 s 的最大长度为 1000。</p><p>【分析】注意区分子串和子序列，子串是连续的，子序列可以不连续，这个题是子序列，可以不连续。从最后一步出发，假设S是最长回文子序列，长度为<code>len</code>，分析这个子序列有两种情况</p><ul><li>子序列长度为1，只有一个字母</li><li>子序列长度大于1，必有<code>S[0] = S[len-1]</code></li></ul><p>S是在区间<code>[i,j]</code>中的最长回文子串，对于最长子序列S去头去尾后<code>S[1..len-2]</code>仍然是一个回文串，并且是在区间<code>[i+1,j-1]</code>中的最长回文子序列（应该说是在在长度为j-i+1 - 2时的最长回文子序列），并且可以得出<code>S[i,j] = S[i+1,j-1] + 2</code></p><p>【转移方程】头尾不想等，去头、去尾各一种情况；头尾相等，同时去头去尾</p><ul><li><code>dp[i][j] = max{dp[i+1][j],dp[i][j-1],dp[i+1][j-1]+2 &amp;&amp; chs[i] == chs[j]}</code></li></ul><p>【初始条件】</p><ul><li><code>dp[0][0] = dp[1][1] = ...=dp[n-1][n-1] = 1</code>，每个字母都是长度为1的回文串</li><li>不能按照i去算，要按照长度len去算</li></ul><p>【答案】<code>dp[0][n-1]</code> 两个端点,画出图来就是右上三角</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//region length : 2 &lt;= len &lt;= n</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//startIndex i &lt;= n - len</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>要求打印路径</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//要求打印出路径</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">LPS</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//路径数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//去头记为0</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//去尾记为1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//相等记为2</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//最长的长度为dp[0][n - 1]</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开始与结束两个指针</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> q <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//chs数组的两个指针</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从两头分别往中间去走</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果字符串长度为1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果字符串长度为2</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//其他情况,如果来自去头的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果来自去尾的情况</span>                    <span class="token operator">--</span>j<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    res<span class="token punctuation">[</span>q<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> chs<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用记忆化搜索优化，记忆化搜索使用递归，自上而下，递推是自下而上。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果算过了就直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//first recursion</span>        <span class="token function">compute</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">compute</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">compute</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//then dp</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化所有格子标记为没有被访问过</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//通过递归的方式来填充f数组</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、LintCode-200-Longest-Palindromic-Substring"><a href="#2、LintCode-200-Longest-Palindromic-Substring" class="headerlink" title="2、LintCode 200 Longest Palindromic Substring"></a>2、<a href="https://www.lintcode.com/problem/longest-palindromic-substring/description" target="_blank" rel="noopener">LintCode 200 Longest Palindromic Substring</a></h3><p>【问题】给出一个字符串（假设长度最长为1000），求出它的最长回文子串，你可以假定只有一个满足条件的最长回文串。</p><p>【分析】一种方法是中心扩展法，另一种以区间型dp来做，假设最长回文字串是<code>s(i,j)</code>,那么它的去头去尾的子串<code>s&#39;(i+1..j-1)</code>也是在这个区间内的最长回文子串。假设最长回文子串的长度为<code>len</code>，len的范围是<code>0 &lt;= len &lt;= n</code>，枚举len，只需要记录最长的长度以及起点，就能得到子串。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">longestPalindrome2</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> longest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//要单独处理下相邻的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chs<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                longest <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                start <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//长度从3开始</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> len <span class="token operator">></span> longest<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    longest <span class="token operator">=</span> len<span class="token punctuation">;</span>                    start <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> longest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、LintCode-396-Coins-In-A-Line-III——博弈-区间"><a href="#3、LintCode-396-Coins-In-A-Line-III——博弈-区间" class="headerlink" title="3、LintCode 396 Coins In A Line III——博弈+区间"></a>3、<a href="https://www.lintcode.com/problem/coins-in-a-line-iii/" target="_blank" rel="noopener">LintCode 396 Coins In A Line III</a>——博弈+区间</h3><p>【问题】给定一个序列a[0], a[1], …, a[N-1]，两个玩家Alice和Bob轮流取数，每个人每次只能取第一个数或最后一个数，双方都用最优策略，使得自己的数字和尽量比对手大，问先手是否必胜。（如果数字和一样，也算是先手胜）</p><p>【分析】不需要存己方数字和与对方数字和，只需记录差。两个人都记录着自己与对方的数字之差：S<del>A</del> = A - B，S<del>B</del> = B - A。A取走一个数字m后，B就变为先手，他想要最大化S<del>B</del> = B-A，对于A来说，此时S<del>A</del> = -S<del>B</del>+m，m就是当前这步的数字，m可能是头也可能是尾，选择能最大化S<del>A</del>的即可。取走之后对手也同样采取最优策略去拿。</p><p>【转移方程】</p><ul><li><p>状态：A先手取头，a[0],B此时最大数字差为S<del>B</del>，此时最大数字差为-S<del>B</del>+a[0]</p></li><li><p>状态：A先手取尾，a[n-1],B此时最大数字差为S<del>B</del>，此时最大数字差为-S<del>B</del>+a[n-1]</p></li><li><p>方程：<code>dp[i][j] = max{a[i] - dp[i+1][j],a[j] - dp[i][j-1]}</code></p></li></ul><p>【答案】<code>dp[0][n-1] &gt;= 0</code>则先生胜  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">firstWillWin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//枚举长度</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、LintCode-430-Scramble-String"><a href="#4、LintCode-430-Scramble-String" class="headerlink" title="4、LintCode 430 Scramble String"></a>4、<a href="https://www.lintcode.com/problem/scramble-string/description" target="_blank" rel="noopener">LintCode 430 Scramble String</a></h3><p>【问题】攀爬字符串。给定一个字符串S，按照树结构每次二分成左右两个部分，直至单个字符，在树上某些节点交换左右儿子，可以形成新的字符串，判断一个字符串T是否由S经过这样的变换而成。</p><p>下面是 <code>s1 = &quot;great&quot;</code> 可能得到的一棵二叉树:</p><pre class=" language-txt"><code class="language-txt">      great     /    \    gr    eat   / \    /  \  g   r  e   at             / \            a   t</code></pre><p>在攀爬字符串的过程中, 我们可以选择其中任意一个非叶节点, 交换该节点的两个子节点.</p><p>例如，我们选择了 <code>&quot;gr&quot;</code> 节点,，并将该节点的两个子节点进行交换，并且将祖先节点对应的子串部分也交换,，最终得到了 <code>&quot;rgeat&quot;</code>。 我们认为 <code>&quot;rgeat&quot;</code> 是 <code>&quot;great&quot;</code> 的一个攀爬字符串。</p><pre class=" language-txt"><code class="language-txt">      rgeat     /    \    rg    eat   / \    /  \  r   g  e   at             / \            a   t</code></pre><p>类似地, 如果我们继续将其节点 <code>&quot;eat&quot;</code> 和 <code>&quot;at&quot;</code> 的子节点交换， 又可以得到 <code>&quot;great&quot;</code> 的一个攀爬字符串 <code>&quot;rgtae&quot;</code>。</p><pre class=" language-txt"><code class="language-txt">     rgtae     /    \    rg    tae   / \    /  \  r   g  ta   e         / \        t   a</code></pre><p>给定两个相同长度的字符串 <code>s1</code> 和 <code>s2</code>，判断 <code>s2</code> 是否为 <code>s1</code> 的攀爬字符串。</p><p>【分析】给定两个字符串T和S，假设T是由S变换而来</p><ul><li>如果T和S长度不一样，必定不能变来</li><li>如果长度一样，顶层字符串S能够划分为S1和S2，同样字符串T也能够划分为T1和T2<ul><li>情况一：没交换，<code>S1 ==&gt; T1，S2 ==&gt; T2</code></li><li>情况二：交换了，<code>S1 ==&gt; T2，S2 ==&gt; T1</code></li></ul></li><li>子问题就是分别讨论两种情况，T1是否由S1变来，T2是否由S2变来，或 T1是否由S2变来，T2是否由S1变来。</li></ul><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304170802189.png" alt=""></p><p>【状态】<code>dp[i][j][k][h]</code>表示T[k..h]是否由S[i..j]变来。由于变换必须长度是一样的，因此这边有个关系<code>j - i = h - k</code>，可以把四维数组降成三维。<code>dp[i][j][len]</code> 表示从字符串S中i开始长度为len的字符串是否能变换为从字符串T中j开始长度为len的字符串</p><blockquote><p>dp[i] [j] [k] = OR<del>1&lt;=w&lt;=k-1</del>{dp[i] [j] [w] AND dp[i+w] [j+w] [k-w]}  或 OR<del>1&lt;=w&lt;=k-1</del>{dp[i] [j+k-w] [w] AND dp[i+w] [j] [k-w]}</p><p>枚举S1长度w（1～k-1，因为要划分），f[i] [j] [w]表示S1能变成T1，f[i+w] [j+w] [k-w]表示S2能变成T2，或者是S1能变成T2，S2能变成T1。</p></blockquote><p>【初始条件】对于长度是1的子串，只有相等才能变过去，相等为true，不相等为false。</p><p>【答案】<code>dp[0][0][n]</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isScramble</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化单个字符的情况</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> chs1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chs2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//枚举长度2～n</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//枚举S中的起点位置</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//枚举T中的起点位置</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//枚举划分位置</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//第一种情况：S1->T1,S2->T2</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>len <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//第二种情况：S1->T2,S2->T1</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> len <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>len <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>`</code></pre><h3 id="5、LintCode-168-Burst-Balloons"><a href="#5、LintCode-168-Burst-Balloons" class="headerlink" title="5、LintCode 168 Burst Balloons"></a>5、<a href="https://www.lintcode.com/problem/burst-balloons/description" target="_blank" rel="noopener">LintCode 168 Burst Balloons</a></h3><p>【问题】有n个气球，编号为<code>0</code>到<code>n-1</code>，每个气球都有一个分数，存在<code>nums</code>数组中。每次吹气球i可以得到的分数为 <code>nums[left] * nums[i] * nums[right]</code>，left和right分别表示<code>i</code>气球相邻的两个气球。当i气球被吹爆后，其左右两气球即为相邻。要求吹爆所有气球，得到最多的分数。（最后一个气球被扎破即它本身，算作<code>1 * nums[i] * 1</code>）</p><p>【分析】区间型dp，从最后一步出发，最后一步必定扎破一个气球，编号为i，这一步获得金币<code>1*  nums[i] * 1</code>，此时i前面的气球<code>1～i-1</code>以及i后面的气球<code>i+1～n</code>都被扎破了，需要知道两边最多能获得多少个金币，再加上最后一步，就是结果。</p><p>【状态转移方程】由于最后一步是<code>1 * nums[i] * 1</code>，我们可以认为两端有两个不能扎破的气球，值为1，dp[i] [j]代表扎破i+1号气球～j-1号气球能获得的金币数，i和j是不能被扎破的，因为是两端，并且当前气球k不能被扎破，要分别考虑k的左侧（i～k-1）和右侧（k+1～j），状态转移方程为：</p><ul><li><code>dp[i][j] = max{dp[i][k] + dp[k][j] + a[i] * a[k] * a[j]},k∈(i,j)</code></li><li>dp[i] [k]代表扎破i+1～k-1号气球，dp[k] [j]代表扎破k+1～j-1号气球，再加上扎破这个气球获得的金币数</li></ul><p>【初始条件】没有气球要扎破就获得0个金币</p><ul><li><code>dp[0][1] = dp[1][2] = ... = dp[n-2][n-1] = 0</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxCoins</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//左右两个不能扎破的</span>        A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化没有气球要扎破的情况</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//从长度为3开始</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//开头</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//结尾</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//枚举中间的气球 作为不扎破的气球</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="/2019/12/04/%E5%BA%8F%E5%88%97%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/12/04/%E5%BA%8F%E5%88%97%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>序列型dp就是序列+状态，直接看几个例子。</p><h3 id="1、LintCode-515-Paint-House"><a href="#1、LintCode-515-Paint-House" class="headerlink" title="1、LintCode 515 Paint House"></a>1、<a href="https://www.lintcode.com/problem/paint-house/description" target="_blank" rel="noopener"><strong>LintCode 515 Paint House</strong></a></h3><p>【问题】这里有<code>n</code>个房子在一列直线上，现在我们需要给房屋染色，分别有红色蓝色和绿色。每个房屋染不同的颜色费用也不同，你需要设计一种染色方案使得<strong>相邻的房屋颜色不同</strong>，并且费用最小，返回最小的费用。费用通过一个<code>nx3</code> 的矩阵给出，比如<code>cost[0][0]</code>表示房屋<code>0</code>染红色的费用，<code>cost[1][2]</code>表示房屋<code>1</code>染绿色的费用。</p><p>【分析】典型的序列型动态规划，序列型动态规划 = 序列+状态。确定状态，一共三种</p><ul><li>如果最优策略中，最后一栋是红色，那么倒数第二栋只能是蓝色或绿色</li><li>如果最优策略中，最后一栋是蓝色，那么倒数第二栋只能是红色或绿色</li><li>如果最优策略中，最后一栋是绿色，那么倒数第二栋只能是蓝色或红色</li></ul><p>那么需要分别记录倒数第二栋房子是红色、蓝色、绿色的最小花费即可，只要最后一栋和倒数第二栋颜色不一样。</p><p>初始条件：序列型dp需要开<code>n+1</code>行，每列表示一种状态，<code>dp[0][0] = dp[0][1] = dp[0][2] = 0</code>，第0栋房子花费是0。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minCost</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> costs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>costs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> costs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列型动态规划，一共三种颜色，一共要rows栋房子，另外加一个第0栋存放初始值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>rows <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化第0栋</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//i是第i栋房子</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第i栋房子要染成3种颜色种的哪一种</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//前i-1栋房子的颜色</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> costs<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、LintCode-516-Paint-House-II"><a href="#2、LintCode-516-Paint-House-II" class="headerlink" title="2、LintCode 516 Paint House II"></a>2、<a href="http://www.lintcode.com/problem/paint-house-ii/" target="_blank" rel="noopener">LintCode 516 Paint House II</a></h3><p>【问题】这里有<code>n</code>个房子在一列直线上，现在我们需要给房屋染色，共有<code>k</code>种颜色。每个房屋染不同的颜色费用也不同，你需要设计一种染色方案使得相邻的房屋颜色不同，并且费用最小。费用通过一个<code>nxk</code> 的矩阵给出，比如<code>cost[0][0]</code>表示房屋<code>0</code>染颜色<code>0</code>的费用，<code>cost[1][2]</code>表示房屋<code>1</code>染颜色<code>2</code>的费用。</p><p>【分析】原来是三种颜色，现在变成k种颜色</p><p>第一种写法，直接把刚才的3改成现在的k，时间复杂度O(NK^2^)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minCostII</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> costs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>costs <span class="token operator">==</span> null <span class="token operator">||</span> costs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> costs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> costs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> costs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//序列型</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//第0栋耗费为0</span>        <span class="token comment" spellcheck="true">//从第一栋房子开始</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第一栋房子的三种颜色</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//前一栋房子</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> costs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>优化：上面的思路每次需要求<code>f[i-1][1], ..., f[i-1][K]</code>中除了一个元素之外，其他元素的最小值。这里解决思路是保存最小值和次小值，首先把<code>f[i-1][1], ..., f[i-1][K]</code>中的最小值和次小值先记录下来。</p><ul><li>如果除掉的元素不是最小值，那剩下的最小值就是最小值它本身</li><li>如果除掉的元素是最小值，那剩下的元素中，最小值就是次小值</li></ul><p>假设i-1栋房子，最小值是<code>f[i-1][a]</code>，次小值是<code>f[i-1][b]</code>，如果第i栋染颜色a，那么最小花费就是加上次小值，否则就是加上最小值。</p><p>时间复杂度O(NK)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minCostII</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> costs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>costs <span class="token operator">==</span> null <span class="token operator">||</span> costs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> costs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> costs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//房屋数</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> costs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//颜色个数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化第一行，第0栋</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> min1<span class="token punctuation">,</span> min2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//min1存放最小值，min2存放次小值</span>        <span class="token keyword">int</span> id1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//id1存放最小值的颜色下标，id2存放次小值的颜色下标</span>        <span class="token keyword">int</span> id2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min1 <span class="token operator">=</span> min2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第i-1栋房子的最小花费和次小花费</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果当前值比最小值还小，就把最小值先传递给次小值，再更新最小值,其次还要更新id</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min2 <span class="token operator">=</span> min1<span class="token punctuation">;</span>                    id2 <span class="token operator">=</span> id1<span class="token punctuation">;</span>                    min1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    id1 <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果当前值比次小值小，但比最小值大，只需要更新次小值</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        min2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        id2 <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果和i-1栋颜色不一样,那就直接加最小值，否则加次小值</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> id1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> min1 <span class="token operator">+</span> costs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> min2 <span class="token operator">+</span> costs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">=</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、LintCode-392-House-Robber"><a href="#3、LintCode-392-House-Robber" class="headerlink" title="3、LintCode 392 House Robber"></a>3、<a href="http://www.lintcode.com/problem/house-robber/" target="_blank" rel="noopener">LintCode 392 House Robber</a></h3><p>【问题】假设你是一个专业的窃贼，准备沿着一条街打劫房屋。每个房子都存放着特定金额的钱。你面临的唯一约束条件是：相邻的房子装着相互联系的防盗系统，且 <strong>当相邻的两个房子同一天被打劫时，该系统会自动报警</strong>。给定一个非负整数列表，表示每个房子中存放的钱， 算一算，如果今晚去打劫，<strong>在不触动报警装置的情况下</strong>, 你最多可以得到多少钱 。</p><p>简而言之，不能偷相邻两家，求最多能偷多少金币。</p><p>【分析】从最后一步出发，最后一栋房子i是偷还是不偷</p><ul><li>偷i，结果 = 第i栋的金币数 + 前i-2（包括i-2）栋偷得的总额</li><li>不偷i，结果 = 前 i-1（包括i-1） 栋房子的最优策略</li></ul><p><strong>两个状态，用0表示不偷，用1表示偷</strong></p><ul><li>第i栋不偷，i-1可偷可不偷，<code>dp[i][0] = max{dp[i-1][0], dp[i-1][1]}</code></li><li>第i栋选择偷，i-1不能偷，<code>dp[i][1] = dp[i-1][0] + A[i-1]</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一般写法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">houseRobber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化第0栋房屋</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不偷</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//偷</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>简化：偷i栋房子时，i-1肯定不能偷，直接去问前i-2栋一功能偷多少，不偷i栋时，问前i-1栋能偷多少</p><ul><li><code>dp[i] = max{dp[i-1], dp[i-2] + A[i-1]}</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">houseRobber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//前0栋房子，0</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用滚动数组优化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">houseRobber2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> old <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//dp[0]</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//dp[1]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> t <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>old <span class="token operator">+</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>            old <span class="token operator">=</span> now<span class="token punctuation">;</span>            now <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、LintCode-534-House-Robber-II"><a href="#4、LintCode-534-House-Robber-II" class="headerlink" title="4、LintCode 534 House Robber II"></a>4、<a href="http://www.lintcode.com/problem/house-robber-ii/" target="_blank" rel="noopener">LintCode 534 House Robber II</a></h3><p>【问题】上一题是一排房子，现在是一圈房子，然后不能偷任何挨着的两家，求最多能偷多少金币。</p><p>【分析】现在第一栋房子和最后一栋房子成了邻居，首尾不能同时偷，就有两种情况：①偷第一栋，最后一栋不能偷，②偷最后一栋，第一栋不能偷。所以只要分别计算去头和去尾两种情况，取一个最大值即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">houseRobber2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//去尾的情况</span>        <span class="token punctuation">}</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//去头的情况</span>        <span class="token punctuation">}</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> old <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//dp[0]</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//dp[1]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//now = dp[i-1],old = dp[i-2]</span>            <span class="token keyword">long</span> t <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>old <span class="token operator">+</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>            old <span class="token operator">=</span> now<span class="token punctuation">;</span>            now <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5、LintCode-149-买卖股票的最佳时机I"><a href="#5、LintCode-149-买卖股票的最佳时机I" class="headerlink" title="5、LintCode 149 买卖股票的最佳时机I"></a>5、<a href="http://www.lintcode.com/en/problem/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">LintCode 149 买卖股票的最佳时机I</a></h3><p>【问题】假设有一个数组，它的第i个元素是一支给定的股票在第i天的价格。如果你最多只允许完成一次交易(例如,一次买卖股票),设计一个算法来找出最大利润。</p><p>【分析】维护到当前位置i的最小值，<code>利润 = 当天卖出价格 - 最小值价格</code>，更新res数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minVal <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minVal <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minVal<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="6、LintCode-149-买卖股票的最佳时机II"><a href="#6、LintCode-149-买卖股票的最佳时机II" class="headerlink" title="6、LintCode 149 买卖股票的最佳时机II"></a>6、<a href="http://www.lintcode.com/en/problem/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">LintCode 149 买卖股票的最佳时机II</a></h3><p>【问题】给定一个数组 <code>prices</code> 表示一支股票每天的价格.你可以完成任意次数的交易, 不过你不能同时参与多个交易 (也就是说, 如果你已经持有这支股票, 在再次购买之前, 你必须先卖掉它).设计一个算法求出最大的利润。</p><p>简而言之：I中只能买卖一次，<strong>现在可以买卖任意多次</strong>，任何时刻最多持有一股，求获得的最大利润。</p><p>【分析】贪心，只要今天价格比昨天价格高，就卖掉，这里贪心就是最优的，因为抓住了每一个上升段<br><img src="https://img-blog.csdnimg.cn/20191208000849515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQyNDY2OA==,size_16,color_FFFFFF,t_70" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//只要比昨天价格高，就卖掉</span>                res <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="7、LintCode-151-买卖股票的最佳时机III——序列型"><a href="#7、LintCode-151-买卖股票的最佳时机III——序列型" class="headerlink" title="7、LintCode 151 买卖股票的最佳时机III——序列型"></a>7、<a href="http://www.lintcode.com/problem/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">LintCode 151 买卖股票的最佳时机III</a>——序列型</h3><p>【问题】假设你有一个数组，它的第i个元素是一支给定的股票在第i天的价格。设计一个算法来找到最大的利润。<strong>你最多可以完成两笔交易</strong>。你不可以同时参与多笔交易(你必须在再次购买前出售掉之前的股票)</p><p><strong>限定交易次数为2次，不能手里同时有两支股票，可以同一天卖完后买入</strong></p><p>【分析】需要记录已经买卖多少次。最后一步就是最后一次卖掉，发生在第j天，需要枚举最后一次买是在第几天，但不知道之前有没有买卖过，所以<strong>需要记录状态</strong>，一共五种状态如下所示<br><img src="https://img-blog.csdnimg.cn/20191208000901298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQyNDY2OA==,size_16,color_FFFFFF,t_70" alt=""></p><ul><li>阶段1、3、5手里虽然没股票，但是境界不一样，分别是买卖过0次、1次、2次</li><li>阶段2、4是持有股票阶段，可以选择持有股票或卖出</li><li>最优策略必定处于阶段1、3、5，不可能处于2、4，买了不卖，那就亏了。所以需要求在阶段1、阶段3、阶段5时三种清仓状态下的最大获利分别是多少。</li></ul><p>【状态转移方程】</p><ul><li><code>dp[i][j]</code>表示前i天（第i-1）天结束后，在阶段j的最大获利</li><li>阶段1、3、5，无股票状态，两种可能：昨天无股票并保持无股票状态 或 昨天有股票今天卖出<ul><li><code>dp[i][j] = max{dp[i-1][j],dp[i-1][j-1] + prices[i-1] - prices[i-2]}</code></li></ul></li><li>阶段2、4，手里持有股票，两种可能：昨天有股票并保持有股票状态（获利和亏损都有可能，要加上） 或 昨天没股票今天买入<ul><li><code>dp[i][j] = max{dp[i-1][j] + prices[i-1] - prices[i-2],dp[i-1][j-1]}</code></li></ul></li></ul><p>【初始化与边界】</p><ul><li><code>dp[0][1] = 0;dp[0][2] = ... = dp[0][5] = Integer.MIN_VAULE</code></li><li>注意几个边界</li><li>最多买卖两次，必定在清仓状态下获利最多</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历n天的价格</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//阶段1、3、5，手里不持有股票</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//肯定是第一个阶段以后的，所以j>1,且上一个阶段dp[i - 1][j - 1]不能为无穷小</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//继续不持有，或者昨天持有，今天卖掉变为不持有</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//阶段2、4，手里持有股票</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//从上一个不持有的阶段变为持有</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//不用判断j，从阶段2开始，且昨天持有时dp[i - 1][j]不能为无穷小</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//继续持有，继续获利，或是今天才买入</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="8、LintCode-393-买卖股票的最佳时机IV"><a href="#8、LintCode-393-买卖股票的最佳时机IV" class="headerlink" title="8、LintCode 393 买卖股票的最佳时机IV"></a>8、<a href="https://www.lintcode.com/problem/best-time-to-buy-and-sell-stock-iv/description" target="_blank" rel="noopener">LintCode 393 买卖股票的最佳时机IV</a></h3><p>【问题】在买卖股票的最佳时机III的中，买卖次数为2次，在这里变为K次买卖。</p><p>【分析】原来2次买卖股票，分为5个阶段，现在K次买卖，就分成了2K+1次</p><ul><li>阶段<code>1、3、5...2K+1</code>都是没有持有股票的阶段</li><li>阶段<code>2、4、6...2K</code>都是持有股票的阶段</li></ul><p>这样就能直接套买卖股票III中的模版了，但是解题时发现超时，因为当<code>K &gt; N/2</code>时，直接退化为任意次买卖股票了，需要特殊考虑，解题代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> K<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>K <span class="token operator">></span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> K <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始化</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> K <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//阶段1、3、5...2K+1，不持有股票</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> K <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//初始是继续保持不持有的状态</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//保持不持有的状态或是昨天有股票，今天卖出</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//阶段2、4、6...2K，持有股票的阶段</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> K<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//初始是从不持有的阶段过来</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//继续保持持有阶段并获利，或是昨天没有，今天买入</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> K <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="9、LintCode-76-最长上升子序列"><a href="#9、LintCode-76-最长上升子序列" class="headerlink" title="9、LintCode 76 最长上升子序列"></a>9、<a href="http://www.lintcode.com/problem/longest-increasing-subsequence/" target="_blank" rel="noopener">LintCode 76 最长上升子序列</a></h3><p>【问题】给定一个整数序列，找到最长上升子序列（LIS），返回LIS的长度。<strong>这里可以不连续，因为是子序列，不是子串。</strong></p><p>【分析】假设最长上升子序列是以a[j]结尾的，那么子序列中倒数第二个元素必定比a[j]小</p><ul><li>很容易得出<code>f[j] = max{1, f[i] + 1 | i &lt; j &amp;&amp; a[i] &lt; a[j]}</code>，答案是其中的最大值</li></ul><p>写出如下代码，这里我试着打印子序列的路径，时间复杂度为O(N^2^)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">longestIncreasingSubsequence</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录路径</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始路径为-1</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果第i个个来自j处，那就更新</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//记下来是在哪结束的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            end <span class="token operator">=</span> path<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> temp<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>优化：时间复杂度为O(nlogn)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 优化成O(N logN),看到这个就只有二分法了     * 优化:一旦前面有两个dp值一样了，比如dp[i] = dp[j],并缺nums[i] > nums[j] ，那就只要考虑第j个就可以了     * 也就是 同样的dp值，存一个坐标，这个坐标对应的nums[index]值最小。那么对于每个dp值，保存一下对应的nums[i]的值     * 序列是单调上升的，在单调上升中找最后一个比自己小的数用二分法     * 我们开个数组，数组的下表为dp值，对应存的是该dp值下最小的nums[idx]     */</span>    <span class="token comment" spellcheck="true">//1、使用 binarySearch()</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">longestIncreasingSubsequence</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在a数组的这个区间内找有没有nums[i]，如果key在数组中，则返回搜索值的索引；否则返回-1或“-”（插入点）。插入点是索引键将要插入数组的那一点</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果如果这个数比之前的数大，就找不到插入位置，它就会在新位置插入，如果这个数比之前的数小，就会直接覆盖之前的数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> <span class="token operator">-</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//把这个数放在插入点上</span>            a<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用TreeSet     * TreeSet基本操作全是log(n)复杂度（欢迎纠正），时间复杂度也一致。     * TreeSet.ceiling(x)方法可以直接找出set中大于x的最小数字，如果不存在则返回null。     *     * 1. 如果这个数字存在，则删除这个数字，然后把x插入set中，相当于代替该数字。     * 2. 如果这个数字不存在，说明x大于set中任何数字，直接把x插入set中。     * 最后返回set的大小即可。     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestIncreasingSubsequence</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer ceiling <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">ceiling</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果set中大于num的最小数字存在，删除这个数字，放入num</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ceiling <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ceiling<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="10、LintCode-602-俄罗斯套娃信封"><a href="#10、LintCode-602-俄罗斯套娃信封" class="headerlink" title="10、LintCode 602 俄罗斯套娃信封"></a>10、<a href="https://www.lintcode.com/problem/russian-doll-envelopes/description" target="_blank" rel="noopener">LintCode 602 俄罗斯套娃信封</a></h3><p>【问题】给一定数量的信封，带有整数对 <code>(w, h)</code> 分别代表信封宽度和高度。一个信封的宽高均大于另一个信封时可以放下另一个信封。求最多嵌套多少个信封。</p><p>【分析】这个属于最长序列型dp，dp都是从最后一步出发，先考虑最后一步，也就是最后一个信封E<del>i</del>，然后考虑次外层信封，一定是某个E<del>j</del>，并且E<del>j</del>里面嵌套的信封也是最多的。得出</p><ul><li><code>dp[i] = max{1,dp[j] + 1}</code>（①只能这一个信封，②E<del>j</del>能放进E<del>i</del>中）dp[i]表示以信封E<del>i</del>为最外层信封时，最多嵌套层数。</li></ul><p>由于有宽和高两个维度，我们选择一个维度，比如选择宽度，先按照以宽度升序排序</p><p><strong>下面算法是正常思路，但时间复杂度为O(N^2^)，在Lintcode上通过不了，必须要O(nlogn)，但在Leetcode上能通过。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxEnvelopes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> envelopes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>envelopes <span class="token operator">==</span> null <span class="token operator">||</span> envelopes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//首先对信封按长度进行升序排序，如果长度一样则按照宽度进行升序排序</span><span class="token comment" spellcheck="true">/*        Arrays.sort(envelopes, new Comparator&lt;int[]>() {            @Override            public int compare(int[] o1, int[] o2) {                int res = o1[0] - o2[0];                    if (res == 0) {                    return o1[1] - o2[1];                } else {                    return res;                }            }        });*/</span>          <span class="token comment" spellcheck="true">//直接用lamda表达式</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>envelopes<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> envelopes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//初始化,别忘记</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//i前面所有的信封</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>envelopes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> envelopes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> envelopes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> envelopes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用二分优化，原理和最长上升序列一样</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用二分</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxEnvelopes2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> envelopes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>envelopes <span class="token operator">==</span> null <span class="token operator">||</span> envelopes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> envelopes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> null <span class="token operator">||</span> envelopes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 先按 w 升序排序，再按 h 降序 排序！！</span>        <span class="token comment" spellcheck="true">// 然后只需考虑h即可，因为w已经升序排列好，因为h大的在前，所以相同的w下的不同h，只会选择最大的那个h，来看以这个h结尾的最长上升子序列</span>        <span class="token comment" spellcheck="true">// 当w相同的情况下，h高的在前面，也就是说同样w中是不可能满足increasing subsequence的序列存在，所以任何的increasing subsequence的w一定都是升序的</span>        <span class="token comment" spellcheck="true">// 就可以将问题转换为 h 的 Longest Increasing subSequence</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>envelopes<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>envelopes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">:</span> envelopes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> <span class="token operator">-</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="/2019/12/02/%E8%83%8C%E5%8C%85%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/12/02/%E8%83%8C%E5%8C%85%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划：背包型"><a href="#动态规划：背包型" class="headerlink" title="动态规划：背包型"></a>动态规划：背包型</h2><p>数组开n+1，背包关键就是看最后一步。</p><h3 id="1、01背包–求max"><a href="#1、01背包–求max" class="headerlink" title="1、01背包–求max"></a>1、01背包–求max</h3><p><a href="https://www.lintcode.com/problem/backpack/description" target="_blank" rel="noopener"><strong>LintCode 92: Backpack</strong></a></p><p>【问题】在n个物品中挑选若干物品装入背包，最多能装多满？假设背包的大小为m，每个物品的大小为A[i]</p><p>【分析】从最后一步出发，最后一个物品放还是不放。有两种情况</p><ul><li>前n-1个物品能拼出重量 <code>w</code>，那么n个物品也能拼出重量<code>w</code></li><li>前n-1个物品能拼出重量 <code>w - A[n-1]</code>，再加上最后一个物品 <code>A[n-1]</code> 拼出<code>w</code></li></ul><p>【状态转移】</p><ul><li><code>dp[i][w]</code>表示能否用前i个物品拼出重点w，可以用int数组，也可以用boolean数组，</li><li><code>dp[i][j] = max{dp[i-1][j], dp[i-1][j - A[n-1]] + A[i-1]}</code>（int数组）放还是不放</li><li><code>dp[i][j] = dp[i-1][w] or dp[i-1][j - A[i-1]]</code>（boolean数组）</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//int型写法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">backPack2</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不放</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//放</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//boolean型写法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">backPack</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//物品个数</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//首先初始化dp[i][0]</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不放</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//放</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// |=,只要有一个为true就是true</span>                    <span class="token comment" spellcheck="true">// 放入A[i-1]的情况就是看j-A[i-1]这个容量下是不是为true，如果为true，那么就是dp[i][j]为true，否则就是看dp[i-1][j]是否为true</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>优化成一维</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">backPack</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//从后往前更新</span>          <span class="token comment" spellcheck="true">//下面的f[j - A[i]]，j - A[i]严格小于j，j是从小到大枚举的</span>          <span class="token comment" spellcheck="true">//也就是在第i层已经算过了，等价于f[i][j-A[i]]</span>          <span class="token comment" spellcheck="true">//那么我们从大到小更新，算f[j],f[j - A[i]]其实是还没有被更新过，它存的是第i-1层的，这就对了</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//不放和放，不放就是它自身</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、01背包–求数量"><a href="#2、01背包–求数量" class="headerlink" title="2、01背包–求数量"></a>2、01背包–求数量</h3><p><a href="http://www.lintcode.com/problem/backpack-v/" target="_blank" rel="noopener">LintCode 563: Backpack V</a></p><p>【问题】给出 n 个物品, 以及一个数组, <code>nums[i]</code> 代表第i个物品的大小, 保证大小均为正数, 正整数 <code>target</code> 表示背包的大小, 找到能填满背包的方案数。<strong>注意：每一个物品只能使用一次。</strong></p><p>【分析】需要求出有多少种组合能组合成target，对于最后一个物品，有放和不放两种选择。</p><ul><li>第一种：使用前n-1个物品拼出target</li><li>第二种：前n-1个物品能拼出<code>target - nums[i]</code>，再加上nums[i]，拼出target</li><li>拼出target的方式 = 不放+放,即<code>dp[i][j] = dp[i-1][j] + dp[i-1][j - nums[i-1]]</code></li><li>如果知道有多少种方式拼出0、1、2…对于有多少种方式拼出target也就知道答案了。</li></ul><p>常规写法，时间复杂度O(n*Target)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">backPackV1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//dp[i][j]表示前i个数字有多少种方式拼出数字j</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//0个物品有一种方式拼出重量0</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拼出几</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不放</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//放</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>第一步优化：利用滚动数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">backPackV3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            old <span class="token operator">=</span> now<span class="token punctuation">;</span><span class="token punctuation">;</span>            now <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> now<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不放</span>                dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>old<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//放</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>old<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>第二步优化：优化成一行。原本是 老值 + 老值 = 新值，如果正着更新，可能会出现 老值 + 新值，所以需要倒着更新</p><p><code>dp[i][j] = dp[i-1][j] + dp[i-1][j - nums[i-1]]</code>，新值 = 两个老值加起来</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">backPackV2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//和总称重有关</span>        <span class="token comment" spellcheck="true">//init：相当于dp[0][0] = 1</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//init：dp[0][1] = dp[0][2] = ... = 0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//reverse</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> target<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//old + old ==> new old1 = dp[j],old2 = dp[j - nums[i - 1]],new就是直接覆盖</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、LintCode-564-Backpack-VI"><a href="#3、LintCode-564-Backpack-VI" class="headerlink" title="3、LintCode 564: Backpack VI"></a>3、<a href="https://www.lintcode.com/problem/combination-sum-iv/description" target="_blank" rel="noopener">LintCode 564: Backpack VI</a></h3><p>【问题】给出一个都是正整数的数组 <code>nums</code>，其中没有重复的数。从中找出所有的和为 <code>target</code> 的组合个数。<strong>注意一个数可以在组合中出现多次，数的顺序不同则会被认为是不同的组合。</strong></p><p>【分析】这个题和Backpack V的区别是每个物品可以使用多次，且组合中数字可以按照不同顺序，比如1+1+2与1+2+1算是两种情况，这就导致不能按照物品顺序来处理。依旧是关注最后一步，最后一步物品重量是K，那么前面物品构成重量target-K，需要关注最后一个加进来的是谁。</p><ul><li>如果最后一个物品重量是A<del>0</del>, 则要求有多少种组合能拼成 Target – A<del>0</del></li><li>如果最后一个物品重量是A<del>1</del>, 则要求有多少种组合能拼成 Target – A<del>1</del></li><li>……</li><li>如果最后一个物品重量是A<del>n-1</del>, 则要求有多少种组合能拼成 Target – A<del>n-1</del></li></ul><p>【状态转移方程】dp[i]代表有多少种组合能拼出重量i，则<code>dp[i] = dp[i-A[0]] + dp[i-A[1]] +...+ dp[i-A[n-1]]</code></p><p>【初始条件】<code>dp[0] = 1</code>，有1种组合能拼出0</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">backPackVI</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于能拼出的i</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//初始化能拼出i的情况为0种</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//遍历所有数字</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、LintCode-125-Backpack-II"><a href="#4、LintCode-125-Backpack-II" class="headerlink" title="4、LintCode 125: Backpack II"></a>4、<a href="http://www.lintcode.com/problem/backpack-ii/" target="_blank" rel="noopener">LintCode 125: Backpack II</a></h3><p>【问题】有 <code>n</code> 个物品和一个大小为 <code>m</code> 的背包. 给定数组 <code>A</code> 表示每个物品的大小和数组 <code>V</code> 表示每个物品的价值。问最多能装入背包的总价值是多大？<strong>注意：每个物品只能取一次，物品不能切分。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">backPackII</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不放</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//放</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> V<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5、完全背包"><a href="#5、完全背包" class="headerlink" title="5、完全背包"></a>5、完全背包</h3><p><strong>LintCode 440: Backpack III</strong></p><p>【问题】将Backpack II的物品改为无穷多个，背包最大承重m，求能带走的最大价值。</p><ul><li>输入:4个物品，重量为2, 3, 5, 7，价值为1, 5, 2, 4. 背包最大承重是10</li><li>输出:15</li></ul><p>【分析】A<del>i-1</del>有无穷多个，可以用1个、2个…在这里可以把物品变为种类，这边状态转移方程变为</p><ul><li>f[i] [w] = max<del>k&gt;=0</del>{f[i-1] [w-kA<del>i-1</del>] + kV<del>i-1</del>}，表示用<strong>前i种</strong>物品拼出重量w时的最大总价值，<strong>等于用前i-1种物品拼出重量w-kA<del>i-1</del> 时最大总价值，加上k个第i种物品</strong>，当k = 0和1时，就可以直接用在Backpack II 中了。</li></ul><p>把这个式子展开，如下</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304170107112.png" alt="展开如图"></p><p><strong>可以优化</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304170143810.png" alt="优化"></p><p><strong>什么意思呢</strong></p><blockquote><p>假设A<del>i-1</del> = 2,V<del>i-1</del> = x</p><p>f[i] [5] = max{ f[i-1] [5], f[i-1] [3] + x, f[i-1] [1] + 2x }</p><p>f[i] [7] = max{ f[i-1] [7], f[i-1] [5] + x, f[i-1] [3] + 2x, f[i-1] [1] + 3x }</p></blockquote><p>这样算了重合的部分，不是我们想要的</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 只需要把Backpack II中关键一行改为</span><span class="token comment" spellcheck="true">// dp[i][j] = Math.max(dp[i][j],dp[i][j - A[i-1]] + V[i-1])</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">backPackII</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不放</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//放</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> V<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以优化到一维，这边的细节是：用的不是两个old值，而是old+new，可以只开一个数组，old+new去覆盖本来的old，这就需要时从前往后来，而不是逆序，如图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304170257368.png" alt="压缩成一维"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">backPackIII</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//上面改成j直接从A[i-1]出发更好</span>                  <span class="token comment" spellcheck="true">//old = dp[j],new = dp[j - A[i - 1] + V[i - 1]],加起来覆盖本来的old</span>                  <span class="token comment" spellcheck="true">//old相当于原来的dp[i-1][j],dp[j - A[i - 1]相当于dp[i][j - A[i - 1]</span>                  <span class="token comment" spellcheck="true">//这边就不需要倒着更新，因为和二维的状态转移方程是一致的，我们需要的就是第i层的</span>                  <span class="token comment" spellcheck="true">//这里不动看下01背包那边的注释就懂了</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> V<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>TBD：多重背包（这个优化思想比较巧妙）、分组背包 </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="/2019/12/02/%E5%88%92%E5%88%86%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/12/02/%E5%88%92%E5%88%86%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划：划分型"><a href="#动态规划：划分型" class="headerlink" title="动态规划：划分型"></a>动态规划：划分型</h2><p><strong>划分型动态规划就是给定长度为N的字符串，需要划分成若干段，段数不限，每一段满足一定的性质。在学校oj中做过的书本分发、漆狗屋这种就属于划分型。开数组也是开<code>n+1</code></strong></p><h3 id="1、Lintcode-512-解码方法"><a href="#1、Lintcode-512-解码方法" class="headerlink" title="1、Lintcode 512 解码方法"></a>1、<a href="https://www.lintcode.com/problem/decode-ways/description" target="_blank" rel="noopener">Lintcode 512 解码方法</a></h3><p>【问题】有一个消息包含<code>A-Z</code>通过以下规则编码：’A’ -&gt; 1，’B’ -&gt; 2…’Z’ -&gt; 26，现在给你一个加密过后的消息，问有几种解码的方式。</p><pre><code>输入: &quot;12&quot;输出: 2解释: 它可以被解码为 AB (1 2) 或 L (12).</code></pre><p>【分析】从最后一步出发，最后一个或两个数字对应一个字母。给定字符串长度为N，需要球它的解密方式有多少种，那就需要知道前N-1个数字有多少种解密方式，以及前N-2个数字有多少种解密方式，这就是子问题。</p><p>【状态转移方程】<code>dp[i] = dp[i-1] + dp[i-2]</code> (最后两个字母范围为10~26) </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//空串也算一种</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//一位数必须要在1～9，0是不算的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、Lintcode-513-Perfect-Squares"><a href="#2、Lintcode-513-Perfect-Squares" class="headerlink" title="2、Lintcode 513 Perfect Squares"></a>2、<a href="https://www.lintcode.com/problem/perfect-squares/description" target="_blank" rel="noopener">Lintcode 513 Perfect Squares</a></h3><p>【问题】给一个正整数 n, 请问最少多少个完全平方数(比如1, 4, 9…)的和等于n。</p><p>【分析】重点关注最后一个完全平方数 j^2^，n - j^2^ 也是被分成最少的完全平方数之和，这就是子问题</p><ul><li><code>dp[i]</code>就代表i最少被分成几个完全平方数之和，<code>dp[i] = min{dp[i - j^2]+1}</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//j必须从1开始，如果不从1开始，dp[i],dp[i]+1会越界</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">*</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、Lintcode-108-Palindrome-Partitioning-II"><a href="#3、Lintcode-108-Palindrome-Partitioning-II" class="headerlink" title="3、Lintcode 108 Palindrome Partitioning II"></a>3、<a href="http://www.lintcode.com/problem/palindrome-partitioning-ii/" target="_blank" rel="noopener">Lintcode 108 Palindrome Partitioning II</a></h3><p>【问题】给定字符串 <code>s</code>, 需要将它分割成一些子串， 使得每个子串都是回文串，最少需要分割几次?</p><p>【分析】从最后一步出发，假设最后一段回文串为s[j…n-1]，需要知道s中前j个字符[0…j-1]最少可以划分成多少个回文串，这就是子问题。</p><ul><li><code>dp[i] = min{dp[j]} + 1</code>(0 &lt;= j &lt; i &amp;&amp; s[j…i-1]为回文串的情况下)</li><li>初始条件：空串可以被划分为0个回文串</li></ul><p>下面这么写，超时</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minCut</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果最后一段是回文串</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//问的是切几刀，刀数 = 段数 - 1，比如aab，分两段，切1刀</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>需要把所有的回文串保存在二维数组中，这样不用每次再去判断是否为回文串</p><p>时间复杂度O(N^2^)，空间复杂度O(N^2^)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minCut</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPalindrome <span class="token operator">=</span> <span class="token function">calcPalindrome</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//判断是否为回文串</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//前0个回文串分割0个</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果j到i-1是回文串，就更新</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isPalindrome<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//aab，分成两段回文串只要切一刀，段数 - 1</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//利用二维数组，不用每次去判断是不是回文串</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">calcPalindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//从i到j是否为回文串，所以j是从i开始</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//生成回文串的过程，如果回文串长度是奇数，那就是由中心点向两边生成，如果回文串长度是偶数，那就是由中心线向两边生成</span>        <span class="token comment" spellcheck="true">//奇数的情况，c为中心center,共n个中心点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> c<span class="token punctuation">,</span> j <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//偶数的情况，共n-1条中心线</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> c<span class="token punctuation">,</span> j <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、LintCode-437-Copy-Books"><a href="#4、LintCode-437-Copy-Books" class="headerlink" title="4、LintCode 437 Copy Books"></a>4、<a href="https://www.lintcode.com/problem/copy-books/description" target="_blank" rel="noopener">LintCode 437 Copy Books</a></h3><p>书本分发、漆狗屋这类题，在学校OJ做烂掉了。这个题也能二分法做。</p><p>【问题】给定 n 本书, 第 i 本书的页数为 pages[i]。 现在有 k 个人来复印这些书籍,，而每个人只能复印编号连续的一段的书, 比如一个人可以复印 pages[0], pages[1], pages[2], 但是不可以只复印 pages[0], pages[2], pages[3]而不复印 pages[1]。所有人复印的速度是一样的,，复印一页需要花费一分钟, 并且所有人同时开始复印. 怎样分配这 k 个人的任务, 使得这 n 本书能够被尽快复印完?返回完成复印任务最少需要的分钟数。</p><p>【分析】当有i个抄写员的时候，一共n本书，从最后一步出发，第i个抄写员抄几本书，可能是0～n本，假设第i个抄写员抄写j本，前i-1个抄写员一共抄写n-j本书。前i-1个抄写员抄写完耗时T1，第i个抄写员抄写完耗时T2，i个人抄完n本书，花费的时间是max(T1,T2)，我们要求所有分配情况下，抄完书的最小时间花费。</p><p><img src="https://img-blog.csdnimg.cn/20191208001032100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQyNDY2OA==,size_16,color_FFFFFF,t_70" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xmlSXoMz-1575735008794)(/Users/zhangye/Library/Application Support/typora-user-images/image-20191207200642303.png)\]"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//k个抄写员</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一共几本书</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化：k个抄写员抄写0本书，花费时间都是0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化：0个抄写员抄写0本书，花费时间是0，0个抄写员抄写1本、2本。。。花费时间无穷大</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//一共前i个抄写员</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//前i个抄写员一共抄写j本书</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//前i-1个抄写员抄写l本书，l从j开始，也就是先让最后一个人从0本开始，然后累加，这样就不用额外去计算这个人抄写花费的时间</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> j<span class="token punctuation">;</span> l <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>二分法，二分可能的答案。每次判断什么呢？判断k个人能不能在这个时间（mid）里搞定</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//二分，时间复杂度O(nlogm), n:书本数目, m:总页数。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">copyBooks</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pages<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 假设的做二分查找的区间是 0 ～ max</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//end为所有书都由一个人抄</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pages<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            end <span class="token operator">+=</span> pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//log page，N本书for检查一遍,O(n)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果k个人能在mid时间内搞定，说明我们可以继续 【缩短】 时间，而不是提高时间！！！</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>pages<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//double check start</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>pages<span class="token punctuation">,</span> start<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> start<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> end<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pages<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//所需人数</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//每个人工作了多久</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> page <span class="token operator">:</span> pages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">></span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//一定要判断一下！！！</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">+</span> page <span class="token operator">></span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            count <span class="token operator">+=</span> page<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="/2019/12/02/%E5%8D%9A%E5%BC%88%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/12/02/%E5%8D%9A%E5%BC%88%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划：博弈型"><a href="#动态规划：博弈型" class="headerlink" title="动态规划：博弈型"></a>动态规划：博弈型</h2><p><strong>博弈型dp一般从第一步分析，而不是最后一步，需要开n+1</strong></p><h3 id="1、LintCode-394-Coins-in-a-Line"><a href="#1、LintCode-394-Coins-in-a-Line" class="headerlink" title="1、LintCode 394 Coins in a Line"></a>1、<a href="https://www.lintcode.com/problem/coins-in-a-line/description" target="_blank" rel="noopener"><strong>LintCode 394 Coins in a Line</strong></a></h3><p>【问题】有 n 个硬币排成一条线。两个参赛者轮流从右边依次拿走 1 或 2 个硬币，直到没有硬币为止。拿到最后一枚硬币的人获胜。请判定 先手玩家必胜还是必败?</p><p>【分析】从第一步开始，一开始有n个硬币，A可以拿一个或两个硬币，这样B则对应拿n-1个或n-2个硬币，A肯定会采取策略让自己获胜。然后不断拿。假设一开始有5个硬币，可以画出如果所示的树形结构，必败就是自己无路可逃，必胜就是有赢的可能。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304170526929.png" alt="画出胜败图"></p><p>【状态】设dp[i]表示面对i个硬币，是否先手必胜则有下面几种情况</p><ul><li><code>dp[i] = true，f[i-1]==false || f[i-2]==false</code>（对手拿1个或2个都是必败的情况）</li><li><code>dp[i] = false，f[i-1]==true &amp;&amp; f[i-2]==true</code>（对手拿1个或2个都是必胜的情况）</li></ul><p>【初始情况与边界】</p><ul><li><code>dp[0] = 0</code>，面对0个硬币，必败</li><li><code>dp[1] = dp[2] = true</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">firstWillWin</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// if (dp[i - 1] == true &amp;&amp; dp[i - 2] == true) {</span>            <span class="token comment" spellcheck="true">//     dp[i] = false;</span>            <span class="token comment" spellcheck="true">// } else {</span>            <span class="token comment" spellcheck="true">//     dp[i] = true;</span>            <span class="token comment" spellcheck="true">// }</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="/2019/12/02/%E5%8F%8C%E5%BA%8F%E5%88%97%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/12/02/%E5%8F%8C%E5%BA%8F%E5%88%97%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划：双序列型"><a href="#动态规划：双序列型" class="headerlink" title="动态规划：双序列型"></a>动态规划：双序列型</h2><p><strong>双序列型</strong>，就是有两个子序列/字符串，每个序列本身是一维的，可以转换为二维dp，序列型开数组开n+1，双序列型也是开n+1。</p><p><strong>突破口</strong>：看串A和串B的最后一个字符是否匹配，是否需要串A/串B的最后一个字符，来缩减规模。</p><p><strong>两种类型</strong>：计数型：情况1+情况2+…以及最值型min/max{情况1，情况2…}</p><p><strong>初始条件</strong>：要特别当心空串的处理。</p><h3 id="1、LintCode-77-Longest-Common-Subsequence"><a href="#1、LintCode-77-Longest-Common-Subsequence" class="headerlink" title="1、LintCode 77 Longest Common Subsequence"></a>1、<a href="http://www.lintcode.com/problem/longest-common-subsequence/" target="_blank" rel="noopener">LintCode 77 Longest Common Subsequence</a></h3><p>【问题】最长公共子序列。给出两个字符串，找到最长公共子序列(LCS)，返回LCS的长度。</p><p>【分析】字符串A的长度为<code>n</code>，字符串B的长度为<code>m</code>，要组成最长公共子串一定是一个个对子，不能交叉，要按照顺序来，假设现在得到了最长公共子序列，有这么几种情况：</p><ul><li>字符串A的最后一个字符不在这个LCS中，那最长公共子串就是A中下标为<code>0～n-2</code>与B中下标为<code>0～m-1</code>的字符串的<code>最长公共子序列</code>。</li><li>字符串B的最后一个字符不在这个LCS中，那最长公共字串就是B中下标为<code>0～n-2</code>与A中下标为<code>0～m-1</code>的字符串的<code>最长公共子序列</code></li><li>字符串A中的最后一个字符与B中的一个字符正好是一对，那最长公共字串就是A中下标为<code>0～n-2</code>与B中下标为<code>0～m-2</code>的字符串的<code>最长公共子序列+A[n-1]</code></li></ul><p>【转移方程】dp[i] [j]代表A中前i个字符和B中前j个字符</p><ul><li><code>dp[i][j] = max{dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + 1|A[i-1]=B[j-1]}</code></li></ul><p>时间复杂度O(MN)，空间复杂度O(MN)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>String A<span class="token punctuation">,</span> String B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//双序列型的本质还是序列型</span>        <span class="token comment" spellcheck="true">//初始化第0行和第0列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以用滚动数组优化空间复杂度至O(N)</p><p>Plus：要求打印所有路径</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCS</span><span class="token punctuation">(</span>String A<span class="token punctuation">,</span> String B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果A的最后一个不在其中，或者是B的最后一个不在其中的情况</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果最后一个都在其中</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//+1 ！！！</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获得了dp数组，dfs获取结果</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印结果</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>String temp<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> String A<span class="token punctuation">,</span> String B<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//只有相等时才添加</span>            temp <span class="token operator">+=</span> A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//上边更大</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//左边更大</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、LintCode-29-Interleaving-String"><a href="#2、LintCode-29-Interleaving-String" class="headerlink" title="2、LintCode 29 Interleaving String"></a>2、<a href="http://www.lintcode.com/en/problem/interleaving-string/" target="_blank" rel="noopener"><strong>LintCode 29 Interleaving String</strong></a></h3><p>【问题】交错字符串。给出三个字符串：s1、s2、s3，判断s3是否由s1和s2交叉构成。</p><blockquote><pre class=" language-text"><code class="language-text">输入：s1=“aabcc” s2=“dbbac”, s3=“aadbbcbcac” 输出：True( s3=“aadbbcbcac” )【分析】首先如果s3的长度不等于s1+s2的长度，直接输出false，设s1的长度为n，s2的长度为m，s3的长度为n+m，从最后一步出发，假设s3是由s1和s2交错构成的，那么s3的最后一个字符，要么是s1的最后一个字符，要么是s2的最后一个字符。这就是两种情况：</code></pre></blockquote><ul><li>如果是s1的最后一个字符，那么<code>s3[0...n+m-2]</code>是由<code>s1[0..n-2]与s2[0..m-1]</code>交错形成的</li><li>如果是s2的最后一个字符，那么<code>s3[0...n+m-2]</code>是由<code>s1[0..n-1]与s2[0..m-2]</code>交错形成的</li></ul><p>这两种情况只要一种成立即可。</p><p>【状态】<code>dp[s][i][j]</code>为s3前s个字符是否由A前i个字符<code>A[0..i-1]</code>和B前j个字符<code>B[0..j-1]</code>交错形成，这是最直观的，由于<code>s = i + j</code>，便可以开成两维，设<code>dp[i][j]</code>为s3前i+j个字符是否由A前i个字符 <code>A[0..i-1]</code>和B前j个字符<code>B[0..j-1]</code>交错形成。</p><p>【转移方程】<code>dp[i][j] = (dp[i-1] [j] &amp;&amp; s1[i] == s3[i+j-1]) || (dp[i][j-1] &amp;&amp; s2[j] == s3[]i+j-1)</code></p><p>【初始条件】空串本身可以由s1的空串和s2的空串交错形成，<code>dp[0][0] = true</code></p><p>【边界情况】如果i=0，不考虑情况一,因为没有s1[i-1];如果j=0，不考虑情况二，因为没有s2[j-1]</p><p>【计算顺序】</p><ul><li>f[0] [0], f[0] [1], …, f[0] [m]</li><li>f[1] [0], f[1] [1], …, f[1] [m]</li><li>……</li><li>f[n] [0], f[n] [1], …, f[n] [m]</li></ul><p>时间复杂度O(NM)，空间复杂度O(NM)，可以用滚动数组优化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInterleave</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">,</span> String s3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> n <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要把空串也纳入考虑</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果是s1中最后一个字符</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s3<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果是s2中最后一个字符</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s3<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、LintCode-119-Edit-Distance"><a href="#3、LintCode-119-Edit-Distance" class="headerlink" title="3、LintCode 119 Edit Distance"></a>3、<a href="http://www.lintcode.com/problem/edit-distance/" target="_blank" rel="noopener"><strong>LintCode 119 Edit Distance</strong></a></h3><p>【问题】编辑距离。给出两个单词word1和word2，计算出将word1 转换为word2的最少操作次数。你总共三种操作方法：插入一个字符、删除一个字符、替换一个字符。</p><blockquote><pre class=" language-texzt"><code class="language-texzt">输入: "horse", "ros",输出: 3解释: horse -> rorse (替换 'h' 为 'r')、rorse -> rose (删除 'r')、rose -> ros (删除 'e')</code></pre></blockquote><p>【分析】要变成一模一样，一定要有个顺序的概念，不然会做起来很麻烦，比如从左往右的顺序。A长度为m，B长度为n，编辑过后A长度为n且与B的字符顺序一样。从最后一步出发，最后一步就是让A的最后一个字符变为B的最后一个字符，一共有三种操作，每种操作考虑一番，得到以下四种情况。</p><ul><li>情况一：A最后插入B[n-1]，才能转换为B，剩下要做的就是要先将A[0..m-1]（前面不动）变成B[0..n-2]</li><li>情况二：A最后一个字符替换为B[n-1]，才能转换为B，剩下要做的就是要先将A[0..m-2]变成B[0..n-2]</li><li>情况三：A删去最后一个字符，才能转换为B，剩下要做的就是要先将A[0..m-2]变成B[0..n-2]</li><li>情况四：A和B最后一个字符相等，就是要先将A[0..m-2]变成B[0..n-2]</li></ul><p>【状态】<code>dp[i][j]</code>代表A中前i个字符和B中前j个字符的最小编辑距离</p><p>【转移方程】<code>dp[i][j] = min{dp[i][j-1]+1,dp[i-1][j-1]+1,dp[i-1][j]+1,dp[i-1][j-1] &amp;&amp; A[i-1] = B[j-1]}</code></p><ul><li>增加<code>dp[i][j-1]+1</code></li><li>替换<code>dp[i-1][j-1]+1</code></li><li>删除<code>dp[i-1][j]+1</code></li></ul><p>【初始条件】一个空串和一个长度为L的串的最小编辑距离是L</p><p>【计算顺序】</p><ul><li>f[0] [0], f[0] [1], …, f[0] [m]</li><li>f[1] [0], f[1] [1], …, f[1] [m]</li><li>……</li><li>f[n] [0], f[n] [1], …, f[n] [m]</li></ul><p>时间复杂度O(NM)，空间复杂度O(NM)，可以用滚动数组优化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>String A<span class="token punctuation">,</span> String B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化，空串到任意非空串的编辑距离</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、LintCode-118-Distinct-Subsequences"><a href="#4、LintCode-118-Distinct-Subsequences" class="headerlink" title="4、LintCode 118 Distinct Subsequences"></a>4、<a href="http://www.lintcode.com/problem/distinct-subsequences/" target="_blank" rel="noopener"><strong>LintCode 118 Distinct Subsequences</strong></a></h3><p>【问题】给定字符串 <code>S</code> 和 <code>T</code>，计算 <code>S</code> 的所有子序列中有多少个 <code>T</code>。子序列字符串是原始字符串删除一些(或零个)字符之后得到的字符串，并且要求剩下的字符的相对位置不能改变。(比如 <code>&quot;ACE&quot;</code> 是 <code>ABCDE</code> 的一个子序列, 而 <code>&quot;AEC&quot;</code> 不是)</p><blockquote><pre class=" language-text"><code class="language-text">输入: S = "rabbbit", T = "rabbit"输出: 3解释: 你可以删除 S 中的任意一个 'b', 所以一共有 3 种方式得到 T.输入: S = "abcd", T = ""输出: 1解释: 只有删除 S 中的所有字符这一种方式得到 T</code></pre></blockquote><p>【分析】给定序列A和B，问B在A中出现多少次，可以不连续。相当于A和B的LCS是B，但这的侧重点是B。 从最后一步出发，就是B的最后一个字符，设A的长度为n，B的长度为m，有两种情况：</p><ul><li><code>B[m-1] != A[n-1]</code>，需要考虑A[0..n-2]与B[0..m-1]</li><li><code>B[m-1] = A[n-1]</code>，只需考虑A[0..n-2]与B[0..m-2]</li><li>问次数，就是考虑加法，无重复无遗漏。</li></ul><p>【转移方程】<code>dp[i][j] = dp[i-1][j] + dp[i-1][j-1] &amp;&amp; A[i-1]=B[i-1]</code></p><p>【初始条件】考虑空串</p><ul><li>若A是空串，B不是空串，B在A中出现次数为0，<code>dp[0][j] = 0</code></li><li>若B是空串，B在A中出现次数是1（A可以是空串），就是把A中的字符都删掉<code>dp[i][0] = 1</code></li></ul><p>【计算顺序】</p><ul><li>f[0] [0], f[0] [1], …, f[0] [m]</li><li>f[1] [0], f[1] [1], …, f[1] [m]</li><li>……</li><li>f[n] [0], f[n] [1], …, f[n] [m]</li></ul><p>时间复杂度O(NM)，空间复杂度O(NM)，可以用滚动数组优化成O(N)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDistinct</span><span class="token punctuation">(</span>String A<span class="token punctuation">,</span> String B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化：若A是空串而B不是空串，则出现次数为0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化：若B是空串，则出现次数为1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5、LintCode-154-Regular-Expression-Matching"><a href="#5、LintCode-154-Regular-Expression-Matching" class="headerlink" title="5、LintCode 154 Regular Expression Matching"></a>5、<a href="http://www.lintcode.com/problem/regular-expression-matching/" target="_blank" rel="noopener"><strong>LintCode 154 Regular Expression Matching</strong></a></h3><p>【问题】正则表达式匹配。实现支持<code>.</code>和<code>*</code>的正则表达式匹配。<code>.</code>匹配任意一个字母。<code>*</code>匹配零个或者多个前面的元素。匹配应该覆盖整个输入字符串，而不仅仅是一部分。</p><blockquote><pre class=" language-text"><code class="language-text">需要实现的函数是：bool isMatch(string s, string p)isMatch("aa","a") → falseisMatch("aa","aa") → trueisMatch("aaa","aa") → falseisMatch("aa", "a*") → trueisMatch("aa", ".*") → trueisMatch("ab", ".*") → trueisMatch("aab", "c*a*b") → true</code></pre></blockquote><p>【分析】从最后一步出发，关注最后进来的字符。假设A的长度为n，B的长度为m，关注正则表达式B的最后一个字符是谁，它有三种可能，<code>正常字符</code>、<code>*</code>、<code>.</code></p><ol><li><p>如果B的最后一个字符是<code>正常字符</code>，那就是看<code>A[n-1]</code>是否等于<code>B[m-1]</code>，相等则看<code>A[0..n-2]</code>与<code>B[0..m-2]</code>，不等则是不能匹配，break</p></li><li><p>如果B的最后一个字符是<code>.</code>，它能匹配任意字符，直接看<code>A[0..n-2]</code>与<code>B[0..m-2]</code></p></li><li><p>如果B的最后一个字符是<code>*</code>它代表<code>B[m-2]=c</code>可以重复0次或多次，它们是一个整体<code>c*</code></p><ul><li>情况一：A[n-1]是0个c，B最后两个字符废了，能否匹配取决于A[0..m-1]和B[0..n-3]是否匹配</li><li>情况二：A[n-1]是多个c中的最后一个（这种情况必须<code>A[n-1]=c</code>或者<code>c=&#39;.&#39;</code>），所以A匹配完往前挪一个，B继续匹配，因为可以匹配多个，继续看A[0..n-2]和B[0..m-1]是否匹配。</li></ul></li></ol><p>【转移方程】<code>dp[i] [j]</code>代表A的前i个和B的前j个能否匹配</p><ul><li><p>对于1和2，可以合并成一种情况<code>dp[i][j] = dp[i-1][j-1] (if A[i-1]=B[j-1] || B[j-1]=&#39;.&#39;)</code></p></li><li><p>对于3，分为不看<code>c*</code>和看<code>c*</code>两种情况</p><ul><li>不看：直接砍掉<code>dp[i][j] = dp[i][j-2]</code></li><li>看：<code>dp[i][j] = dp[i-1][j](if A[i-1]=B[j-2] || B[j-2]=&#39;.&#39;)</code></li></ul></li></ul><p>【初始条件】考虑空串空正则</p><ul><li>空串和空正则是匹配的，<code>dp[0][0] = true</code></li><li>非空串和空正则必不匹配，<code>dp[1][0]=...=dp[n][0]=false</code></li><li>空串和非空正则，不能直接定义true和false，必须要计算出来。（在1、2中不能计算，在3中<code>dp[i][j] = dp[i][j-2]</code>可能出现，比如<code>A=&quot;&quot;</code>,<code>B=a*b*c*</code>）</li><li><strong>大体上可以分为空正则和非空正则两种</strong></li></ul><p>【计算顺序】</p><ul><li>f[0] [0], f[0] [1], …, f[0] [m]</li><li>f[1] [0], f[1] [1], …, f[1] [m]</li><li>……</li><li>f[n] [0], f[n] [1], …, f[n] [m]</li></ul><p>时间复杂度O(NM)，空间复杂度O(NM)，可以用滚动数组优化成O(N)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>String A<span class="token punctuation">,</span> String B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//分为空正则与非空正则两种讨论</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//非空正则，大致分为最后一个是不是 *</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//最后一个是 * ，分为不看和看两种情况</span>                        <span class="token comment" spellcheck="true">//不看</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//看</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="6、LintCode-192-Wildcard-Matching"><a href="#6、LintCode-192-Wildcard-Matching" class="headerlink" title="6、LintCode 192 Wildcard Matching"></a>6、<a href="http://www.lintcode.com/problem/wildcard-matching/" target="_blank" rel="noopener"><strong>LintCode 192 Wildcard Matching</strong></a></h3><p>【问题】通配符匹配，上一题是正则表达式匹配。判断两个可能包含通配符<code>？</code>和<code>*</code>的字符串是否匹配。匹配规则如下：<code>?</code>可以匹配任何单个字符，<code>*</code> 可以匹配任意字符串（包括空字符串）。两个串完全匹配才算匹配成功。</p><p>【分析】通配符匹配和正则表达式匹配很像，正则表达式中的<code>.</code>与通配中的<code>?</code>作用是一样的，不同的是<code>*</code>，正则表达式中的<code>*</code>能匹配零个或者多个前面的元素，通配中的<code>*</code>能匹配0个或多个任意字符，实际上通配的情况要比正则表达式中的情况简单得多。仍然从B的最后一个字符出发，有三种可能：<code>正常字符</code>、<code>?</code>、<code>*</code>，讨论如下：（前两条情况和正则表达式一样）</p><ol><li><p>如果B的最后一个字符是<code>正常字符</code>，那就是看A[m-1]是否等于B[n-1]，相等则看A[0..m-2]与B[0..n-2]，不等则是不能匹配，break</p></li><li><p>如果B的最后一个字符是<code>？</code>，它能匹配任意字符，直接看A[0..m-2]与B[0..n-2]</p></li><li><p>如果B的最后一个字符是<code>*</code>，他能匹配0个或多个任意字符，那就分为两种情况</p><ul><li>匹配0个：就是这个<code>*</code>直接废了，需要看<code>A[0..n-1]</code>与<code>B[0..m-2]</code></li><li>匹配多个：则需要看<code>A[0..n-2]</code>与<code>B[0..m-1]</code></li></ul></li></ol><p>【转移方程】<code>dp[i] [j]</code>代表A的前i个和B的前j个能否匹配</p><ul><li>对于1和2，可以合并成一种情况<code>dp[i][j] = dp[i-1][j-1] (if A[i-1]=B[j-1] || B[j-1]=&#39;?&#39;)</code></li><li>对于3，分为不看<code>c*</code>和看<code>c*</code>两种情况<ul><li>匹配0个，就是不看，直接砍掉：<code>dp[i][j] = dp[i][j-1]</code></li><li>匹配多个：<code>dp[i][j] = dp[i-1][j](if B[j-1]=&#39;*&#39;)</code></li></ul></li></ul><p>【初始条件】<strong>大体上依旧是分为空正则和非空正则两种</strong></p><ul><li>空正则和空串匹配</li><li>空正则和非空串必不匹配</li><li>非空正则和空串需要看情况</li></ul><p>【计算顺序】</p><ul><li>f[0] [0], f[0] [1], …, f[0] [m]</li><li>f[1] [0], f[1] [1], …, f[1] [m]</li><li>……</li><li>f[n] [0], f[n] [1], …, f[n] [m]</li></ul><p>时间复杂度O(NM)，空间复杂度O(NM)，可以用滚动数组优化成O(N)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>String A<span class="token punctuation">,</span> String B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//空正则与非空正则两种情况讨论</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//分为最后一个字符是不是 * 的两种情况</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//分为匹配0个和匹配多个两种情况,这里j必定>1</span>                        <span class="token comment" spellcheck="true">//匹配0个</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="7、LintCode-668-Ones-And-Zeroes"><a href="#7、LintCode-668-Ones-And-Zeroes" class="headerlink" title="7、LintCode 668 Ones And Zeroes"></a>7、<a href="http://www.lintcode.com/en/problem/ones-and-zeroes/" target="_blank" rel="noopener"><strong>LintCode 668 Ones And Zeroes</strong></a></h3><p>【问题】假设你分别是 m个 <code>0</code> 和 n个 <code>1</code> 的统治者。 另一方面, 有一个只包含 <code>0</code> 和 <code>1</code> 的字符串构成的数组。现在你的任务是找到可以由 m个 <code>0</code> 和 n个 <code>1</code> 构成的字符串的最大个数。每一个 <code>0</code> 和 <code>1</code> 均只能使用一次</p><blockquote><pre class=" language-text"><code class="language-text">输入：["10", "0001", "111001", "1", "0"] 5 3输出：4解释：这里总共有 4 个字符串可以用 5个 0s 和 3个 1s来构成, 它们是 "10", "0001", "1", "0"。输入：["10", "0001", "111001", "1", "0"] 7 7输出：5解释：所有字符串都可以由7个 0s 和 7个 1s来构成.</code></pre></blockquote><p>【分析】如果没有0，只有1，这就相当于背包问题。这边只是多了个0，用背包思路考虑，看最后一个物品有没有进去，就是分为放和不放两种情况：</p><ul><li>情况一：不放，最后一个字符串（物品）没有进去，一共给定了T个串，那就是去看前T-1个串中，用给的0和1最多能组成多少个01串</li><li>情况二：放，最后一个字符串（物品）进去了，最后一个串中有多少个0和1，那么就在m和n中减去，比如最后一个串中有j个0，k个1，那么剩下0就是m-j，剩下1就是n-k，看这些剩下的在前T-1个串中最多能组成多少个。</li></ul><p>【转移方程】用<code>dp[i][j][k]代表前i个串最多能有多少个被j个0和k个1组成</code></p><ul><li><code>dp[i][j][k] = max{dp[i-1][j][k],dp[i-1][j-a][k-b]}</code>，a代表放的这个01串中0的个数，b代表放的这个01串中1的个数。</li></ul><p>【转移方程】前0个串，最多组成0个</p><ul><li><code>f[0][0~m][0~n] = 0</code></li></ul><p>【答案】<code>dp[T][m][n]</code>，len为字符串的个数</p><p>时间复杂度:O(Tmn)，空间复杂度:O(Tmn)，可以用滚动数组优化至 O(mn)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//不放</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//放</span>                    String s <span class="token operator">=</span> strs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> count0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            count0<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            count1<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> count0 <span class="token operator">&amp;&amp;</span> k <span class="token operator">>=</span> count1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> count0<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> count1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>滚动数组优化，当前的i之和前一个i-1有关联，空间复杂度O(mn)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            old <span class="token operator">=</span> now<span class="token punctuation">;</span>            now <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> now<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//不放</span>                    dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>old<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//放</span>                    String s <span class="token operator">=</span> strs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> count0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>chs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            count0<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            count1<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> count0 <span class="token operator">&amp;&amp;</span> k <span class="token operator">>=</span> count1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>old<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> count0<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> count1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="/2019/12/02/%E5%9D%90%E6%A0%87%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/12/02/%E5%9D%90%E6%A0%87%E5%9E%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划解题模版：：坐标型"><a href="#动态规划解题模版：：坐标型" class="headerlink" title="动态规划解题模版：：坐标型"></a>动态规划解题模版：：坐标型</h2><p>坐标型dp一般都是给定网格、序列，来求满足某种性质的最大值、最小值。开数组时，<code>f[i]</code>代表以a<del>i</del> 结尾的满足条件的子序列，<code>f[i][j]</code>代表以i、j结尾的满足条件的某种情况。</p><p>做题思路：</p><ul><li>从最后一步出发思考，确定状态</li><li>分析子问题是什么</li><li>得到状态转移方程</li><li>确定初始条件与边界条件</li><li>编程</li></ul><h3 id="1、Lintcode-114-UniquePaths"><a href="#1、Lintcode-114-UniquePaths" class="headerlink" title="1、Lintcode 114 UniquePaths"></a>1、<a href="https://www.lintcode.com/problem/unique-paths/" target="_blank" rel="noopener">Lintcode 114 UniquePaths</a></h3><p>【问题】有一个机器人的位于一个 <code>m × n</code>个网格左上角。机器人每一时刻只能向下或者向右移动一步。机器人试图达到网格的右下角。问有多少条不同的路径？</p><p>【分析】最后一步：要么从左边来，要么从上边来，故<code>dp[i][j] = dp[i][j-1] + dp[i-1][j]</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化第一行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化第一列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理其他</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、Lintcode-115-UniquePathsWithObstacles"><a href="#2、Lintcode-115-UniquePathsWithObstacles" class="headerlink" title="2、Lintcode 115 UniquePathsWithObstacles"></a>2、<a href="https://www.lintcode.com/problem/unique-paths-ii/" target="_blank" rel="noopener">Lintcode 115 UniquePathsWithObstacles</a></h3><p>【问题】上一题的跟进问题，现在考虑网格中有障碍物，那样将会有多少条不同的路径？网格中的障碍和空位置分别用 1 和 0 来表示。</p><p>【分析】从最后一步出发，要选一条没有障碍的路径到达右下角，当前位置i,j所有可能路径依然是 <code>dp[i] [j] = dp[i] [j-1] + dp[i-1] [j]</code>，但必须是没有障碍的</p><ul><li>起点和终点若有障碍，直接返回0</li><li>初始化第一行和第一列，也要考虑有障碍的情况</li><li>起点和终点没有障碍，若途中碰到障碍了，令<code>dp[i][j] = 0</code>，表示不可达</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断起点和终点有没有障碍，有障碍直接返回0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化第一行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//初始化第一列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理其他</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、Lintcode-397-Longest-Increasing-Continuous-Subsequence"><a href="#3、Lintcode-397-Longest-Increasing-Continuous-Subsequence" class="headerlink" title="3、Lintcode 397 Longest Increasing Continuous Subsequence"></a>3、<a href="http://www.lintcode.com/en/problem/longest-increasing-continuous-subsequence/" target="_blank" rel="noopener">Lintcode 397 Longest Increasing Continuous Subsequence</a></h3><p>【问题】给定一个整数数组（下标从 0 到 n-1， n 表示整个数组的规模），请找出该数组中的最长上升连续子序列。（最长上升连续子序列可以定义为从右到左或从左到右的序列。）</p><p>【分析】也就是求“最长连续单调子序列”，也就是LIS+LDS。实际上只要求个LIS再倒过来求一遍。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestIncreasingContinuousSubsequence</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">LIS</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//倒过来求一遍</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> A<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">LIS</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">LIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最少长度是1</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//长度至少是1，它本身</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、LintCode-110-Minimum-Path-Sum"><a href="#4、LintCode-110-Minimum-Path-Sum" class="headerlink" title="4、LintCode 110 Minimum Path Sum"></a>4、<a href="http://www.lintcode.com/problem/minimum-path-sum/" target="_blank" rel="noopener">LintCode 110 Minimum Path Sum</a></h3><p>【问题】给定一个只含非负整数的<code>m x n</code>网格，找到一条从左上角到右下角的可以使数字和最小的路径。简而言之求最小路径和。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//普通方式</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//来自上方的情况</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//来自左侧的情况</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用滚动数组进行优化，当前行只和上面一行有关系，实际上只需要开两行，使用<code>old</code>和<code>new</code>指针，old存放i-1行，new存放当前第i行，关键语句在于old和now进行交换</p><blockquote><p>old = now;</p><p>now = 1 - now</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//滚动数组优化</span><span class="token comment" spellcheck="true">//只需要把i变为now，i-1变为old即可</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            old <span class="token operator">=</span> now<span class="token punctuation">;</span>            now <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> now<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//来自上方</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>old<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//来自左侧</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20191208000116507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQyNDY2OA==,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="5、LintCode-553-Bomb-Enemy"><a href="#5、LintCode-553-Bomb-Enemy" class="headerlink" title="5、LintCode 553 Bomb Enemy"></a>5、<a href="https://www.lintcode.com/problem/bomb-enemy/description" target="_blank" rel="noopener">LintCode 553 Bomb Enemy</a></h3><p>【问题】给定一个二维矩阵, 每一个格子可能是一堵墙 <code>W</code>,或者 一个敌人 <code>E</code> 或者空 <code>0</code> (数字 ‘0’), 返回你可以用一个炸弹杀死的最大敌人数. 炸弹会杀死所有在同一行和同一列没有墙阻隔的敌人。 由于墙比较坚固，所以墙不会被摧毁。</p><p>【分析】原本只能在空地放炸弹，现在假设有敌人和有墙的地方也能放炸弹，有敌人的地方，格子里的敌人能被炸死，再加上其他炸死的人，有墙的地方，炸死人数为0。现在分析一个方向，比如向上，有三种情况：</p><ul><li>（i,j）是空地：结果就是从（i-1,j）格开始向上能炸死的敌人数</li><li>（i,j）是敌人：结果就是从（i-1,j）格开始向上能炸死的敌人数 + 1</li><li>（i,j）是墙：0</li></ul><p>原来要求（i,j）格子放炸弹向上能炸死的敌人数，子问题就转化为（i-1,j）格向上能炸死的敌人数，上述三种情况就如下：</p><ul><li><code>Up[i][j] = Up[i-1][j]</code>，(i,j)是空地的情况</li><li><code>Up[i][j] = Up[i-1][j] + 1</code>，(i,j)是敌人的情况</li><li><code>Up[i][j] = 0</code>，(i,j)是墙的情况</li></ul><p>初始条件就是第0行，如果是敌人，向上炸死人数为1，如果是空地或墙，向上炸死人数为0。</p><p>另外三个方向<code>Down[i][j], Left[i][j], Right[i][j]</code>也是一样考虑。炸死的敌人数就是四个方向加起来，每次更新一下最大值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxKilledEnemies</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">==</span> null <span class="token operator">||</span> grid<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> up <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> down <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//i,j处为炸弹放置的位置</span>                <span class="token comment" spellcheck="true">//如果是墙,其实四种情况都是0</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'W'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    up<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                up<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    up<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> up<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//down应该从下往上算，自底向上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'W'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> down<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//left，从左往右算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'W'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//right，从右往左算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'W'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//结果填充dp</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//只有在空地能放炸弹</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> up<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据仓库期末复习</title>
      <link href="/2019/11/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
      <url>/2019/11/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="#jump1">第二章 数据仓库</a></p><p><a href="#jump2">第三章 数据预处理</a></p><p><a href="#jump3">第四章 特征化和区分</a></p><p><a href="#jump4">数据挖掘</a></p><p><a href="#jump5">第五章 关联规则挖掘</a></p><p><a href="#jump6">第六章 分类挖掘</a></p><p><a href="#jump7">第七章 聚类挖掘</a></p><h2 id="第二章-数据仓库"><a href="#第二章-数据仓库" class="headerlink" title="第二章 数据仓库"></a><span id="jump1">第二章 数据仓库</span></h2><h3 id="1、B树索引"><a href="#1、B树索引" class="headerlink" title="1、B树索引"></a>1、B树索引</h3><p><strong>考题：为何B树等在数据库中广泛使用的索引技术无法直接被引入数据仓库？</strong></p><pre><code>1、B树要求属性必须具有许多不同的值，比如身份证号这种取值字段，取值范围很广，几乎没有重复。2、B树要求查询应具有更简单的条件和更少的结果3、创建B树的空间复杂度和时间复杂度很大</code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305193620991.png" alt=""></p><h3 id="2、位图索引-BitMap-Index"><a href="#2、位图索引-BitMap-Index" class="headerlink" title="2、位图索引 BitMap Index"></a>2、位图索引 BitMap Index</h3><p>位图索引分为两种，简单位图索引和编码位图索引，考试时候会让你画简单位图索引。</p><h4 id="（1）简单位图索引"><a href="#（1）简单位图索引" class="headerlink" title="（1）简单位图索引"></a>（1）简单位图索引</h4><p>对于每个属性，将属性中的不同取值生成不同的位向量！有几个不同的取值就有几个不同的位向量。如果数据表中某一元组的属性 值为 v，则在位图索引的对应行表示该值的位为 1，该行的其它位为 0。 </p><p>例如：<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305193733088.png" alt=""></p><p>如果我们要找买了b产品的女性，计算时候首先取出b产品和女性F向量做&amp;操作</p><blockquote><p>b：0 0 1 1 1 0 0 0</p><p>F：1 0 1 1 0 1 0 0</p><hr><pre><code>0 0 1 1 0 0 0 0</code></pre><p>发现第3位和第4位为1，表示第三行、第四行数据是我们要的结果</p></blockquote><p>位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，对于性别，可取值的范围只有’男’,’女’，并且男和女可能各站该表的50%的数据，这时添加B树索引还是需要取出一半的数据， 因此完全没有必要。如果某个字段的取值范围很广，几乎没有重复，比如身份证号，就不适合用位图索引，适合B树索引。</p><h3 id="3、连接索引-Join-Index"><a href="#3、连接索引-Join-Index" class="headerlink" title="3、连接索引 Join Index"></a>3、连接索引 Join Index</h3><p>适用于复杂的查询！复杂的查询往往需要<strong>多表连接</strong>，使用连接索引能提高性能。考试时候要求画出连接索引怎么画？</p><p>先说下什么是事实表、维表。事实表就是你要关注的内容，比如各种销售数据，通常包含大量的行。维表就是你观察该事物的角度，你从哪个角度去查看这个内容？比如对于销售数据，可以从某个地区的来看，地区就是维度。</p><p>例如，在一个星型模式中，事实表 Sales 与维表 Customer 和 Item 三者之间的链接关系如图所示。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305193749121.png" alt=""></p><p>它们的连接索引表如图所示。 </p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305193803129.png" alt=""></p><h3 id="4、数据仓库存储策略"><a href="#4、数据仓库存储策略" class="headerlink" title="4、数据仓库存储策略"></a>4、数据仓库存储策略</h3><p>在逻辑模型设计的基础上确定数据存储结构、索引策略、存储分配和数据存放位置等与物理有关的内容，与数据库设计中大致相似。</p><p>常用技术</p><ul><li>合并表<br>表的连接操作消耗很多时间，将表合并后存放，可以节约连接的时间，这是以空间换时间的策略</li><li>数据序列<br>将连续使用的数据连续存储，原先表示逻辑的部分可以继续存在</li><li>引入冗余<br>此处特指将一个属性从一张表扩散到其它表的过程，这个过程中，冗余就可以节约访问的连接次数</li><li>表的物理分割<br>类似逻辑设计阶段的数据分割，用拆分的表来表达原有逻辑意义上的一张表</li><li>生成导出数据<br>如果某张表的统计数据被频繁访问，这部分聚集数据就可以另行记录</li><li>建立广义索引<br>记录与“最”有关的统计结果。这部分数据非常小，又可以在数据刷新阶段直接建立，进行此类查询时就可以将统计操作转换为简单查找<strong>所以不用B树索引！</strong></li></ul><h3 id="5、数据仓库"><a href="#5、数据仓库" class="headerlink" title="5、数据仓库"></a>5、数据仓库</h3><h4 id="（1）数据仓库的出现？"><a href="#（1）数据仓库的出现？" class="headerlink" title="（1）数据仓库的出现？"></a>（1）数据仓库的出现？</h4><p>建立数据仓库<strong>不是</strong>要替代传统的事务处理系统和数据库，而是在新的领域中更加适应分析型处理的需要。数据仓库正成为信息集成的主要手段之一。</p><p>其出现目的：</p><ul><li>提高两个系统的性能</li><li>提高操作性数据库的事务吞吐量</li><li>两个系统中的数据结构、内容和用法可以不同</li></ul><h4 id="（2）数据仓库的特点-特征"><a href="#（2）数据仓库的特点-特征" class="headerlink" title="（2）数据仓库的特点/特征"></a>（2）数据仓库的特点/特征</h4><ul><li><p>面向主题</p><p>主题就是企业中某一领域涉及到的分析对象，面向主题就是说：数据仓库内的信息是按照主题进行组织的。主题是要经过抽取得出的</p></li><li><p>集成</p><p>全部数据放置在同一个地方，形成完整、一致的数据汇总</p></li><li><p>非易失</p><p>数据仓库的数据与操作型数据环境隔离</p></li><li><p>时变</p><p>数据仓库随时都是一个只读的备份，每隔一段时间完成一次对数据仓库的刷新</p></li></ul><h3 id="6、OLAP"><a href="#6、OLAP" class="headerlink" title="6、OLAP"></a>6、OLAP</h3><p>OLAP即联机分析处理，通过专门的数据综合引擎，辅以更加直观的数据访问界面，在短时间内相应非数据处理专业人员的复杂查询要求。</p><h4 id="（1）OLAP特点"><a href="#（1）OLAP特点" class="headerlink" title="（1）OLAP特点"></a>（1）OLAP特点</h4><ul><li>OLAP是面向特定问题的联机数据访问和分析<br>OLAP是只读的工具，这是与SQL的巨大差异</li><li>通过对信息多种可能的观察形式进行快速、稳定一致和交互性的存取<br>多个“维度”</li><li>允许决策人员对数据进行深入观察<br>以人为主导</li></ul><h4 id="（2）OLAP的基本数据模型"><a href="#（2）OLAP的基本数据模型" class="headerlink" title="（2）OLAP的基本数据模型"></a>（2）OLAP的基本数据模型</h4><ul><li><p>MOLAP<br>多维数据库</p></li><li><p>ROLAP</p><p>用事实表的二维模型存放度量值，定义大量外关键字指向维度</p><ul><li>星形模型</li><li>雪花模型</li></ul></li></ul><p><strong>详细介绍ROLAP</strong></p><ul><li><p>星型模式</p><ul><li>n维的多维表有一个事实表和n个维表增加一个新的维度，就增加一个维表，从而易于扩充</li><li>应对多维查询时，依赖标准SQL将事实表与维表进行<strong>连接</strong>与<strong>聚集</strong></li><li>星型模式的优势在于架构一旦确定下来，影响架构的宏观因素就很少，可以以<strong>基本固定的方式</strong>进行优化</li></ul></li><li><p>雪花模型</p><ul><li>对星型模式的扩展<br>某些维表并不是单一的平面结构，所有维属性的地位并不等同</li><li>优点<ul><li>更加适应人类的理解和观察<br>内在的关联性通过将子维表分列而体现出来</li><li>规范化的设计趋势节约存储空间</li></ul></li><li>缺点<ul><li>结构远比星型模式复杂</li><li>额外进行的多次连接造成性能损失</li><li>即使维数相同，表的结构也可能有很大差异<br>难以优化</li></ul></li></ul></li><li><p>其它扩展模式</p><ul><li>星座模式<br>通过公共维度连接多个星型模式</li><li>雪暴模式<br>通过公共维度连接多个雪花模型</li></ul></li></ul><h3 id="7、数据立方体"><a href="#7、数据立方体" class="headerlink" title="7、数据立方体"></a>7、数据立方体</h3><p>数据立方体是一种多维数据模型，主要有星形模式、雪花模式和事实星座模式。</p><ul><li><p>星形模式<br>它是最常见的模式，它包括一个大的中心表（事实表），包含了大批数据但是不冗余；一组小的附属表（维表），每维一个。如下所示，从item、time、branch、location四个维度去观察数据，中心表是Sales Fact Table，包含了四个维表的标识符（由系统产生）和三个度量。每一维使用一个表表示，表中的属性可能会形成一个层次或格。<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305193842012.png" alt=""></p></li><li><p>雪花模式<br>它是星模式的变种，将其中某些表规范化，把数据进一步的分解到附加的表中，形状类似雪花。 <img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305193909415.png" alt=""></p></li><li><p>事实星座</p><p>允许多个事实表共享维表，可以看作是星形模式的汇集。如下所示，Sales和Shipping两个事实表共享了time、item、location三个维表。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305193927337.png" alt=""></p></li></ul><p>在数据仓库中多用事实星座模式，因为它能对多个相关的主题建模；而在数据集市流行用星形或雪花模式</p><h3 id="8、多维数据分析手段"><a href="#8、多维数据分析手段" class="headerlink" title="8、多维数据分析手段"></a>8、多维数据分析手段</h3><ul><li>切片</li></ul><p>只看与该维成员相关的数据，就是降维</p><ul><li>切块</li></ul><p>可以认为是切片的复合操作，维度可能无法下降，但数据量得以减少</p><ul><li>旋转</li></ul><p>交换维度的排列顺序，获取全新的呈现方式。高维的旋转操作会很有用，交换了某些维度的焦点</p><ul><li>上钻</li></ul><p>将层次较低的数据集提高层次，上钻不会变更观察的主体</p><ul><li>下钻</li></ul><p>上钻的逆操作，降低数据层次，上钻与下钻并不能无限地进行下去，下界为原子层。</p><ul><li>其它操作<ul><li>跨钻<br>同步地对多个多维模型进行上钻或下钻，方便进行多个事实的对比</li></ul></li><li>钻透<ul><li>下钻到数据立方体最低细节后，继续细化到数据仓库/数据库的关系型表格</li><li>可以发现一些错误</li></ul></li></ul><h3 id="9、数据仓库的设计"><a href="#9、数据仓库的设计" class="headerlink" title="9、数据仓库的设计"></a>9、数据仓库的设计</h3><p>见ppt</p><h2 id="第三章-数据预处理"><a href="#第三章-数据预处理" class="headerlink" title="第三章 数据预处理"></a><span id="jump2">第三章 数据预处理</span></h2><h3 id="1、数据预处理过程"><a href="#1、数据预处理过程" class="headerlink" title="1、数据预处理过程"></a>1、数据预处理过程</h3><ul><li><p>数据清洗</p><ul><li>缺失值、噪声、非一致</li></ul></li><li><p>数据集成</p><ul><li>模式集成、发现冗余、数据值冲突检测和处理 </li></ul></li><li><p>数据变换</p><ul><li>光滑、聚集、泛化、规范化、属性构造 </li></ul></li><li><p>数据规约</p><ul><li>数据立方体聚集、属性子集选择、维度规约、数值规约、离散化和概念 分层产生 </li></ul></li><li><p>数据离散化</p><ul><li><p>数值数据</p><ul><li>分箱、直方图、聚类、基于熵的离散化、基于直观划分离散化 </li></ul></li><li><p>分类数据</p><ul><li>用户或专家在模式级显示说明属性偏序，层次高，属性值个数越少 </li></ul></li></ul></li></ul><h3 id="2、数据清洗"><a href="#2、数据清洗" class="headerlink" title="2、数据清洗"></a>2、数据清洗</h3><p><strong>噪声数据</strong>：测量变量时出现的随机错误或是差异，出现原因可能是属性值不正确（数据收集工具问题、数据的输入或传输问题等）以及数据不完整、不一致、重复记录产生的</p><p><strong>针对噪声数据的处理方法</strong>：分箱/分桶、聚类、人工检查、回归</p><p><strong>简单离散化方法：分箱</strong></p><ul><li>等宽分箱 equip-width<ul><li>将范围分为相等大小的N个间隔  </li><li>间隔的宽度将为：W =（B-A）/ N  （属性最高值-最低值）/N个间隔</li></ul></li><li>等深分箱 equip-depth<ul><li>分成N个间隔，每个间隔样本数相同</li></ul></li></ul><p>分箱后需要平滑数据，主要方法有：按箱平均值平滑、按箱中值平滑、按箱边界平滑<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305193950137.png" alt=""></p><h3 id="3、数据集成与变换"><a href="#3、数据集成与变换" class="headerlink" title="3、数据集成与变换"></a>3、数据集成与变换</h3><p>数据集成主要讲了去除冗余啥的，这边主要看数据转换的方式</p><h4 id="（1）数据变换"><a href="#（1）数据变换" class="headerlink" title="（1）数据变换"></a>（1）数据变换</h4><ul><li>平滑<ul><li>消除噪声数据</li></ul></li><li>聚合<ul><li>汇总数据</li></ul></li><li>泛化<ul><li>概念层次爬升，就是概念化</li></ul></li><li><strong>归一化</strong><ul><li>缩放数据到指定范围内</li></ul></li><li>属性/特征构造</li></ul><h4 id="（2）归一化的三种方式"><a href="#（2）归一化的三种方式" class="headerlink" title="（2）归一化的三种方式"></a>（2）归一化的三种方式</h4><ul><li><p>min-max normalization</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194007433.png" alt=""></p><p>value’ =（value-最小值）/（最大值-最小值）</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194024971.png" alt=""></p></li><li><p>Z-score normalization </p><p>Z标准化也叫标准差标准化，这种方法给予原始数据的均值（mean）和标准差（standard deviation）进行数据的标准化。<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194047639.png" alt=""></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194059338.png" alt=""></p></li><li><p>normalization by decimal scaling</p><p>进制缩放归一化。这种方法通过移动数据的小数点位置来进行标准化。小数点移动多少位取决于属性A的取值中的<strong>最大绝对值</strong>。公式中j是满足条件的最小整数。<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194113774.png" alt=""><br>例如 假定A的值由-986到917，A的最大绝对值为986，为使用小数定标标准化，我们用每个值除以1000（即，j=3），这样，-986被规范化为-0.986。<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194126917.png" alt=""></p></li></ul><h3 id="4、数据规约"><a href="#4、数据规约" class="headerlink" title="4、数据规约"></a>4、数据规约</h3><pre><code> Data Reduction，即数据规约，PPT中提到了4中策略</code></pre><ul><li>数据立方体聚合</li><li>降维</li><li>Numerosity reduction</li><li>离散化和概念层次生成</li></ul><p>观察往年试卷，考过<strong>离散化</strong><br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194146684.png" alt=""><br>         <strong>maxdiff</strong>：先给数据排序，给定β个桶或是分组，相邻数据的最大差是β-1，超过这个最大差就不能放进一个桶。</p><p>例子：<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194209620.png" alt=""><br>有个疑惑，最小方差每组算出来为什么要x2？</p><p><strong>离散化的其他方法</strong></p><ul><li><p>基于熵的离散化      Entropy-based discretization  </p><p>给定一组样本S，如果使用边界T将S划分为两个区间S1和S2，则划分后的熵为<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194227336.png" alt=""></p><p>选择在所有可能的边界上使熵函数最小的边界作为二进制离散化。该过程将递归应用于获得的分区，直到满足某些停止条件为止。<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194245041.png" alt=""></p></li><li><p>3-4-5规则</p><p>3-4-5规则可用于将数字数据分段为相对均匀的“自然”间隔。</p><p>看这个<a href="https://blog.csdn.net/weixin_42859280/article/details/93306099" target="_blank" rel="noopener">博客</a>！</p><ul><li>如果间隔的最高有效位数涵盖3、6、7或9个不同的值，则将范围划分为3个等宽间隔</li><li>如果它的最高有效位涵盖2、4或8个不同的值，请将范围划分为4个间隔</li><li>如果它的最高有效位涵盖1、5或10个不同的值，请将范围划分为5个间隔</li></ul></li></ul><h2 id="第四章-特征化和区分"><a href="#第四章-特征化和区分" class="headerlink" title="第四章 特征化和区分"></a><span id="jump3">第四章 特征化和区分</span></h2><p>废话</p><h2 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a><span id="jump4">数据挖掘</span></h2><h3 id="1、数据挖掘"><a href="#1、数据挖掘" class="headerlink" title="1、数据挖掘"></a>1、数据挖掘</h3><h4 id="（1）数据挖掘是什么？"><a href="#（1）数据挖掘是什么？" class="headerlink" title="（1）数据挖掘是什么？"></a>（1）数据挖掘是什么？</h4><p>数据挖掘=数据库里的知识发现，在大量的、完整的数据中进行挖掘，总结规律、得出知识，来指导客观世界。</p><h4 id="（2）数据挖掘基本概念"><a href="#（2）数据挖掘基本概念" class="headerlink" title="（2）数据挖掘基本概念"></a>（2）数据挖掘基本概念</h4><ul><li>模式<ul><li>任何用高级语言表达一定逻辑含义的信息都是模式（信息+判断）</li></ul></li><li>知识<ul><li>满足用户对客观评价标准（支持度/置信度……）和主观评价标准要求的<strong>模式</strong></li></ul></li><li>置信度 condidence<ul><li>某个数据集上，模式成立的程度，例如<strong>在购买面包和黄油的顾客中，大部分的人同时也买了牛奶</strong>，该模式的置信度为：同时购买面包、黄油、牛奶的顾客人数占同时购买面包、黄油的顾客人数的百分比。</li><li>置信度不是固定的</li><li>没有足够的置信度，模式也不能称为知识</li></ul></li><li>支持度 support<ul><li>某一数据集上，模式被用户关注的程度，也叫做<strong>兴趣度</strong></li></ul></li><li>非平凡性<ul><li>平凡的知识不是数据挖掘的目标，因为这样的知识已经成为<strong>常识</strong>，我们要找的是不平凡的知识</li></ul></li></ul><h4 id="（3）数据挖掘和数据仓库啥关系？"><a href="#（3）数据挖掘和数据仓库啥关系？" class="headerlink" title="（3）数据挖掘和数据仓库啥关系？"></a>（3）数据挖掘和数据仓库啥关系？</h4><ul><li>数据挖掘原本建立在数据库的基础之上</li><li>产生数据仓库技术后<br>由于数据仓库中的数据都是经过抽取、整理和预处理后的综合数据，因而数据挖掘工作可以在数据仓库上直接运行，任务相对来说会简单很多，<em>但并不代表数据挖掘可以无缝地架设在数据仓库之上</em></li></ul><h4 id="（4）数据挖掘步骤"><a href="#（4）数据挖掘步骤" class="headerlink" title="（4）数据挖掘步骤"></a>（4）数据挖掘步骤</h4><ul><li><p>数据的集成</p><ul><li><p>没数据怎么行？一般都集成到数据仓库</p></li><li><p>在数据仓库要对数据预处理</p><ul><li>清洗、集成、转换、减少</li></ul></li></ul></li><li><p>数据规约</p><ul><li>用于数据挖掘的数据量非常巨大，数据规约可以减低数据量，提高数据挖掘操作的性能</li></ul></li></ul><ul><li><p>常见的数据规约技术</p><ul><li>数据立方体计算</li><li>挖掘范围的选择<ul><li>在不影响挖掘结果的前提下，尽可能地选取那些与挖掘操作有关的属性集，去除明显无关的因素，或由于法规、风俗等原因，即使有相应的分析结果也无法应用的</li><li>时间范围或备份内容上的选择</li></ul></li><li>数据压缩<br>减低数据的规模，节省存储空间开销和数据通讯开销，如果采用的数据挖掘算法不需要解压就可直接对压缩数据进行挖掘，数据压缩技术将非常有用</li><li>离散化处理<br>将属性值的连续区域划分为若干个区域，用每个区域的标识代替原来的值，以减低该属性上属性值的个数，也可利用这种数据规约技术来自动地建立该属性的概念层次树</li></ul></li></ul><ul><li><p>挖掘</p><ul><li>挖掘方法<ul><li>关联规则挖掘–第五章</li><li>分类挖掘–第六章</li><li>聚类挖掘–第七章</li></ul></li></ul></li><li><p>表示</p><ul><li>可以包括文字、图形、表格、图标等可视化形式</li></ul></li></ul><h2 id="第五章：关联规则挖掘"><a href="#第五章：关联规则挖掘" class="headerlink" title="第五章：关联规则挖掘"></a><span id="jump5">第五章：关联规则挖掘</span></h2><h3 id="1、关联规则"><a href="#1、关联规则" class="headerlink" title="1、关联规则"></a>1、关联规则</h3><p><a href="https://www.jianshu.com/p/7d459ace31ab" target="_blank" rel="noopener">资料</a></p><ul><li><p>关联规则用于表示事务数据库中诸多属性之间的关联程度</p></li><li><p>关联规则挖掘则是利用数据库中的大量数据通过<strong>关联算法</strong>寻找<strong>属性</strong>间的相关性</p></li><li><p>属性在这里被称为 <strong>项</strong></p><p>若干个属性所构成的属性集被称为一个 <strong>项集</strong></p><blockquote><h6 id="例：超级市场"><a href="#例：超级市场" class="headerlink" title="例：超级市场"></a>例：超级市场</h6><p>在购买商品A的客户中有90%的人会同时购买商品B，则可用关联规则表示为：</p><pre><code>R1：A-&gt;B 表示一条规则</code></pre></blockquote></li><li><p>A-&gt;B与B-&gt;A的支持度是相同的，但置信度通常不同</p></li><li><p>任意组合均能构成关联规则</p><p>为了发现有意义的关联规则，需要给定两个阈值：</p><p><strong>最小支持度</strong> 和 <strong>最小置信度</strong></p><ul><li>满足最小置信度和最小支持度的规则为<strong>强规则</strong>，否则为<strong>弱规则</strong></li><li>关联规则挖掘的实质是<strong>在数据库（数据仓库）中寻找强规则</strong></li></ul></li></ul><p>支持度：$Sup(X) = \frac{Sum(X)}{N}$</p><p>置信度：$Conf(X \to Y) = \frac{Sup(X\cup Y)}{Sup(X)}$</p><h3 id="2、Apriori算法"><a href="#2、Apriori算法" class="headerlink" title="2、Apriori算法"></a>2、Apriori算法</h3><p>推荐<a href="https://www.cnblogs.com/en-heng/p/5719101.html" target="_blank" rel="noopener">博客</a></p><h5 id="（1）基本概念"><a href="#（1）基本概念" class="headerlink" title="（1）基本概念"></a>（1）基本概念</h5><ul><li>项<br>在数据库中出现的属性值，每一个属性值构成一个项</li><li>项集<br>在数据库中出现的属性值的集合</li><li>k-项集<br>由k个项构成的项集</li><li>频繁项集<ul><li>该项集在数据库中出现的频度满足用户规定的最小支持度的要求</li><li>即<strong>同时含有该项集中的所有属性值的记录数</strong> 占 <strong>所有记录数的百分比</strong> 大于等于用户规定的最小支持度</li></ul></li><li>关联规则一定是在满足用户的最小支持度要求的频繁项集中产生的<ul><li><strong>关联规则的挖掘过程也就是在数据库中寻找频繁项集的过程</strong></li><li>寻找频繁项集过程中，遵循<strong>每个频繁项集的任一子集也是一个频繁项集</strong></li></ul></li></ul><h5 id="（2）寻找频繁项集的方法"><a href="#（2）寻找频繁项集的方法" class="headerlink" title="（2）寻找频繁项集的方法"></a>（2）寻找频繁项集的方法</h5><blockquote><ul><li>寻找一阶频繁项集C1<br>除去非频繁项集，得到L1</li><li>从L1生成二阶超集，即候选频繁项集C2<br>除去非频繁项集，得到L2</li><li>从L2生成三阶超集C3<br>除去暂时不需要考虑的更高阶超集<br>除去非频繁项集，得到L3</li><li>……</li></ul><p>最后得到的频繁项集是<strong>L1、L2、L3……的并</strong></p></blockquote><p>Apriori算法：执行算法之前，用户需要先给定最小的支持度和最小的置信度。生成关联规则一般被划分为如下两个步骤：</p><ol><li><p>利用最小支持度从数据库中找到频繁项集。</p><p>给定一个数据库 D ，寻找频繁项集流程如下图所示<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194319757.png" alt=""></p><pre><code>    首先寻找一阶频繁项集C1，C1中，{1}的支持度为2/4 = 0.5（数据库D中一共四条事物，{1}出现在其中的两条事物中），C1中的其他几个也是这么计算的，假设给定的最小支持度 $SUP_{min} = 0.5$，{4}就被排除了，得到L1。    接下来从L1生成二阶超集，即候选频繁项集C2，除去非频繁项集（也就是低于SUP_min = 0.5的），得到L2。    从L2生成三阶超集C3，除去暂时不需要考虑的更高阶超集，除去非频繁项集，得到L3    我们可以看到 itemset 中所包含的 item 是从 1 增长到 3 的。并且每次增长都是利用上一个 itemset 中满足支持度的 item 来生成的，这个过程称之为**候选集生成**</code></pre></li><li><p>利用最小置信度从频繁项集中找到关联规则。（3）中内容</p><p>同样假定最小的置信度为 0.5 ，从频繁项集 {2 3 5} 中我们可以发现规则 {2 3} ⇒ {5} 的置信度为 1 &gt; 0.5 ，所以我们可以说 {2 3} ⇒ {5} 是一个可能感兴趣的规则。（这里看不懂的话看一下上面置信度公式就懂了）</p></li></ol><p><strong>如何发现全部的频繁项集？</strong></p><p>包含N种物品的数据集共有2^N-1种不同的项集，例如包含4种物品的全部项集：<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194340107.png" alt=""></p><h5 id="（3）生成关联规则"><a href="#（3）生成关联规则" class="headerlink" title="（3）生成关联规则"></a>（3）生成关联规则</h5><blockquote><ul><li><p>由此确定关联规则的生成算法：（输入参数：数据集和一个频繁项集）</p></li><li><p>针对频繁项集{A,C}可以构造两条规则</p><pre><code>R1：A-&gt;CR2：C-&gt;A</code></pre><p>一阶频繁项集无法构造关联规则，只能得到平凡知识<br>将每个频繁项集分为左右两部分，穷举即可以得到</p></li><li><p>对这些规则进行测试（依次计算置信度，用到的支持度数据在生成频繁项集的时候都存下来了）</p></li><li><p>通过预先设定的阈值对关联规则进行过滤</p></li><li><p>合并所有第一个列表中的剩余规则，创建第二个规则列表，其中规则右部包含两个元素</p></li><li><p>对第二个列表中的规则进行测试</p></li><li><p>过程重复到N为止（或者无法产生新规则）</p></li><li><p>最后剩余的关联规则上升为知识，用于决策支持</p></li></ul></blockquote><p>比如上面那个例子{2,3,5}，就可以分为 {2}–&gt;{3,5} 与 {2,3}–&gt;{5}，然后计算置信度，也就是</p><p>置信度con(X–&gt;Y) = (X U Y)/X。这里有个窍门</p><pre><code>假设最小置信度为p，且规则0,1,23并不满足最小置信度要求，即 P(0,1,2,3)/P(0,1,2)&lt;p那么任何左部为{0,1,2}的子集的规则也不会满足最小置信度要求</code></pre><h5 id="（5）Apriori算法的优化方法"><a href="#（5）Apriori算法的优化方法" class="headerlink" title="（5）Apriori算法的优化方法"></a>（5）Apriori算法的优化方法</h5><p>由于算法是时间开销花在数据库的多次扫描上，主要的优化方法有：</p><ul><li><p>数据库的划分（Partitioning）方法</p><p>针对硬件限制进行优化</p><p>虽然置信度和支持度指标可能有变化，但</p><p>所有关联规则一定都会出现在各个划分中</p><p>划分可能导致产生的关联规则数量过大，提高阈值又会损失原有的规则</p><ul><li>每一部分都能全部放在内存中进行扫描</li><li>最后对得到的所有频繁项集进行归并</li></ul></li><li><p>利用Hash方法筛选2阶频繁项集<br>将每个项哈希到哈希表里，从而大量地过滤不需要的候选集</p></li><li><p>利用采样数据集得到可能成立的规则，再利用数据库中的剩余数据验证这些规则的正确性<br>由于无法保证结论的正确性，此方式未必靠谱</p></li><li><p>减少每一遍扫描所处理的记录数</p><pre><code>如果一条记录不含有长度为k的频繁项集，那么这条记录也不可能含有长度为(k+1)的频繁项集</code></pre><p>得到所有k阶频繁项集后，以后的每次扫描就不必再访问上述的记录，从而逐步减少被扫描的记录数</p></li></ul><h3 id="3、FP-Growth算法"><a href="#3、FP-Growth算法" class="headerlink" title="3、FP-Growth算法"></a>3、FP-Growth算法</h3><h4 id="（1）介绍"><a href="#（1）介绍" class="headerlink" title="（1）介绍"></a>（1）介绍</h4><p><strong>FP核心</strong>：利用FP树递归地增长频繁模式路径（分治）</p><p><strong>FP优点</strong>：去除了不相关的信息；出去节点连接和计数规模比原数据库小；快速；将发现长频繁模式的问题转换成递归地搜索一些较短的模式。</p><p>关联分析算法，它采取如下分治策略：将提供频繁项集的数据库压缩到一棵频繁模式树（FP-Tree），但仍保留项集关联信息；该算法和Apriori算法最大的不同有两点：第一，<strong>发现频繁项集而不产生候选</strong>  ，第二，只需要两次遍历数据库，大大提高了效率。但是FP-Growth算法只能用来发现频繁项集，不能用来发现关联规则。</p><h4 id="（2）算法伪代码"><a href="#（2）算法伪代码" class="headerlink" title="（2）算法伪代码"></a>（2）算法伪代码</h4><p>详细见<a href="http://blog.csdn.net/sealyao/article/details/6460578" target="_blank" rel="noopener">博客</a></p><h4 id="（3）PPT例子"><a href="#（3）PPT例子" class="headerlink" title="（3）PPT例子"></a>（3）PPT例子</h4><p><a href="https://blog.csdn.net/weixin_30347335/article/details/97523472" target="_blank" rel="noopener">博客</a></p><p>给定数据库D以及min_sup</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194406301.png" alt=""></p><ol><li><p><strong>FP-Tree构建——第一步</strong></p><p>第一步：扫描数据库，得到一阶频繁项集。由于min_sup = 0.5，所以至少出现3次，低于3次的直接不考虑了，得到项集如下</p></li></ol><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194419583.png" alt=""></p><ol start="2"><li><p><strong>FP-Tree构建——第二步</strong></p><p>第二步：以频率递减的顺序对频繁项进行排序，注意里面的顺序<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194436052.png" alt=""></p></li><li><p><strong>FP-Tree构建——第三步</strong></p><p>每个事务中的数据项按降序依次插入到一棵以NULL为根结点的树中，这样所有的ordered frequent items都保存在了树中。，排序靠前的节点是祖先节点，而靠后的是子孙节点。如果有共用的祖先，则对应的公用祖先节点计数加1。插入后，如果有新节点出现，则项头表对应的节点会通过节点链表链接上新节点。直到所有的数据都插入到FP树后，FP树的建立完成。<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194453866.png" alt=""></p></li><li><p><strong>FP-Tree挖掘——第一步</strong></p><pre><code> 得到了FP树和项头表以及节点链表，我们首先要从项头表的底部项依次向上挖掘。对于项头表对应于FP树的每一项，我们要找到它的条件模式基。条件模式基是以我们要挖掘的节点作为叶子节点所对应的FP子树。得到这个FP子树，我们将子树中每个节点的的计数设置为叶子节点的计数，并删除计数低于支持度的节点。从这个条件模式基，我们就可以递归挖掘得到频繁项集了。</code></pre></li></ol><p>   <img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194532928.png" alt=""><br>   意思是item是x的时候，也就是后缀是x，他的前缀有哪些？出现次数是多少个。比如后缀是c，前缀是f，出现了3次；再比如后缀是b的，他的前缀有fca（1次），f（1次），c（1次），就这个意思</p><ol start="5"><li><p><strong>FP-Tree挖掘——第二步</strong></p><p>将得到的FP子树的每个节点的计数设置为叶子节点的而计数，并删除计数低于支持度<strong>（这里至少是3）</strong>的节点。我们就可以得到频繁项集。</p><p>一定要看这个<a href="https://blog.csdn.net/weixin_30347335/article/details/97523472" target="_blank" rel="noopener">例子</a><br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194549267.png" alt=""></p><p><strong>举例叶子结点是一阶的情况</strong></p><p>从底向上挖掘。先看p，它的频繁项集为{f:2,c:3,a:2,m:2,b:1,p:3}、前面5个代表条件模式基（大白话就是每个出现了几次，比如c出现了2+1次）,f、a、m、b的个数低于3个，低于我们要求的支持度，删除，合并一下，得到p结点的频繁二项集{c:3,p:3}，p对应的最大的频繁项集为频繁二项集。</p><p>再看m，它的频繁项集为f:3,c:3,a:3,b:1,m:3}，删除b，得到m的频繁四项集{f:3,c:3,a:3m:3}</p><p>再看b，它的频繁项集为{f:2,c:2,a:1,b:3}，删除fca，他只是个平凡知识，empty</p><p>再看a，它的频繁项集为{f:3,c:3,a:3}，这就是它的三阶频繁项集</p><p>再看c，…..</p><p><em>老师举的例子</em>（一阶）<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194602041.png" alt=""></p><p>一阶结果，明显和我们刚才做的思路结果一致<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194615620.png" alt=""></p><p><strong>举例叶子结点是二阶及以上的情况，同样思路</strong><br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194633276.png" alt=""></p></li></ol><h2 id="第六章：分类挖掘"><a href="#第六章：分类挖掘" class="headerlink" title="第六章：分类挖掘"></a><span id="jump6">第六章：分类挖掘</span></h2><h3 id="1、数据分类"><a href="#1、数据分类" class="headerlink" title="1、数据分类"></a>1、数据分类</h3><ul><li>通过分析训练数据样本，产生关于类别的精确描述</li><li>这种类别通常由分类规则组成，可以用来对未来的数据进行分类和预测</li></ul><p>首先为每一个数据（记录）打上一个标记，即按标记对数据（记录）进行分类，而分类分析则是对每类数据（具有相同标记的一组记录）找出其固有的特征与规律。</p><h3 id="2、数据分类的步骤"><a href="#2、数据分类的步骤" class="headerlink" title="2、数据分类的步骤"></a>2、数据分类的步骤</h3><p>建立一个模型，描述给定的数据类集或概念集，通过分析由属性描述的数据库元组来构造模型</p><ul><li>用于建立模型的元组集称为训练数据集，其中每个元组成为训练样本<br>训练样本的性质与待分析样本本质上没有差别，都是在实际环境中累积得到的数据</li><li>每个训练样本属于一个预定义的类，由类标号属性确定</li><li>由于给出了类标号属性，因此该步骤又成为有指导的学习<br>需要知道分类的数量，与对应分类对人来说的意义<br><em>如果训练样本的类标号是未知的，则称为<strong>**无指导的学习（聚类）\</strong></em></li><li>学习模型可以用分类规则、决策树和数学公式的形式给出</li></ul><p><strong>使用模型对数据进行分类</strong></p><ul><li>评估模型的分类准确性<br>训练数据和测试数据性质应当是一样的，但不能是两份相同的数据<br>评价的标准包括正确性、效率、可理解性</li><li>对类标号未知的元组按模型进行分类</li></ul><h3 id="3、分类分析方法"><a href="#3、分类分析方法" class="headerlink" title="3、分类分析方法"></a>3、分类分析方法</h3><p>是一种特征归纳的方法，将每类数据共有的特性抽取以获得规律性的规则，目前有很多分析方法，<strong>看了下往年试卷就考了决策树和朴素贝叶斯</strong></p><ul><li>决策树——考试考ID3</li><li>朴素贝叶斯<ul><li>通过前验概率和后验概率，决定某一特定样本属于标签中某一分类的概率<br>概率的值根据训练样本提供</li><li>贝叶斯方法得到的结果不唯一，并且能提供相应结果的概率大小</li><li>贝叶斯方法计算复杂<br>在各属性独立时，贝叶斯方法的计算可以简化</li></ul></li></ul><p>以上两种方法基于信息论，具有很好的<strong>可剪枝性</strong></p><p>K邻近算法也考了。。。不难，看一下就好。</p><h3 id="4、决策树——ID3算法"><a href="#4、决策树——ID3算法" class="headerlink" title="4、决策树——ID3算法"></a>4、决策树——ID3算法</h3><h4 id="（1）概念"><a href="#（1）概念" class="headerlink" title="（1）概念"></a>（1）概念</h4><p>又称为判定树，是运用于分类的一种树结构</p><ul><li><p>根据对一个判定进行拆分，连接到下一个判定或结论，构成的关系就是一棵决策树</p></li><li><p>每个内部结点代表对某个属性的一次测试</p></li><li><p>每条边代表一个测试结果</p></li><li><p>叶结点代表某个类或者类的分布</p></li><li><p>最上面的结点是根结点</p></li><li><p>通过对信息量的计算，判断每个属性对分类所作判断的贡献大小<br>将一个集合S拆分为S1和S2，其信息量大小有以下关系：</p><pre><code>I(S)≥I(S1)+I(S2)（在属性对分类不起任何作用时取等号）属性的信息增益A=I(S)-[I(S1)+I(S2)]</code></pre><p>将贡献最优的属性放在顶层，迭代进行</p><ul><li>中止条件<ul><li>训练数据集为空</li><li>分类已经确定<br>I(S)=0</li><li>属性已经用完，仍然无法确定地分类</li></ul></li></ul></li></ul><h4 id="（2）ID3算法"><a href="#（2）ID3算法" class="headerlink" title="（2）ID3算法"></a>（2）ID3算法</h4><p>推荐<a href="https://blog.csdn.net/qq_28697571/article/details/84678889" target="_blank" rel="noopener">博客</a></p><p>一种基于决策树的算法，根据信息增益，自顶向下贪心建树，信息增益用于度量某个属性对样本集合分类的好坏程度，我们要选择具有最高信息增益的属性。基于训练对象和已知类标号创建决策树，以信息增益为度量来为属性排序。</p><p>两个类标记：P（假设有p个元素） 和 N（假设有n个元素），用来判断任一元素属于P还是N的信息量为：<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194652192.png" alt=""><br>根据属性A将集合S划分为集合{S1，S2，…，Sv}，在每个Si中，属于类P的元素为Pi，属于N的元素为ni，用来区分的信息量（熵）为<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194704301.png" alt=""></p><p>计算属性A的信息增益 Gain(A)<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194715517.png" alt=""><br><strong>直接看PPT例子</strong></p><p>给了这个一张表，按照哪个属性来分类？</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194737187.png" alt=""><br>这个例子中</p><blockquote><ul><li><p>P：buys_computer = “yes” ,N:：buys_computer = “no”,一个14个数据,p:9个，n:5个</p></li><li><p>I(p, n) = I(9, 5) =0.940</p></li><li><p>age属性的熵的计算</p><ul><li>根据age属性，把整个输入集S划分成了三部分：&lt;=30岁，31～40岁，&gt;40岁</li><li>&lt;=30岁的5人中，yes 2人，no 3人，那就是 5/14*I(2,3)</li><li>31~40岁的4人中，yes 4人，no 0人，那就是 4/14*I(4,0)</li><li>大于40岁的5人中，yes 3人，no 2人，那就是5/14*I(3,2)</li><li>求和可得age属性的熵E(age)</li></ul></li><li><p>Gain(age) = I(9,5) - E(age)</p></li><li><p>按照同样的方法求Gain(income)、Gain(student)、Gain(credit_rating)</p></li></ul></blockquote><p>结果$Gain(age) = 0.25 &gt; Gain(student) &gt; Gain(credit_rating) &gt; Gain(income)$<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194752584.png" alt=""></p><p>这样就知道哪个属性的排序了，然后对age分类下的三种情况</p><ul><li>在&lt;30情况下，计算信息增益，发现student的信息增益最大，则将student设为节点；</li><li>在30-40之间只有yes，所以不需要计算</li><li>在&gt;40情况下，发现credit rating的信息增益最大，则设它为节点。</li></ul><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194819484.png" alt=""></p><h3 id="5、朴素贝叶斯"><a href="#5、朴素贝叶斯" class="headerlink" title="5、朴素贝叶斯"></a>5、朴素贝叶斯</h3><p>朴素贝叶斯算法的数学基础都是围绕贝叶斯定理展开的，因此这一类算法都被称为朴素贝叶斯算法。分类原理是通过对象的先验概率，利用贝叶斯公式计算出后验概率，即对象属于某一类的概率，选择具有后验概率最大的类作为该对象所属的类。下面是贝叶斯公式，要使P(C|X)最大（先验概率），则要使得P(X|C)·P(C)最大（后验概率），</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194834849.png" alt=""></p><p>朴素贝叶斯就是假设属性是独立的情况，特征（属性）之间互相独立</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194856094.png" alt=""></p><p><strong>例1</strong><br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194913954.png" alt=""></p><p>网球比赛示例，p代表能进行比赛，n代表不能进行比赛，X = &lt;rain, hot, high, false&gt;</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305194946881.png" alt=""></p><p><strong>例2：贝叶斯信念网络/概率网络</strong></p><p>就是将贝叶斯推理与属性之间的因果关系相结合</p><p>PPT上例题直接看这<a href="https://blog.csdn.net/qq_36739040/article/details/102652763" target="_blank" rel="noopener">博客</a></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195004894.png" alt=""></p><p><strong>首先计算患心脏病的先验概率</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195024277.png" alt=""></p><blockquote><p>α：E的可能取值，β：D的可能取值</p><p>由于朴素贝叶斯假设属性之间的独立，即E与D独立，则：P(E=α,D=β) = P(E=α) * P(D=β)</p><p>那就是四种情况加起来，PPT顺序错了</p></blockquote><p>用了这些数据</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195045932.png" alt=""></p><pre><code>     结论：不得心脏病的概率更大</code></pre><p><strong>BP=high的情况下，利用同样方法计算高血压数据，它与HD有关</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195105401.png" alt=""></p><p>结论：如果血压高，得心脏病概率更大</p><p><strong>在BP=high,D=healthy,E=yes的情况下HD的概率（血压高，饮食健康，做运动的心脏病的概率）</strong><br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195120967.png" alt=""></p><h2 id="第七章：聚类挖掘"><a href="#第七章：聚类挖掘" class="headerlink" title="第七章：聚类挖掘"></a><span id="jump7">第七章：聚类挖掘</span></h2><h3 id="1、聚类分析"><a href="#1、聚类分析" class="headerlink" title="1、聚类分析"></a>1、聚类分析</h3><p>聚类分析是在数据中发现数据对象之间的关系，将数据进行分组，组内的相似性越大，组间的差别越大，则聚类效果越好。</p><ul><li>又称集群分析，它是研究分类问题的一种多元统计方法</li><li>分为<strong>距离聚类</strong>和<strong>相似系数聚类</strong>，即定义相似程度的两种方式，实际上没必要严格地区分</li><li>没有筛选出一小部分数据，经过处理得到模型，再以此模型进行通用处理的两个阶段</li></ul><p><strong>与分类分析的混合使用</strong></p><p>由于聚类分析的时间复杂度与整体样本数量有关，因此可以抽样一部分数据进行聚类分析，得到结果后，对每个聚类进行概念规则挖掘，人为确定一些概念规则，再以此规则对剩余数据进行分类</p><ul><li>聚类分析输入的是没有被标记的记录，系统按照一定的规则合理的划分记录集合<br>相当于给记录打标记，但分类标准不是用户确定的</li><li>然后采用分类方法对数据进行分析，并根据分析结果重新对原来的记录集合进行划分，进而再进行一次分类分析</li><li>如此循环往复，直到获得满意的分析结果</li></ul><h3 id="2、主要的聚类方法"><a href="#2、主要的聚类方法" class="headerlink" title="2、主要的聚类方法"></a>2、主要的聚类方法</h3><ul><li><p>基于划分方法</p><p>一些场景中，划分聚类的数量k是知道的；即使不知道划分聚类的数量，也是可以以穷举的方法进行确定的（1≤k≤N）</p><ul><li>随机地选择k个数据</li><li>将其它所有数据打上距离最近的标记<br>完成一次迭代</li><li>根据当前聚类选择一个实际（或虚拟）的数据点<br>具有代表性的</li><li>第二次迭代，根据选择的点再进行一次划分<br>代表性的数据点继续发生变化</li><li>如此循环往复，直到每个数据的聚类不再发生变化为止</li><li>代表数据点的选择问题<ul><li>如果选择实际的数据点作为代表，选择的标准难以确定</li><li>如果选择虚拟的数据点作为代表，数据点又可能没有意义,需要根据实际任务选择类型</li></ul></li></ul></li><li><p>基于层次的方法</p><p>将相似程度最大的两个数据合并，以一个虚拟数据点作为其代表，重复进行计算</p><ul><li>k值是可以不必给定的<br>以聚类内的相似程度和聚类间的相异程度作为指标</li><li>没有迭代的过程，结果可能并不精确</li></ul></li></ul><p>ps：往年考了<strong>K-means算法</strong>和 <strong>凝聚式层次式距离算法</strong></p><h3 id="3、K-means聚类算法"><a href="#3、K-means聚类算法" class="headerlink" title="3、K-means聚类算法"></a>3、K-means聚类算法</h3><p>这是一种基于划分的距离技术，它将各个聚类子集内的所有数据样本的均值作为该聚类的代表点，算法的主要思想是通过迭代过程把数据集划分为不同的类别，从而使生成的每个聚类内紧凑，类间独立。</p><p>考试会出现的距离主要是曼哈顿距离<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195142265.png" alt=""></p><pre><code>k-means算法输入：簇的数目k和包含n个对象的数据库。输出：k个簇，使平方误差准则最小。算法步骤：   1.为每个聚类确定一个初始聚类中心，这样就有 K 个初始聚类中心。   2.将样本集中的样本按照最小距离原则分配到最邻近聚类    3.使用每个聚类中的样本均值作为新的聚类中心。  4.重复步骤2.3直到聚类中心不再变化。  5.结束，得到K个聚类</code></pre><p><strong>面向考题学习【2012期末】</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195201935.png" alt=""></p><p><strong>第一个问题：要求给出相异矩阵</strong>，相异度矩阵（存储n个对象两两之间的近似性）。同时，也提出了一个表示n个对象的矩阵，即数据矩阵（用p个变量来表示n个对象），如下图。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195216105.png" alt=""></p><p>我们只需要把每一元组的x、y值带进曼哈顿距离算一下就是答案了-_-</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195230698.png" alt=""></p><p><strong>第二个问题：对数据集进行聚类</strong>，给定了簇的数量为k = 3，给定了三个起始中心点（3，5）、（2，6）、（3，8），一共12个点（对象），那么对于剩余的9个点（对象），根据其与各个簇中心的距离，将它赋给最近的簇。大白话就是对剩下的点，用曼哈顿距离算一下它和哪个中心点近，就把它归类过去。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195245702.png" alt=""></p><p>就看前三列，取最小的放入对应聚类</p><pre><code>(1,4,6,7,11,12)(2,9)(3,5,8,10)</code></pre><p>重新调整三个聚类的中心点</p><pre><code>(1,4,6,7,11,12)    --&gt; x = (3+3+4+9+5+4)/6 = 4.6;y = (5+4+5+1+2+2)/6 = 3.17    (4.6,3.17)(2,9) --&gt; x = (2+1)/2 = 1.5;y = (6+6)/2 = 6 (1.5,6)(3,5,8,10) x = (3+7+4+6)/4 = 5;y=(8+7+10+8)/4 = 8.25 (5,8.25)</code></pre><p>然后再每个点算到三个中心点的距离，得到三个聚簇</p><p>一直这么算直到聚簇内不变化</p><h3 id="4、凝聚式层次式距离算法"><a href="#4、凝聚式层次式距离算法" class="headerlink" title="4、凝聚式层次式距离算法"></a>4、凝聚式层次式距离算法</h3><p>【2014期末】b问</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195313654.png" alt=""><br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195330066.png" alt=""></p><p>把每个点与其他点的距离都算出来，选距离最小的作为初始的那两个点，聚到一起之后算它们的中心点，然后这个中心点和其他n-2个点再算距离，再挑出两个最小的聚到一起，再算中心点…..一直到所有的都聚进来。最后我们想要聚成几类就在倒数第几步砍一刀。比如要求聚成两类，在step3砍一刀，一类是cde，另一类是ab。</p><p>初始a问曼哈顿距离</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195346521.png" alt=""></p><p>聚1和3，再计算其他点到新点距离</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195405686.png" alt=""></p><p>聚135，再计算其他点到新点距离</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305195423558.png" alt=""></p><p>聚1352，最后聚成12345</p><p>Ps：凝聚式层次式距离算法倒数第二步应该是聚45，写错了</p><p>完结撒花，希望有帮助到你。</p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海量数据处理</title>
      <link href="/2019/11/25/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A4%96%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/11/25/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A4%96%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="海量数据处理（4）：外排序算法"><a href="#海量数据处理（4）：外排序算法" class="headerlink" title="海量数据处理（4）：外排序算法"></a>海量数据处理（4）：外排序算法</h1><h2 id="一、外排序算法"><a href="#一、外排序算法" class="headerlink" title="一、外排序算法"></a>一、外排序算法</h2><p>外排序算法是指能够处理极大量数据的排序算法。通常来说，<strong>外排序处理的数据不能一次装入内存，只能放在硬盘上</strong>。通常采用<strong>排序–归并</strong>的策略，将原本的大文件，拆分为若干个小文件，小文件可以读入内存中进行排序，然后使用归并操作。</p><p>因此，外排序通常分为两个基本步骤：</p><ul><li>大文件拆分成若干个小的，并分别使用内存排好序</li><li>使用K路归并算法将若干个排好序的小文件合并到一个大文件中</li></ul><h3 id="1、文件拆分"><a href="#1、文件拆分" class="headerlink" title="1、文件拆分"></a>1、文件拆分</h3><p>根据内存的大小，尽可能多的分批次的将数据 Load 到内存中，并使用系统自带的内存排序函数（或者自己写个快排），将其排好序，并输出到一个个小文件中。比如一个文件有1T，内存有1G（自己设置jvm参数），那么我们就这个大文件中的内容按照 1G 的大小，分批次的导入内存，排序之后输出得到 1024 个 1G 的小文件。</p><h3 id="2、K路归并"><a href="#2、K路归并" class="headerlink" title="2、K路归并"></a>2、K路归并</h3><p>小文件都排完序后，就使用K路归并算法合并排序好的文件。K路归并使用的是<strong>堆</strong>来完成的。我们将 K 个文件中的第一个元素加入到堆里，假设数据是从小到大排序的话，那么这个堆是一个最小堆（Min Heap）。每次从堆中选出最小的元素，输出到目标结果文件中，然后如果这个元素来自第 x 个文件，则从第 x 个文件中继续读入一个新的数进来放到堆里，并重复上述操作，直到所有元素都被输出到目标结果文件中。</p><p><strong>其实这个思路就是和合并K个排序链表/有序数组是一样的，leetcode有这个题的，当时就是用堆来做。</strong></p><p><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">LeetCode 23.合并K个排序链表</a></p><p>这边一个问题是在归并的过程中，一个个从文件中读入数据，一个个输出到目标文件中操作很慢，如何优化？如果我们每个文件只读入1个元素并放入堆里的话，总共只用到了 1024 个元素，这很小，没有充分的利用好内存。另外，单个读入和单个输出的方式也不是磁盘的高效使用方式。<strong>因此我们可以为输入和输出都分别加入一个Buffer</strong>。假如一个元素有10个字节大小的话，1024 个元素一共 10K，1G的内存可以支持约 100K 组这样的数据，那么我们就为每个文件设置一个 100K 大小的 Buffer，每次需要从某个文件中读数据，都将这个 Buffer 装满。当然 Buffer 中的数据都用完的时候，再批量的从文件中读入。输出同理，设置一个 Buffer 来避免单个输出带来的效率缓慢。</p><p><strong>总之就是加一个Buffer来改善性能，具体设置多大得看实际情况啦。</strong></p><h2 id="二、求两个超大文件中-URLs-的交集"><a href="#二、求两个超大文件中-URLs-的交集" class="headerlink" title="二、求两个超大文件中 URLs 的交集"></a>二、求两个超大文件中 URLs 的交集</h2><p>问题的具体描述如下：给定A、B两个文件，各存放50亿个URLs，每个 URL 各占 64 字节，内存限制是 4G，让你找出A、B文件共同的 URLs？</p><p>遇到问题首先还是要看有没有条件需要澄清，这里主要是一个问题：这两个文件各自是否已经没有重复？<br>对于这个问题，通常面试官会先让你假设没有重复，然后再来看有重复的情况怎么处理。</p><h3 id="方法1：文件拆分"><a href="#方法1：文件拆分" class="headerlink" title="方法1：文件拆分"></a>方法1：文件拆分</h3><p>文件拆分可以叫sharding，也可以叫partition，这是能想到的最简单的方法，肯定就是要把文件从拆分，思路来源于kafka、es。50亿，每个 URLs 64 字节，也就是 320G 大小的文件。很显然我们不能直接全部 Load 到内存中去处理。这种内存不够的问题，通常我们的解决方法都可以是使用 hash function 来将大文件拆分为若干个小文件。比如按照hashfunc(url) % 200进行拆分的话，可以拆分成为，200 个小文件（就是如果 hashfunc(url) % 200 = 1 就把这个 url 放到 1 号文件里）每个小文件理想状况下，大小约是 1.6 G，完全可以 Load 到内存里。</p><p>这种方法的好处在于，因为我们的目标是要去重，那么那些A和B中重复的 URLs，会被hashfunc(url) % 200映射到同一个文件中。这样在这个小文件中，来自 A 和 B 的 URls 在理想状况下一共 3.2G，可以全部导入内存进入重复判断筛选出有重复的 URLs。</p><p>但如果 hashfunc(url) % 200 的结果比较集中，就有可能会造成不同的 URLs 在同一个文件中扎堆的情况，这种情况下，有一些文件的大小可能会超过 4G。对于这种情况，处理的办法是进行二次拆分，把这些仍然比较大的小文件，用一个新的 hashfunc 进行拆分：hashfunc’(url) % X。这里再拆成多少个文件，可以根据文件的实际大小来定。如果二次拆分之后还是存在很大的文件，就进行三次拆分。直到每个小文件都小于 4G。</p><h3 id="方法2：BloomFilter"><a href="#方法2：BloomFilter" class="headerlink" title="方法2：BloomFilter"></a>方法2：BloomFilter</h3><p>既然是内存空间太少的问题，有一个主要用于内存过少的情况的数据结构：BloomFilter。我们可以使用一个 4G 的 Bloom Filter，它大概包含 320 亿 个 bit（1G = 2^30^ * 8 bit）。把 A 文件的 50亿 个 URLs 丢入 BF 中，然后查询 B 文件的 每个 URL 是否在 BF 里。这种方法的缺点在于，320 亿个 bit 的 BF 里存 50 亿个 URLs 实在是太满了（要考虑到BF可能会用4个哈希函数），错误率会很高。因此仍然还需需要方法1中的文件拆分来分批处理。</p><h3 id="方法3：外排序算法"><a href="#方法3：外排序算法" class="headerlink" title="方法3：外排序算法"></a>方法3：外排序算法</h3><p>将A,B文件分别拆分为80个小文件，每个小文件4G。每个文件在拆分的时候，每4G的数据在内存中做快速排序并将有序的URLs输出到小文件中。用多路归并算法，将这些小文件进行归并，在归并的过程中，即可知道哪些是重复的 URLs。只需将重复的 URLs 记录下来即可。</p><p>当 A, B 各自有重复的 URLs 的时候，比如最坏情况下，A里的50亿个URLs 全部一样。B里也是。这样采用方法1这种比较容易想到的 Sharding 方法，是不奏效的，因为所有 URLs 的 hashcode 都一样，就算换不同的 hashfunc 也一样。这种情况下，需要先对两个文件进行单独的去重，方法是每 4G 的数据，放到内存中用简单的哈希表进行去重。这样，在最坏情况下，总共 320G 的数据里，一个 URLs 最多重复 80次，则不会出现太严重的扎堆情况了。算法上唯一需要稍微改动的地方是，由于 A 存在多个重复的 URLs，所以当和 B 的 URLs 被sharding 到同一个文件里的时候，需要标记一下这个 URLs 来自哪个文件，这样才能知道是否在A和B中同时出现过。<br>另外，<strong>使用外排序的方法，是无需对两个文件进行单独去重的步骤的。</strong></p><p>总结：用外排序，分治思想，采用哈希函数，外排在归并的时候看一下有没有重复，不用提前去重。</p>]]></content>
      
      
      <categories>
          
          <category> 海量数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 海量数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海量数据处理</title>
      <link href="/2019/11/24/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2019/11/24/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="海量数据处理（3）：布隆过滤器"><a href="#海量数据处理（3）：布隆过滤器" class="headerlink" title="海量数据处理（3）：布隆过滤器"></a>海量数据处理（3）：布隆过滤器</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>布隆过滤器（Bloom Filter，BF）对普通的哈希表做了进一步的改进，是一种更省空间的哈希表。当碰到内存不够的问题时，BF就是一个很好的选择。BF的两个功能：检测一个元素在不在一个集合中、统计一个元素的出现次数（实际上就是map的作用）。</p><p>BF虽然节省了空间，但同样也有一个副作用，即存在 <strong>False Positive（正误识）</strong>。 简单的说就是，如果是 Hash 的话，他说这个元素在集合里，那就是在集合里。而如果是 BF 的话，他说在集合里，你别当真，有一定概率这个元素不在集合里。也就是说 BF 会给出一个错误的（False）肯定（Positive）。</p><p>一个更完整的BloomFilter会包含以下两个部分：</p><ul><li>k 个完全独立的哈希函数</li><li>一个很大的数组</li></ul><p>根据处理的问题的不同，BloomFilter可以分为：</p><ul><li>标准型布隆过滤器（Standard Bloom Filter， SBF，相当于 HashSet）</li><li>计数型布隆过滤器（Counting Bloom Filter， CBF，相当于 HashMap）</li></ul><p>对于 SBF，其包含的大数组的类型为 Boolean 类型。对于 CBF，其包含的大数组的类型为整数类型。</p><p>最常见的hash函数如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这个算法，相当于把一个字符串当做了 31 进制，然后转换为整数。一边转换的过程中一边对 hashsize 取模，避免溢出。</span><span class="token comment" spellcheck="true"># 要设计k个完全独立的hash函数，只要把31改成其他素数如37、41等。尽量不要合数，会增加哈希冲突概率</span><span class="token keyword">def</span> <span class="token function">hashfunc</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> hashsize<span class="token punctuation">)</span><span class="token punctuation">:</span>    code <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">:</span>        code <span class="token operator">=</span> code <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span>        code <span class="token operator">=</span> code <span class="token operator">%</span> hashsize    <span class="token keyword">return</span> code</code></pre><h2 id="二、实现标准布隆过滤器"><a href="#二、实现标准布隆过滤器" class="headerlink" title="二、实现标准布隆过滤器"></a>二、实现标准布隆过滤器</h2><p>SBF相当于HashSet，支持添加元素以及判断一个元素是否在集合中。（允许 False Positive）</p><p>实现：</p><ul><li>初始化：开一个足够大的 boolean 数组，初始值都是 false。</li><li>插入一个元素：通过 k 个哈希函数，计算出元素的 k 个哈希值，对 boolean 数组的长度取模之后，标记对应的 k 个位置上的值为 true。</li><li>查询一个元素：通过同样的 k 哈希函数，在 boolean 数组中取出对应的 k 个位置上的值。如果都是 true，则表示该元素可能存在，如果有一个 false，则表示一定不存在。</li></ul><p><a href="https://www.lintcode.com/problem/standard-bloom-filter/description" target="_blank" rel="noopener">LintCode 556. Standard Bloom Filter</a></p><p>在这边使用了BitSet，它是Java中的一种数据结构。主要存储的是二进制位，每一位只用来存储0，1值，0代表false，1代表true。0表示该数据没有出现过，1表示出现过。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardBloomFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> BitSet bitSet<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>HashFunction<span class="token operator">></span> hashFunctions<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法, 创建k个hash方法</span>    <span class="token keyword">public</span> <span class="token function">StandardBloomFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        hashFunctions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hashFunctions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashFunction</span><span class="token punctuation">(</span><span class="token number">100000</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bitSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token number">100000</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//MOD有多大，bitSet就要有多少个位</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param word     * 往布隆过滤器中加入一个字符串     * 用每个hash函数计算下hash值，得到了hash值就得到了在bitSet中对应的位，并将对应的位置成true（1）     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> hashFunctions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            bitSet<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//检查字符串是否在过滤器中</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> hashFunctions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果有一处为false(0)，那就return false</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bitSet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//包装成类，每一个对象就是不同的hash函数</span><span class="token keyword">class</span> <span class="token class-name">HashFunction</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> MOD<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//MOD即基数，用于取模</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> seed<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//seed相当于进制</span>    <span class="token keyword">public</span> <span class="token function">HashFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> MOD<span class="token punctuation">,</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>MOD <span class="token operator">=</span> MOD<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> seed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">+=</span> res <span class="token operator">*</span> seed <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">%=</span> MOD<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、实现计数型布隆过滤器"><a href="#三、实现计数型布隆过滤器" class="headerlink" title="三、实现计数型布隆过滤器"></a>三、实现计数型布隆过滤器</h2><p>对SBF稍作改动，把存储所用的 boolean 数组改为 int 数组，就成为了可以计数的布隆过滤器。这个数据结构类似 Java 中的 HashMap，但只能用作计数。支持添加元素以及统计某个元素在该集合中出现的次数，统计的次数可能会比实际出现次数要大一些。</p><p>实现：</p><ul><li>初始化：开一个足够大的 int 数组，初始值都是 0。</li><li>插入一个元素：通过 k 个哈希函数，计算出元素的 k 个哈希值，对 int 数组的长度取模之后，将对应的 k 个位置上的值都加一。</li><li>查询一个元素的出现次数：通过同样的 k 哈希函数，在 int 数组中取出对应的 k 个位置上的值。并取其中的最小值来作为该元素的出现次数预估。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountingBloomFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bits<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>HashFunction<span class="token operator">></span> hashFunctions<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CountingBloomFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        hashFunctions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hashFunctions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashFunction</span><span class="token punctuation">(</span><span class="token number">100000</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">100000</span> <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//MOD最大值即可</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 往布隆过滤器中加入一个字符串</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> hashFunctions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            bits<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从布隆计数器中删除一个字符串</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> hashFunctions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            bits<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这边改一下即可</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查一个字符串是否在布隆过滤器中</span>    <span class="token comment" spellcheck="true">// 需要得到最小的次数（虽然可能依旧偏大），如果存在最小的次数为0，那这个字符串必不存在于CBF中</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> hashFunctions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HashFunction</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> MOD<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//MOD即基数，用于取模</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> seed<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//seed相当于进制</span>    <span class="token keyword">public</span> <span class="token function">HashFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> MOD<span class="token punctuation">,</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>MOD <span class="token operator">=</span> MOD<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> seed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">+=</span> res <span class="token operator">*</span> seed <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">%=</span> MOD<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 海量数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 海量数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海量数据处理</title>
      <link href="/2019/11/22/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8BTopK%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/22/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8BTopK%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="海量数据处理（2）：最高频K项问题"><a href="#海量数据处理（2）：最高频K项问题" class="headerlink" title="海量数据处理（2）：最高频K项问题"></a>海量数据处理（2）：最高频K项问题</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>这个问题即：找到一个大文件或者数据流中出现频率最高的 K 项。问题的难点在于，如果条件不一样，解决的办法是完全不一样的，比如：</p><ul><li>是否需要<strong>精确</strong>的 Top K 结果？即，是否允许小概率出错。</li><li>数据是<strong>离线的</strong>还是<strong>在线的</strong>？即是一个大文件的形式计算一次得到一个结果，还是数据流的形式实时返回结果。</li></ul><p>如果对于一个大文件（也就是说离线的），只是简单的找到前k大的，使用<code>quick select</code>算法即可。在线数据流如何处理？很简单，只要拿新加进来的数和前k大中的最后一个个数比较即可，新来的比它大，那就把最后一个踢出。问题就转变为集合中维护最小的数，马上就想到了<code>min heap</code>。</p><blockquote><p>离线问题—-&gt;quick select算法</p><p>在线问题—-&gt;维护minHeap</p></blockquote><p><a href="https://www.lintcode.com/problem/top-k-largest-numbers-ii/description" target="_blank" rel="noopener">LintCode 545. Top K Largest Numbers</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token keyword">private</span> Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> minHeap<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>            minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minHeap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    minHeap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">topk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> it <span class="token operator">=</span> minHeap<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="二、离线处理-Top-K问题"><a href="#二、离线处理-Top-K问题" class="headerlink" title="二、离线处理 Top K问题"></a>二、离线处理 Top K问题</h2><p><strong>离线问题</strong>的主要处理步骤是</p><ol><li>首先用hash表统计所有项的出现次数</li><li>寻遍每一个出现过的项，用最大K项的方法，获得最大的前K项</li></ol><h3 id="1、MapReduce处理离线-Top-K-步骤"><a href="#1、MapReduce处理离线-Top-K-步骤" class="headerlink" title="1、MapReduce处理离线 Top K 步骤"></a>1、MapReduce处理离线 Top K 步骤</h3><ol><li>通过 Map 步骤，将每一个文件中的单词一个个取出，每个单词构造一个 &lt;Word, 1&gt; 的 Key-value 二元组，作为 Map 的输出。</li><li>通过 Reduce 的步骤，每台机器（Reducer）会处理若干个不同的 Key，在每个 Reducer 一开始初始化的时候，构建一个最小堆，输入 key（某个 word） 和他对应的values（可以假设 values 就是一堆 1，事实上 Map Reduce 会帮你做一些优化，导致有可能 value 已经被加过，所以实际处理的时候，还是老老实实的把 values 加起来，而不是看一下 values 有多少个）。那么我们把所有的 values 加起来就是当前这个 key（某个 word）的出现次数。那么当我们拿到这个单词的出现次数之后，就可以在当前的 Reducer 里去和最小堆里的第K大比大小，来决定是否淘汰当前的第K大了。Reducer 在处理完他需要处理的数据之后，就输出他得到的 Top K。</li><li>由于有多个 Reducers，因此我们会得到多个 Top K，最后还需要从这些输出中过一遍，得到最终的 Top K。这个步骤已经在 Map Reduce 之外了，用一个单独的代码扫一遍就可以了。</li></ol><p><strong>实际情况下，如果真的是非常庞大的数据，全表扫描的时间消耗很长，而且把所有数据放到内存中，这个做法依旧不可行，即使用了MapReduce，用了很多台机器，具体分配到每台机器，也可能出现无法全部加载到内存的情况，我们不能一碰到情况就加机器。</strong></p><p><strong>那就是面试官问：假设现在只有一台机器，内存为 1G，你有一个 1T 大小的文件，需要统计里面最高频的 K 个单词，你该怎么做？</strong></p><p>答案是：哈希算法</p><h3 id="2、Hash算法"><a href="#2、Hash算法" class="headerlink" title="2、Hash算法"></a>2、Hash算法</h3><p>哈希函数对于同一个 Key，会返回一个<strong>固定的</strong>，无规律的整数值。虽然哈希值是可能<strong>重复的</strong>，并不是一对一的，但并不影响我们的计算。这样我们处理离线问题就分成了下面这三步：</p><ol><li>先将文件扫描一次，把每个单词作为 Key，算一下他的哈希值，然后模上大概 <strong>2000 - 10000</strong> 的这样一个数。之所以取这这么一个数是因为，内存的大小是 1G，那么如果将 1T 的文件分成若干个 1G 大小的小文件的话，那么理想需要 1000 个文件（1024G/1G）。平均下来就是将所有的单词分成 1000 组，每组大概就是 1G 个不同的单词（理想状况），实际上处理的时候，分成 2000 组比较保险。10000 组当然更保险了，但是可能就没有合理利用上内存了。实际做的时候，可以先看一下分成 2000 行不行，不行的话，再放大分组数。</li><li>对于每个文件，分别导入内存进行处理，使用<strong>哈希表+最小堆</strong>（MapReduce那块）。每一组文件得到一个 Top K。</li><li>类似于 Map Reduce 一样，我们得到了若干个 Top K，我们最后把这若干个 Top K 再合并一次就好了。</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcm9wc2lyajMxaXEwdTBuM2QuanBn?x-oss-process=image/format,png" alt=""></p><h2 id="三、在线处理-Top-K-问题"><a href="#三、在线处理-Top-K-问题" class="headerlink" title="三、在线处理 Top K 问题"></a>三、在线处理 Top K 问题</h2><p>数据流问题的特点是没有第二次从头访问数据的机会。因此在离线算法中，先通过哈希表（HashMap）计数，再通过堆（Heap）来统计Top K的方法就行不通了。那在线算法的思路就是<strong>边计数，边比较Top K</strong>。这种算法的空间复杂度消耗和数据流中流过的数据量总大小有关，如果数据量一大，根本不好控制内存消耗。想要找一个在线的、精确的、省空间的TOP K算法是很困难的，只能牺牲掉准确性，<strong>用精度换空间</strong>。这就是我们优化的余地。（就好比热搜TOP 10里面 排名不用非常精确）</p><p>常见的精度换空间算法有：Lossy Counting、Efficient Count、Hash Count等</p><h3 id="1、HashCount"><a href="#1、HashCount" class="headerlink" title="1、HashCount"></a>1、HashCount</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TopKAnalyzer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>k <span class="token operator">=</span> k        self<span class="token punctuation">.</span>hash_heap <span class="token operator">=</span> HashHeap<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hash_count <span class="token operator">=</span> 开一个数组，内存有多大开多大    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> hashfunc<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">%</span> self<span class="token punctuation">.</span>hash_count<span class="token punctuation">.</span>size        self<span class="token punctuation">.</span>hash_count<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        word_count <span class="token operator">=</span> self<span class="token punctuation">.</span>hash_count<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">topk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>这里将原本记录所有单词的出现次数的哈希表，换成了一个根据内存大小能开多大开多大的数组。这个数组的每个下标存储了“某些”单词的出现次数。使用了hashfun函数计算每个单词的hashcode，将hashcode模整个hashcount数组的大小得到一个下标（index），用这个下标对应的计数来代表这个单词的出现次数。有了这个单词的出现次数之后，再拿去 hash heap 里进行比较就可以了。</p><p>问题是如果有两个单词，计算下来的index一样，一个单词把另一个单词挤掉了，实际上根据<strong>长尾效应</strong>（统计学名词。正态曲线中间的突起部分叫头，两边相对平缓的部分叫尾，人们需求的角度来看，大多数的需求会集中在头部，分布在尾部的只是少量个性化的需求），由于 Top K 的 K 肯定是远小于 N（整个数据集的），而 Top K 的这些数据项的计数又远远大于其他的数据项。因此，Top K 的 index 扎堆的可能性是非常非常小的。</p><h2 id="四、面试问题"><a href="#四、面试问题" class="headerlink" title="四、面试问题"></a>四、面试问题</h2><h3 id="1、设计一个听歌统计系统，返回用户-7-天内听的最多-10-首的歌。"><a href="#1、设计一个听歌统计系统，返回用户-7-天内听的最多-10-首的歌。" class="headerlink" title="1、设计一个听歌统计系统，返回用户 7 天内听的最多 10 首的歌。"></a>1、设计一个听歌统计系统，返回用户 7 天内听的最多 10 首的歌。</h3><h4 id="（1）问题分析"><a href="#（1）问题分析" class="headerlink" title="（1）问题分析"></a>（1）问题分析</h4><p>几个问题条件：</p><ul><li>7天和10首歌这个数字是固定的么？有可能一会儿7天一会儿10天，一会儿10首歌一会儿8首歌么？</li><li>对实时性要求严格么？是否允许一定时间的延迟？比如一首个一分钟内被点爆，是否需要在这1分钟之内在榜单中体现出来？</li></ul><p>澄清问题是面试中重要的一个步骤，因为上述问题的答案，稍有不同，则算法的设计，系统的设计就截然不同。我们先做如下的合理假设：</p><ul><li>7天10首歌这两个数字是固定的。</li><li>对实时性要求不严格，可以有1小时的误差。</li></ul><h4 id="（2）离线算法"><a href="#（2）离线算法" class="headerlink" title="（2）离线算法"></a>（2）离线算法</h4><p>通常来说，系统都会进行一些 log。比如用户在什么时候听了什么歌曲，都会被作为一条条的log 记录下来，这个时候，我们可以每小时运行一次分析程序，计算最近7天被听的最多的10首歌。这个分析程序则读取最近 7 天的听歌记录，用前面的 Hash + Heap 的方法进行统计即可。如果这个记录过大，需要加速的话，还可以使用 Map Reduce 来提速。</p><ul><li><p><strong>缺点：</strong></p><ul><li>每小时都进行一次对前7天的数据统计，若数据量很大，使用 Map Reduce 则会耗费很多计算资源。</li><li>如果系统的实时性要求变高，则该方法很有可能不奏效</li></ul></li><li><p><strong>解决方案：提出基于桶（Bucket）的统计方法</strong></p><ul><li><strong>聚合（Aggregate）</strong>：将用户的同个记录，按照1小时为单位进行一次聚合（Aggregate），即整合成一个 Hash 表，Key是歌曲的id，Value是歌曲在这1小时之内被播放的次数。这种方法的好处在于，因为很多歌曲，特别是热门歌曲，是被高频率点播的，这个时候没有必要去一条一条的记录点播记录，只需要记录一个1小时的统计即可。这里每个小时就是一个桶（Bucket），比如当前时刻是 1月1日的18点，那么18点之后，19点之前的点播记录，都放在18点的这个桶里，进行聚合统计。</li><li><strong>滑动窗口（Sliding Window）</strong>：7天的话，只需要在内存中保存 7 * 24 = 144 个桶，随着时间轴的推移，旧的桶则可以被删除。每次需要获得 Top 10 的时候，则将这 144 个桶的结果进行合并即可。</li></ul></li><li><p><strong>关于桶的问题</strong></p><ul><li>如果桶统计的hash表很大，无法放进能存，那么在每个桶的局部统计中，可以删除value很小的key（长尾理论），他们都没用，但却占据了很大的空间</li><li>桶是同事存放在内存和硬盘的，存在内存中是为了更快计算top10，存在硬盘中，防止断电，并且即便桶里的数据没被存下来，可以利用数据库中的log，重新还原每个桶里的hash表</li></ul></li></ul><h4 id="（3）在线算法"><a href="#（3）在线算法" class="headerlink" title="（3）在线算法"></a>（3）在线算法</h4><p>由于有7天这个窗口，我们要做到：</p><ul><li>新数据来的时候，需要丢弃对应的7天前的旧数据。</li><li>7天之内的数据，都应该按照某种带着时间标记的方式被保存下来，而不是只有一个计数。</li><li>在线 Hash + Heap 的方法“可能”不再奏效，因为跌出前10名的歌曲，还可能在过短时间后回到前10名。而之前介绍中我们在 Heap 中保存的是前10名，跌出前10名的元素不再有机会回到前10名，则无需保存。</li></ul><h3 id="2、在-10-亿个数中找最小的-100-万个数（假设内存只能放下-100-万个数）"><a href="#2、在-10-亿个数中找最小的-100-万个数（假设内存只能放下-100-万个数）" class="headerlink" title="2、在 10 亿个数中找最小的 100 万个数（假设内存只能放下 100 万个数）"></a>2、在 10 亿个数中找最小的 100 万个数（假设内存只能放下 100 万个数）</h3><p>使用一个最大堆保存最小的前 100 万个数。循环每个数的过程中，和 Max Heap 的堆顶比较，看看是否能被加入最小前 100 万个数里。可以结合MapReduce以及HashCount算法来讲。</p>]]></content>
      
      
      <categories>
          
          <category> 海量数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 海量数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海量数据处理</title>
      <link href="/2019/11/21/%E6%B5%B7%E9%87%8F%E5%A4%84%E7%90%86%E4%B9%8BMapReduce/"/>
      <url>/2019/11/21/%E6%B5%B7%E9%87%8F%E5%A4%84%E7%90%86%E4%B9%8BMapReduce/</url>
      
        <content type="html"><![CDATA[<h1 id="海量数据处理（1）：MapReduce"><a href="#海量数据处理（1）：MapReduce" class="headerlink" title="海量数据处理（1）：MapReduce"></a>海量数据处理（1）：MapReduce</h1><p>海量数据处理，就是基于海量数据的存储、删除、搜索等操作。由于数据量太大，导致要么无法在短时间内迅速处理，要么无法一次性装入内存。针对面试过程中的问题，主要有以下解决步骤</p><ul><li><p>针对时间，可以采用更加迅速的数据结构和算法，比如BloomFilter、Hash、堆、Bitmap等</p></li><li><p>针对空间，无非就是大而化小，分而治之。</p></li><li><p>算法方面：</p><ul><li>外排序算法（External Sorting）</li><li>Map Reduce</li><li>非精确算法</li><li>概率算法</li><li>哈希算法与哈希函数（Hash Function）</li></ul><p>数据结构方面：</p><ul><li>哈希表（Hash Table）</li><li>堆（Heap）</li><li>布隆过滤器（BloomFilter）</li><li>位图（Bitmap）</li></ul></li></ul><h2 id="一、MapReduce简介"><a href="#一、MapReduce简介" class="headerlink" title="一、MapReduce简介"></a>一、MapReduce简介</h2><p>给定一个有海量单词的集合，统计每个词的出现次数，最简单的就是for循环，放进map，一台机器这样做，明显是不合适的，所以我们想到了用两台机器for循环，两台服务器去处理数据，但是到了merge环节，还是一台机器啊，这也是个瓶颈。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcmp5bzZ6ajMyNzYwdTBncGYuanBn?x-oss-process=image/format,png" alt="MapReduce"></p><p>合并时候也可以采用并行的方式，有两种选择</p><ul><li>一是以机器来划分（比如第i台到第j台由某台机器合并）</li><li>二是根据key来划分（比如key由a、b、c、d，让一台机器合并key a和key b）</li></ul><p>很显然以机器作为划分并不好，因为进行了第一轮合并了后，还要再进行合并…最后形成一个类似树状结构的，后面的机器得要等前面机器合并完了才能继续工作，依赖性较强。所以才用根据key来划分（没有前后依赖性，系统复杂度低），这就有了MapReduce。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcmxxdjV4ajMyOGswcjY3OXYuanBn?x-oss-process=image/format,png" alt=""></p><p>注意，上面的map中采用了合并，这实际上是不对的，如果要合并，需要hashmap，机器里开一个hashmap肯定是放不下的，map的主要任务是打乱，不做合并。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcms3bW8yajMyOHUwcHVhZm0uanBn?x-oss-process=image/format,png" alt=""></p><h2 id="二、Map函数和Reduce函数"><a href="#二、Map函数和Reduce函数" class="headerlink" title="二、Map函数和Reduce函数"></a>二、Map函数和Reduce函数</h2><p>Map函数和Reduce函数的输入输出必须是<code>key-value</code>的形式</p><ul><li>Map 输入 key：文章存储地址，value：文章内容</li><li>Reduce 输入key：Map输出的key，Value：Map输出的value</li></ul><p><a href="https://www.lintcode.com/problem/word-count-map-reduce/description" target="_blank" rel="noopener">LintCode 499.单词计数</a></p><p>实现map和reduce函数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//OutputCollector是辅助输出的工具</span><span class="token keyword">class</span> <span class="token class-name">OutputCollector</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collect</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Map</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//value是文章</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> OutputCollector<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>            StringTokenizer tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String outputKey <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>outputKey<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//不做merge</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Reduce</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//key和value都是map输出的,某个key出现n此就有n个1，只要把Iterator中所有的1加起来即可</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> values<span class="token punctuation">,</span> OutputCollector<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> values<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            output<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、传输整理"><a href="#三、传输整理" class="headerlink" title="三、传输整理"></a>三、传输整理</h2><p>在Map到Reduce的过程中有个传输整理，这个流程如图所示</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcmtrbWY2ajMyOHUwcHVhZm0uanBn?x-oss-process=image/format,png" alt=""></p><p>Partition和Sort就是传输整理，在这个过程中ab分为一组，cd分为一组，这个分组是由master的一致性hash来进行分组，由于分组存在硬盘上，采用外部排序。排序时key作为第一关键字，value作为第二关键字。接下来是Reduce的工作，通过Fetch把排好序的文件拿到自己的机器上，并对这些文件进行k路归并成Reduce的输入。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcm15anl5ajMyNGYwdTBncnguanBn?x-oss-process=image/format,png" alt=""></p><p>下面介绍两个应用</p><h2 id="四、利用MapReduce建立倒排索引"><a href="#四、利用MapReduce建立倒排索引" class="headerlink" title="四、利用MapReduce建立倒排索引"></a>四、利用MapReduce建立倒排索引</h2><p>正排：序号-&gt;关键字，倒排：给定文章关键词，返回文章序号，就比如google上搜索关键词，返回网页。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcm1kc3VxajMyOHkwZjBkaGQuanBn?x-oss-process=image/format,png" alt=""></p><p>map输出的key是文章的关键词，value是文章的编号。在reduce中需要进行去重操作</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcmt1NGxuajMyOW0wbTI3OXAuanBn?x-oss-process=image/format,png" alt=""></p><p><a href="https://www.lintcode.com/problem/inverted-index-map-reduce/description" target="_blank" rel="noopener">LintCode 504. 倒排索引</a></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//OutputCollector是辅助输出的工具</span><span class="token keyword">class</span> <span class="token class-name">OutputCollector</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collect</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String content<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvertedIndex</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Map</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// value是对应文章的id</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>String _<span class="token punctuation">,</span> Document value<span class="token punctuation">,</span> OutputCollector<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>            StringTokenizer tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String word <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                output<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> value<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Reduce</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> values<span class="token punctuation">,</span> OutputCollector<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用于去重</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Integer now <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">!=</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                left <span class="token operator">=</span> now<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            output<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//key->包含该key的文章</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="五、利用MapReduce对Anagram进行分组"><a href="#五、利用MapReduce对Anagram进行分组" class="headerlink" title="五、利用MapReduce对Anagram进行分组"></a>五、利用MapReduce对Anagram进行分组</h2><p>Anagram的特性就是能够随意改变单词中字母顺序，如果把内部字母排个序，那么只要是Anagram就会变成同一个单词。经过内部排序的单词就能够作为key，而原单词就是value。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndneTFnYXFpcm5yZjZvajMyOHUwbnFqd2guanBn?x-oss-process=image/format,png" alt=""></p><p><a href="https://www.lintcode.com/problem/anagram-map-reduce/description" target="_blank" rel="noopener">LintCode 503. 乱序字符串</a></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//OutputCollector是辅助输出的工具</span><span class="token keyword">class</span> <span class="token class-name">OutputCollector</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collect</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Anagram</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Map</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> OutputCollector<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>            StringTokenizer tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String word <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>                output<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Reduce</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> values<span class="token punctuation">,</span> OutputCollector<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            output<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 海量数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 海量数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/24/J.U.C%20AQS%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/24/J.U.C%20AQS%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="简介和属性"><a href="#简介和属性" class="headerlink" title="简介和属性"></a>简介和属性</h2><p>同步器AbstractQueuedSynchronizer，它是各种锁的底层，比如ReentrantLock、CountDownLatch。肯定要各种队列知识的，之前看过了。找了张很不错的图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200219194659047.png" alt=""></p><p>aqs就两个队列，条件队列、同步队列，也就是sync queue 和condition queue，队列底层又是链表，1、2、3代表看的顺序，四种颜色代表四种不同的场景。aqs就是一套框架，定义了获得锁和释放锁的代码结构，你要新搞个锁，继承aqs就行。</p><ul><li><p>大概</p><ul><li>本身就是个抽象类，要让子类去实现一些东西，它只是定义了如何获得锁、释放锁的抽象方法，aqs继承了aos，为的是知道当前哪个线程拿到了锁，监控它</li><li>aqs首先定义了一个fifo的 sync queue，拿不到锁的线程就去队列中排队吧</li><li>然后同步器有个状态字符，用的是atomic包里的，可以通过状态字段来判断能不能获得锁。aqs的子类是通过给状态赋值（cas操作）来决定能不能拿到锁，比如我定义0就是可以获得锁，1就是不能获得锁。</li><li>aqs提供了排他锁和共享锁的实现，readwritelock实现了两种模式。</li><li>aqs内部的条件队列是通过 new ConditionObject得到的</li></ul></li><li><p>简单属性</p><ul><li>state 属性，int类型，所有继承 aqs 的锁都是通过这个字段来判断能不能获得锁，能不能释放锁。比如当前同步器状态是 0，表示可以获得锁，当前同步器状态是 1，表示锁已经被其他线 程持有，当前线程无法获得锁，<strong>state是锁的状态，，下面还有个事waitStatus，它是队列中节点的状态，别搞混了</strong></li></ul></li><li><p>sync queue 同步队列</p><ul><li>有俩重要属性，同步队列的头和同步队列的尾巴，多个线程竞争一把锁，只有一个线程能拿到，其他都跑到队列尾曲了，有人释放锁，是从同步队列头开始释放一个排队的线程，让线程重新去竞争锁，同步队列的作用很简单的，就是阻塞你们这些获得不到锁的线程，然后在合适的时候释放。同步队列底层是个双向链表</li><li><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200219200241418.png" alt=""></li></ul></li><li><p>condition queue 条件队列</p><ul><li>条件队列也是管理那些获取不到锁的线程，但是它只是和锁配合着使用，底层是一个链表，firstwaiter是第一个等待的，lastwaiter是最后一个等待的node，使用时候直接new ConditionObject，它实现了Condition接口，Condition接口相当于各种监控方法，类似于Object的wait、notify</li><li><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200219200717993.png" alt=""></li></ul></li><li><p>同步队列和条件队列的节点Node</p><ul><li><p>一般是用Node把线程包装一下就放进队列中了</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Node SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//共享的</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排他的</span>              <span class="token comment" spellcheck="true">//状态看这个https://www.jianshu.com/p/3a7e8c028dd8</span>              <span class="token comment" spellcheck="true">//被取消状态</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//cur.next处于等待状态，如果cur释放锁（将cur状态置为-1），然后通知它的下一个</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//节点处于等待队列中，节点线程等待在Condition上，当其他线程对Condition调用了signal()方法后，该节点从等待队列中转移到同步队列中，加入到对同步状态的获取中；</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//代表后续结点会传播唤醒的操作，共享模式下起作用</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//表示当前节点的状态，通过节点的状态来控制节点的行为</span>              <span class="token comment" spellcheck="true">//普通同步节点，就是 0 ，条件节点是 CONDITION -2</span>              <span class="token comment" spellcheck="true">//ws大于0，说明被取取消了</span>        <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//当前节点的前驱节点</span>              <span class="token comment" spellcheck="true">//节点 acquire 成功后就会变成head，head 节点不能被 cancelled</span>        <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前节点的下一个节点</span>        <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点的线程</span>        <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待节点的后继节点。</span>              <span class="token comment" spellcheck="true">//在同步队列中，Node构建同步队列节点，nextWaiter标识同步锁是独占锁的还是共享锁</span>              <span class="token comment" spellcheck="true">//在条件队列中，nextWaiter指向单向链表下一个节点</span>               <span class="token comment" spellcheck="true">//这边特别要注意，看的时候给我带来了很大困扰</span>        Node nextWaiter<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否被共享</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>特别特别注意，nextWaiter 是条件队列中下一个节 点的指向字段，但在同步队列中，nextWaiter 只是一个标识符，表示当前节点是共享还是排它模式。</p></li></ul></li><li><p>条件队列 ConditionObject</p><ul><li><p>ConditionObject它是实现了Condition接口的，所以这个接口很重要，细节如下</p><ul><li>注释中说，当用lock代替synchronized的时候，Condition就能代替Object中相应的监控方法了，比如wait、notify、notifyAll等。Condition的实例它是绑定在锁上的，lock.newCondition就能获得实例了。</li><li>为什么需要条件队列，举个例子，我有put和take方法，put的时候，如果满了，就会阻塞，take的时候，如果空了，就会阻塞，这两种情况的线程其实都会去条件队列中阻塞，<strong>如果仅仅依靠一个条件队列，那就只能执行一个操作，那在这种情况下，我可以新建两个条件队列，建几个具体还是看需求吧，这样就可以分别执行操作了。</strong></li></ul></li><li><p>condition中的一些方法</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 唤醒条件队列中的一个线程，在被唤醒前必须先获得锁</span><span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 唤醒条件队列中的所有线程 </span><span class="token keyword">void</span> <span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使当前线程一直等待，直到被 signalled 或被打断。</span><span class="token comment" spellcheck="true">//被唤醒时，特别注意:线程从条件队列中苏醒时，必须重新获得锁，才能真正被唤醒</span><span class="token comment" spellcheck="true">//当然await方法还有待超时时间的 。。啊我懒得贴过来了</span><span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span></code></pre></li></ul></li></ul></li></ul><h2 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h2><ul><li><p>获取排他锁–acquire</p><ul><li><p>最直观的就是通过<code>Lock.lock()</code>获取，Lock 一般是 aqs 的子类，lock 方法底层也是根据情况来调用acquire或是tryAcquire。acquire这个方法aqs已经实现了，tryAcquire是交给子类去实现的，只要包含try的方法，都是交给子类去实现的，它在aqs中是直接抛了个异常。<strong>acquire方法先尝试用tryAcquire去获取锁，获取不到时，再去同步队列中等待锁。acquire也分为排他锁和共享锁。</strong></p></li><li><p>acquire运行流程是这样的，我先走一遍子类的tryAcquire，看看有米有实现咯，如果实现了，那就直接返回呗，否则线程就尝试进入同步队列，就会先调用addWaiter方法，也就是放进同步队列尾，然后外面包裹一层acquireQueued，其目的是阻塞节点，同时赋予节点被唤醒时，让它能够获得锁。如果上述操作也失败了，打断线程。</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//tryAcquire是交给子类去实现的</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token comment" spellcheck="true">//addWaiter代表是排他模式</span>      <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//所以这个是排他的情况下去获取锁</span></code></pre></li></ul></li><li><p><strong>总的来说 acquire方法就是三步，我先tryAcquire，哦，失败了，我再把它封装成节点，具体是排他还是共享看传入的mode，然后我把它放到同步队列尾巴去，最后阻塞它，自旋，让同步队列中当的pre节点状态置为signal后，然后阻塞自己。</strong></p></li><li><p>先看一下这个<strong>addWaiter*8方法，也就是把它放到同步队列尾。入参mode，代表模式，排他，还是共享，首先就是去给同步队列新增一个节点，让队尾成为pre，前驱节点，这里也是cas。。。我先尝试放一下，成功立马返回，不成功，那就<code>enq</code>，通过</strong>自旋**保证你这个node能加到队尾（这里不是马上自旋，大部分操作一次就能成功，自旋成本大）</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Try the fast path of enq; backup to full enq on failure</span>    Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>再看一下<strong>acquireQueued</strong>方法，用来阻塞节点（阻塞这个线程的），这个方法主要做了这么几件事，首先是通过不断自旋，尝试让自己的前一个节点的状态变为signal（就是前一个节点如果释放锁，就会通知它的下一个，也就是现在来的这个），然后阻塞自己。其次是它的前一个老兄执行完了，释放锁，会把这个node唤醒，node被唤醒会再次自旋。</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回false，表示获得锁了，true表示失败  </span>      <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//尝试自旋</span>               <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                   p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                   failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                   <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                   <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>               <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre></li><li><p>这个方法的核心是shouldParkAfterFailedAcquire，主要目的就是把前一个节点的状态置为 SIGNAL，只要前一个节点的状态是 SIGNAL， 当前节点就可以阻塞了。</p></li></ul></li></ul></li><li><p>获取共享锁–acquireShared</p><ul><li><p>他的整体流程和acquire相同，代码也是相似的，只有一点小的区别，获取锁的时候，共享锁使用的是tryAcquireShared方法</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>其次，节点获得排他锁时，是把它自己设置成同步队列头节点，但如果是共享锁的话，还会去唤醒自己后续的节点，一起来获得这把锁</p></li><li><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200219234812137.png" alt=""></p></li></ul></li></ul><h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><p>释放锁就是用<code>Lock.unLock ()</code> 方法，释放锁也是分为两类，一类是排他锁的释放，另一类是共享锁的释放。</p><ul><li><p>排他锁的释放–release</p><ul><li><p>从队头开始，找它的下一个节点，如果下一个节点是空的，就会从 尾开始，一直找到状态不是取消的节点，然后释放该节点。</p></li><li><p>release是unlock的基础方法，同样的，也是先tryRelease，先调用子类的，如果锁已经完全释放，返回true，那么就唤醒下一个节点。</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 头节点不为空，并且非初始化状态</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// 从头开始唤醒等待锁的节点</span>               <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当线程释放锁成功后，从 node 开始唤醒同步队列中的节点</span><span class="token comment" spellcheck="true">//通过唤醒机制,保证线程不会一直在同步队列中阻塞等待</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//node节点是当前释放的节点，得到他的ws</span>              <span class="token comment" spellcheck="true">//ws小于0，说明节点还没被取消，那就cas，重置它的状态</span>        <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取出这个节点的下一个节点，如果是空的，或者ws>0也就是被取消了</span>              <span class="token comment" spellcheck="true">//遇到这种情况就从队尾开始向前遍历，找到第一个ws&lt;=0的，也就是没被取消的，为啥不是从头呢。。。我也找不到。。。</span>        Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    s <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>            LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul></li><li><p>共享锁的释放–releaseShared</p><ul><li><p>他和排他锁的释放也是很相似的，首先tryReleaseShared尝试释放当前锁，然后唤醒当前节点的后续阻塞节点</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h2 id="条件队列"><a href="#条件队列" class="headerlink" title="条件队列"></a>条件队列</h2><p>为啥有了同步队列要条件队列，因为不是所有场景都是可以用一个同步队列搞定的呀，如果遇到<strong>锁+队列</strong>的场景，就需要<strong>lock+condition</strong>的配合。先用lock来决定哪些线程能够获得锁，哪些线程要去同步队列中阻塞，但是有可能出现这种情况，同步队列容量&lt;获得锁的线程的个数，那么就有一部分线程获得了锁，但是进不了同步队列，那么可以用Condition来管理这些线程，让这些线程阻塞等待，在合适的时候唤醒他们。</p><p><strong>同步队列 + 条件队列联手使用的场景，最多被使用到锁 + 队列的场景中。</strong></p><ul><li>入队列等待–await<ul><li>获得锁的线程，如果在碰到队列满或空的时候，就会阻塞住，这个阻塞就是用条件队列实现的， 这个动作我们叫做入条件队列，方法名称为 await</li></ul></li></ul><p>先欠着，下次补</p>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/21/FutureTask%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/21/FutureTask%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h1><p>JUC.Executor这个包里主要是Future接口、callable接口、executor接口、四个拒绝策略，TimeUnit，这里着重看一下这个Future接口，它有两个子类，RunnableFuture接口和ScheduleFuture接口。。下面再看吧，，Futuretask用的很多。然后再看一下Executor，因为ThreadPollExecutor也用的很多啊。</p><ul><li><p>Future，有俩儿子，RunnableFuture接口和ScheduleFuture接口，RunnableFuture接口继承了Future和Runnable。我写了个demo</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个线程池</span>        ThreadPoolExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> 0L<span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个线程任务</span>        FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"刘嘉警告：你数据库作业还没做"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行任务</span>        executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到任务的执行结果</span>        String res <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li><p>从这个demo中 可以看出，callble是帮我们做事情的，future是一个线程任务，然后通过从线程池提交线程任务，可以通过futuretask来得到任务执行的结果，这就非常好，线程实现的两种方式 实现runnable接口和继承thread，都无法告知我们具体执行结果，但是我们可以通过futuretask得到执行的结果～～。</p></li><li><p>callable，他就是一个接口，在它的call方法中，定义了这个线程要做的各种事情，callable的返回值就写在callabl&lt;&gt;这里面，用callable都是和Future结合起来一起用的啦</p></li><li><p>Futuretask，他实现了RunnableFuture接口，他就是一个线程任务。自己看源码。。本身就是Runnable，然后又实现了Future，也就是说 FutureTask 具备对任务进行管 理的功能</p></li><li><p>RunnableFuture接口，继承了Runnable接口和Future接口。里面有个run方法，其目的是让Future能够管理Runnable，咋管理呢，就是可以取消Runnable，也可以查看你有没有完成了，有没有Done</p></li><li><p>Future接口。Callable接口就是得到子线程的运行结果，然后返回，那我们怎么get到callable返回的结果呢，就是通过future啦。当然future还能取消。。。如果完成了就不能取消了，它里面有这些方法</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//取消</span><span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断有没有被取消</span><span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//干完了没</span><span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到结果，如果任务被取消了，抛前面的u一场，如果任务被打断了，抛出后面异常</span>V <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">;</span>V <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException<span class="token punctuation">;</span></code></pre></li></ul></li><li><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200219192847989.png" alt=""></p></li><li><p>FutureTask的初始化，它有两种方式初始化的，一种是传callable，不能传null，一种是传runnable，但是runnable是没有返回值的呀，所以他就要求你传个result，作为返回结果！但是这个返回结果没卵用，传个null即可。传参为runnable的构造器，会通过Executors.callable方法来把你这个runnable转成callable。但是runnable和callable都是接口，咋转化，<strong>适配器模式</strong>，它就搞了个RunnableAdapter 。。。</p><ul><li><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200219193005352.png" alt=""></li></ul></li><li><p>Future get操作源码：代码太长了自己看，首先会得到state，也就是状态，判断一下状态时啥，如果任务正在执行，那就要阻塞呗，底层用的是LockSupport.park，直接让线程进入waiting状态了，直到执行成功，返回结果。等待过程的源码太长了。。</p></li><li><p>run方法源码：这个方法没返回值的，你创建了futuretask这个任务，是可以直接run的，也可以开启新线程去跑，run的时候先判断当前任务有人有人在执行，如果有人在执行就直接返回了，run的过程中，会给outcome属性（看上上张图）赋值，赋值之后，get的时候就能从属性中拿结果了。</p></li><li><p>取消。。没什么说的</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/20/J.U.C%20Collections%E7%AE%80%E8%A6%81%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/09/20/J.U.C%20Collections%E7%AE%80%E8%A6%81%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC-Collections"><a href="#JUC-Collections" class="headerlink" title="JUC.Collections"></a>JUC.Collections</h1><p>juc集合类，主要是cow（包括数组、set），然后是concurrenthashmap，然后queue占个大头，四个queue，都是非常重要的！</p><h2 id="COW"><a href="#COW" class="headerlink" title="COW"></a>COW</h2><ul><li>底层是一个数组，用transient和volatile修饰，表示可见的，对数组的修改有四个步骤<ul><li>1、加锁，保证只有一个线程对他操作</li><li>2、拷贝数组</li><li>3、操作</li><li>4、解锁</li></ul></li><li>既然加锁了，为什么还要拷贝？因为拷贝保证了数组内部地址被修改了，这样才能触发volatile的可见性，直接在数组上修改值，没办法触发可见性，要修改内存地址。<ul><li>细说一下，单核cpu不拷贝肯定没问题，但是多核cpu。。必须要通过拷贝修改值，才能触发可见性，否则通知不了其他线程。</li></ul></li><li>插入细节是，先把元素填到位置上，再判断是不是最后一个，如果是最后一个，只需要把前面的拷贝过来即可，一次拷贝，否则，就是拷贝两次。</li><li>删除元素的时候，如果是删除单个，就是上锁、在try中删除，和插入一样，如果删除的是最后一个，直接删除，如果不是，也是拷贝两次。这个加的锁被final修饰，保证加锁过程中，锁的内存地址不被改。如果是批量删除，并不是对要删除的元素判断一下是不是，然后再删，这样成本很大，我们是把不删除的挑出来放在数组中。</li><li>cow的迭代，即使数组中原始值发生改变，也不会fast fail，因为，数组的每次变动，都不是在原数组上进行操作，而是使用新数组，不会影响老数组，迭代持有的是老数组的引用，而 CopyOnWriteArrayList 每次的数据变动，都会产生新的数组， 对老数组的值不会产生影响。</li></ul><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><ul><li>所有操作都是线程安全的，put、get、remove都能同时进行，不会阻塞，迭代过程中，即使map的结构发生改变，也不会抛出异常，map是数组+链表+红黑树，ConcurrentHashMap在这个基础上加了个<strong>转移节点</strong>，来保证扩容时线程安全。</li><li>ConcurrentHashMap和map的区别是，ConcurrentHashMap中的红黑树，TreeNode仅仅是维护属性和查找的功能，这里面加了个TreeBin来维护红黑树的结构，主要负责root的加锁、解锁。同时，ConcurrentHashMap中加了个转移节点，如果转移节点有值，表示正在扩容，那么put操作就要等待，等扩容完才能继续放，那么加入了这个转移节点，就是为了维护线程的安全</li><li><strong>put的步骤</strong><ul><li>1、来了一个key value，先判断是不是null的，是null，直接抛出异常。</li><li>2、不是null，那就继续，如果table是空的，先要初始化，然后先得到key的hash，找到它在哪个槽中，然后进入自旋死循环。</li><li>3、进入自旋死循环后，如果这个位置上没有任何键值对，那就初始化，通过<strong>cas</strong>来创建，结束自旋，如果这个位置上有值了，我先看看当前索引位置是不是转移节点，如果是转移节点，表示正在扩容，继续自旋，等扩容完再操作，如果不是转移节点，我先把这个位置锁住，被我一个线程独占，然后，判断是链表结构还是红黑树结构，链表结构的新增就和map里的新增是一样的，遍历链表，碰到一样的值直接break，否则就插到尾部，退出自旋，红黑树的新增就和map的不一样了，它没有使用treenode，而是使用了TreeBin，TreeBin持有红黑树的引用，会对红黑树的根节点加锁，保证这棵树现在只有一个线程能旋转，保证线程的安全。在链表和红黑树的新增都会改变bitCount，链表新增会把bitCount改成1，红黑树会改成2，最后会判断一下bitCount是否为0，不为0就说明新增成功了，还要判断下要不要树化。最后一步就是检查要不要扩容。</li></ul></li><li>CHM保证线程安全的三个方面！<ul><li>第一个是刚进来，table还没初始化的时候。它先通过自旋来保证初始化一定成功。初始化的时候里面有个sizeCtl，也就是size的偏移量，初始尾0，如果小于0，说明有线程正在初始化，其他线程你放开时间片吧，yield一下，如果大于0，就说明已经初始化好了。sizectl的值也是通过cas来设置的，这样保证了同一时刻只有一个线程在设置这个值，。cas完后，还会再 double check一下，所以 初始化的时候它是通过 <strong>自旋+cas+double check</strong>来保证线程安全的。</li><li>第二个是新增槽点的时候是这样的。它先看槽是不是空的，如果是空的，就通过cas新增（不能直接赋值，可能期间被人插队了，一定要通过cas）。如果槽点不是空的，它先会锁住槽点，再操作，如果是链表，就链表新增，如果是红黑树，就红黑树新增，红黑树新增也会通过TreeBin锁住根，保证这棵树现在只有一个线程能旋转。</li><li>第三个是扩容时的时候。它的扩容时机和map是一样的，都是在put完的时候扩容，但是扩容过程有区别，map直接在老数组上扩容，而CHM通过<code>addCount</code>来扩容，里面有一个<code>transfer</code>方法，他就是主要的扩容方法。它要把老数组中的节点都拷贝到新的数组中去，拷贝的时候，先把原数组中的槽点锁住，这样原数组中的值就不能被操作了，然后这个槽拷贝完，它就成为了转移节点，继续扩容下一个。它是从链表尾部拷贝到头部的，每拷贝成功一次，这个节点就变为转移节点，直到全部拷贝完，那么就是得到新的容器。</li></ul></li><li>get操作<ul><li>整体思路和hashmap的思路就是很想的，先对得到key的hashcode，然后计算它在数组中的下标，得到在哪个槽中，然后去这个槽的节点开始遍历，如果是链表就链表方式找，否则就是红黑树的方式找，红黑树还是根据hashcode找吧，左小右大。</li></ul></li></ul><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><ul><li>它是基于链表实现的阻塞队列，单向链表结构，范围是任意的，不指定容量，默认就是Integer.MAX_VALUE。新来的元素放在队列尾，拿从队头拿。他实现了Collection接口和Iterator接口，可以用它们的所有操作。</li><li>内部结构就是链表+锁+迭代器，<strong>锁设计了两把，分别为take时的锁和put时的锁，方便两个操作同时进行</strong>。链表的节点可以是任意东西，比如用于线程池，节点就是线程，被用到消息队列，节点就是消息。</li><li>初始化，可以指定容量，不指定就是最大值。</li><li>关键是新增节点操作，它有三种操作，add、offer、put，啥区别呢，用add，如果阻塞队列满了，抛出异常，用offer 如果满了时返回false，用put，这个代表如果满了就一直阻塞，直到队列有容量了，并且被唤醒时，才会去执行。放的过程是这样的，先拿到putlock，设置可中断锁，锁设置好了进入下一步，链表满了则阻塞，否则追加到链表尾部，新增成功，唤醒一个put的等待线程，下一个继续put吧，putlock释放锁，然后告诉拿的take线程，我仓库又有东西了，你来拿吧。</li><li>阻塞删除，和新增远离一样，上锁，操作，如果队列是空的，那就阻塞，直到有put线程唤醒take线程，说我有东西了你可以来拿了，最后释放锁</li></ul><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><ul><li>这玩意也是阻塞队列，但是只能放一个元素，队列也没容量，<strong>put操作放元素进去了，不能马上返回，必须等它的东西被别人消费了才能走，反过来也是一样的。</strong>SynchronousQueue内部有两种实现，队列堆栈。队列先进先出的，所以是公平的，堆栈是先进后出的，是非公平的。</li><li>初始化：这个SynchronousQueue阻塞队列初始化的时候，由于有两种实现方式，队列和堆栈，如果你不选择额，默认是 非公平的。</li><li>非公平堆栈：放的时候放栈顶，拿的时候也是从栈顶拿，所以是不公平的。SynchronousQueue的transfer是核心方法，它把put和take两个操作糅合在一起了，因为1它只有一个元素且要满足那个要求，所以只能柔和再一起搞。过程大概是这样子的：判断你这个操作是put还收take，然后判断栈空不空，判断你的操作和栈的容量是否符合，比如你拿操作，但是栈是空的肯定不符合。然后下一步就是把当前操作设置在栈头，肯定对栈头操作呀，看看其他线程能不能满足自己，不能则阻塞，比如我一个put线程，放了元素，我要等别人来拿，如果来了个put的线程，不对，阻塞一会，来了个take线程，没错兄弟就是你。如果发现再阻塞自己之前，栈头已经阻塞了，看看能不能唤醒栈头。。能唤醒栈头，则把自己作为一个节点，赋值到栈头的 match 属性上，并唤醒栈头节点。</li><li>公平队列：啥是公平的呢？公平是说，我每次put都put队尾，但是我拿，绝对不是从队头开始拿，而是找到第一个被阻塞住的线程，要按照顺序释放阻塞住的线程。比如现在队列是空的，我要往队列中去拿数据，没有数据，被阻塞住了，接下来来了个put线程，它会找到第一个被阻塞住的兄弟，然后把数据放到阻塞节点的item属性里面，然后唤醒它，被阻塞的兄弟被唤醒后，能够从它的item属性中拿到数据，开心的走了。。</li></ul><h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><ul><li>这是个无界的阻塞队列，只有延迟期满了才能拿，（比如设置延迟5秒后才能拿，那么线程就是沉睡5秒，然后再被唤醒）。该队列的头部是延迟期满后保存时间最长的 Delayed 元素。如果延迟都还没有期满，则队列没有头部。这玩意还用了很多优先队列的东西，可以根据过期时间排序，比如让先过期的先执行</li></ul><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><ul><li>看名字就知道底层是数组了，队头就是数组头，队尾就是数组尾。它肯定是有界的，并且一旦创建，不能被修改容量，数组是也有序的，这都是数组的性质，对于take和put，它提供了takeIndex和putIndex。</li><li>初始化，初始化的时候可以指定容量，也可以指定是否为公平、还是非公平的。如果是公平的，那就是顺序插入。。如果非公平，就随意插入了</li><li>增加一个数据，新增，也就是put，会有一个putIndex，put的时候也是先上锁，看看队列满不满，满了，阻塞，直到自己被唤醒，没满就可以放，那要咋放呢？如果放在队列（也就是数组）中间，那就直接插入，插入之后，putIndex+1，比如我现在放在5的位置，下一个位置就是放6，另一个，如果现在放在队尾了，下一个位置就要从对头开始了！</li><li>删除数据，也是先上锁，操作解锁，关键是中间这个操作，如果takeIndex和removeIndex相等，也就是我下次要拿的位置和你要删除的位置是一样的，那就直接吧这个要删除的位置设置为null，你takeIndex往后移，拿下一个吧，这个位置被我删了。还有一种情况，removeIndex != putIndex，我要删除的元素在我putIndex之前的之前，那么我删除元素之后，putIndex就要往前移动～，如果removeIndex +1 == putIndex，那就直接覆盖rmindex的值就可以了。。。自己画画图。</li></ul><p>下次再补</p>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/18/ConcurrentHashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/18/ConcurrentHashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><p>碰到线程不安全场景下，需要使用 Map 的时候，我们第一个想到的 API 估计就是ConcurrentHashMap，ConcurrentHashMap 内部封装了锁和各种数据结构来保证访问 Map 是线程安全的。</p><p>从类注释可以得到的信息是：</p><ul><li>所有的操作都是线程安全的</li><li>多个线程同时进行 put、remove 等操作时并不会阻塞，可以同时进行</li><li>迭代过程中，即使 Map 结构被修改，也不会抛 ConcurrentModificationException 异常</li><li>除了数组 + 链表 + 红黑树的基本结构外，新增了<strong>转移节点</strong>，是为了保证扩容时的线程安全的节点</li><li>提供了很多 Stream 流式方法，比如forEach、search、reduce 等等</li></ul><h2 id="一、结构"><a href="#一、结构" class="headerlink" title="一、结构"></a>一、结构</h2><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191216111445298.png" alt=""></p><p>ConcurrentHashMap 和 HashMap </p><p>相同之处</p><ul><li>数组和链表的结构几乎一样，两个map对底层的操作思路是一样的，但是实现不一样。</li><li>它们都实现了map接口，都继承了AbstractMap类，大多数方法都是相同的，我们需要把HashMap切换到ConcurrentHashMap也不需要考虑太多的兼容性问题。</li></ul><p>不同之处</p><ul><li>红黑树结构不同。HashMap红黑树的节点叫TreeNode，维护着红黑树的结构，比如新增节点、查找节点；ConcurrentHashMap中红黑树被拆分了，TreeNode仅维护属性和查找节点功能，<strong>并且新增了TreeBin，用来维护红黑树的结构，负责root的加锁和解锁。</strong></li><li>新增ForwardingNode，转移节点，扩容时，通过这个节点保证线程的安全。</li><li>各种操作过程不是很相同</li></ul><h2 id="二、put操作"><a href="#二、put操作" class="headerlink" title="二、put操作"></a>二、put操作</h2><p>put是面试中的重中之重。在线程安全方面加入了一些代码。</p><p>首先了解一下</p><p>synchronized是悲观锁，这种线程一旦得到锁，其他需要锁的线程就挂起的情况就是悲观锁。</p><p>CAS是英文单词Compare And Set的缩写，翻译过来就是比较并设置。CAS操作的就是乐观锁，每次不加锁，而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。</p><p>参考<a href="https://www.jianshu.com/p/ae25eb3cfb5d" target="_blank" rel="noopener">博客</a></p><p>put步骤：</p><ul><li>如果table数组是空的，则初始化，否则就直接进入下一步</li><li>根据key计算出hash值，找到槽点位置（也就是数组中的某个位置），进入自旋死循环！</li><li>如果这个位置上没有值，通过cas来创建</li><li>如果这个位置上有值，判断是不是在转移节点上（就是判断是不是正在扩容），如果在，则需要等待扩容结束</li><li>在这个槽点上，先锁住这个槽点，保证只有一个线程进来了，再判断是链表还是红黑树，用各自的方法新增，红黑树的新增也改了，要锁住根节点</li><li>新增完成后再判断下要不要扩容，这个是扩容的时机，和HashMap是一样的，但是扩容过程不一样</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null <span class="token operator">||</span> value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//计算key的hash</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//table是空的，进行初始化</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//如果当前索引位置没有值，直接创建</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//cas 在 i 位置创建新的元素，当 i 位置是空时，即能创建成功，结束for循环，否则继续自旋</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                             <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// no lock when adding to empty bin</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//MOVED是转移节点的hash值，是一个固定的值</span>            <span class="token comment" spellcheck="true">//如果当前索引位置是转移节点(MOVED)，表示该位置正在扩容，就会一直等待扩容完成</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>                tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//如果该位置上有值了</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                V oldVal <span class="token operator">=</span> null<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//先把数组的节点node f锁住，其余线程不能操作</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">//这里再次判断 i 索引位置的数据没有被修改</span>                      <span class="token comment" spellcheck="true">//binCount 被赋值的话，说明走到了修改表的过程里面</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment" spellcheck="true">//链表的情况</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                K ek<span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//值有的话，直接返回</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                     <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                        e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//把新增的元素赋值到链表的最后，退出自旋</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                              value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                          <span class="token comment" spellcheck="true">//红黑树的情况，这里没有使用 TreeNode,使用的是 TreeBin</span>                          <span class="token comment" spellcheck="true">//TreeBin 持有红黑树的引用，并且会对其加锁，保证其操作的线程安全</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>                            binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//putTreeVal方法里面，给红黑树重新着色旋转时，会锁住红黑树的根节点</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                           value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  <span class="token comment" spellcheck="true">//满足if的话，把老的值给oldVal</span>                                oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                  <span class="token comment" spellcheck="true">//binCount不为空，并且 oldVal 有值的情况，说明已经新增成功了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 链表是否需要转化成红黑树</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//check 容器是否需要扩容，如果需要去扩容，调用 transfer 方法去扩容</span>          <span class="token comment" spellcheck="true">//如果已经在扩容中了，check有无完成</span>        <span class="token function">addCount</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ConcurrentHashMap 在 put 过 程中，采用了哪些手段来保证线程安全。</p><h3 id="（1）数组初始化时的线程安全"><a href="#（1）数组初始化时的线程安全" class="headerlink" title="（1）数组初始化时的线程安全"></a>（1）数组初始化时的线程安全</h3><p>看一下initTable的源码</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//初始化 table，通过对 sizeCtl 的变量赋值来保证数组只能被初始化一次</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//通过自旋保证初始化成功</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 小于 0 代表有线程正在初始化，释放当前 CPU 的调度权，重新发起锁的竞争</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lost initialization race; just spin</span>              <span class="token comment" spellcheck="true">// CAS 赋值保证当前只有一个线程在初始化，-1 代表当前只有一个线程能初始化</span>              <span class="token comment" spellcheck="true">// 保证了数组的初始化的安全性</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//CAS成功后再次判断有没有初始化完成</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 很有可能执行到这里的时候，table 已经不为空了，这里是双重 check</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment" spellcheck="true">// 进行初始化</span>                        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> DEFAULT_CAPACITY<span class="token punctuation">;</span>                        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                        table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>                        sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tab<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>数组初始化时，首先通过自旋来保证一定可以初始化成功，然后通过 CAS 设置 sizeCtl 变量的值，来保证同一时刻只能有一个线程对数组进行初始化，CAS 成功之后，还会再次判断当前数组是否已经初始化完成，如果已经初始化完成，就不会再次初始化，<strong>通过自旋 + CAS + 双重 check</strong> 等手段保证了数组初始化时的线程安全。</p><p>sizeCtl：默认为0,sizeCtl中记录size大小的偏移量，用来控制table的初始化和扩容操作.它的数值有以下含义</p><ul><li>-1 :代表table正在初始化,其他线程应该交出CPU时间片,退出</li><li>-N: 表示正有N-1个线程执行扩容操作</li><li>&gt;0: 如果table已经初始化,代表table容量,默认为table大小的0.75,如果还未初始化,代表需要初始化的大小</li></ul><h3 id="（2）新增槽点时的线程安全"><a href="#（2）新增槽点时的线程安全" class="headerlink" title="（2）新增槽点时的线程安全"></a>（2）新增槽点时的线程安全</h3><ul><li><p>通过自旋死循环保证一定可以新增成功，<code>for (Node&lt;K,V&gt;[] tab = table;;)</code></p></li><li><p>当前槽点为空时，通过 CAS 新增</p><ul><li>这里没有在判断槽点为空的情况下直接赋值，因为在判断槽点为空和赋值的瞬间，很有可能槽点已经被其他线程赋值了，所以我们采用 CAS 算法，能够保证槽点为空的情况下赋值成功，如果恰好槽点已经被其他线程赋值，当前 CAS 操作失败，会再次执行 for 自旋，再走槽点有值的 put 流程。</li></ul></li><li><p>当前槽点有值，锁住当前槽点</p><ul><li><p>就是发生hash冲突的时候，此时数组上这个槽点，可能是链表、可能是红黑树，通过锁住槽点，保证同一时刻只有一个线程能对这个槽点进行修改。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191216131108032.png" alt=""></p></li></ul></li><li><p>红黑树旋转时，锁住红黑树的根节点，保证同一时刻，当前红黑树只能被一个线程旋转</p><ul><li><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191216131213850.png" alt=""></li></ul></li></ul><h3 id="（3）扩容时的线程安全"><a href="#（3）扩容时的线程安全" class="headerlink" title="（3）扩容时的线程安全"></a>（3）扩容时的线程安全</h3><p>ConcurrentHashMap 的扩容时机和 HashMap 相同，都是在 put 方法的最后一步检查是否需要扩容，但两者扩容过程完全不同。ConcurrentHashMap中put最后一步就是addCount方法，其中有一个transfer方法，它就是扩容方法。主要思路是：</p><ul><li><p>先把老数组中的值拷贝到扩容后的新数组上，从<strong>数组的尾巴</strong>开始拷贝</p></li><li><p>拷贝数组的槽点时，先把原数组槽点锁住，保证原数组槽点不能操作，成功拷贝到新数组时，把原数组槽点赋值为转移节点</p></li><li><p>这时如果有新数据正好需要 put 到此槽点时，发现槽点为转移节点，就会一直等待，所以在扩容完成之前，该槽点对应的数据是不会发生变化的</p></li><li><p>从数组的尾部拷贝到头部，每拷贝成功一次，就把原数组中的节点设置成转移节点</p></li><li><p>所有数组数据都拷贝到新数组时，直接把新数组整个赋值给数组容器，结束</p></li></ul><p>通过在原数组上设置转移节点，put 时碰到转移节点时会等待扩容成 功之后才能 put 的策略，来保证了整个扩容过程中肯定是线程安全的，因为数组的槽点一旦被 设置成转移节点，在没有扩容完成之前，是无法进行操作的。</p><p>ps：一开始我看的时候没看明白，这个意思是，把一个槽点拷贝完后，设置为转移节点，那就说明数组正在扩容，还没拷贝完，需要继续等待，如果这个槽点不是转移节点，那可以put，put完在拷贝到新数组上就可以了</p><h2 id="三、get操作"><a href="#三、get操作" class="headerlink" title="三、get操作"></a>三、get操作</h2><p>读的话，就比较简单，先获取数组的下标，然后通过判断数组下标的 key 是否和我们的 key 相等，相等的话直接返回，如果下标的槽点是链表或红黑树的话，分别调用相应的查找数据的方法，整体思路和 HashMap 很像</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> K ek<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//计算键的hashcode</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//不是空的数组 &amp;&amp; 并且当前索引的槽点数据不是空的，否则该key对应的值不存在，返回null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//槽点第一个值和key相等，直接返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">//如果是红黑树或者转移节点，使用对应的find方法</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> null<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//如果是链表，遍历查找</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="四、问题"><a href="#四、问题" class="headerlink" title="四、问题"></a>四、问题</h2><p><strong>（1）ConcurrentHashMap 和 HashMap 的相同点和不同点</strong></p><blockquote><p>相同点</p><ul><li>都是数组 + 链表 +红黑树的数据结构，所以基本操作的思想相同，具体实现有所差别</li><li>都实现了Map接口，都继承了AbstractMap类，方法差不多相似</li></ul><p>不同点</p><ul><li>前者线程安全，后者作为共享变量线程不安全</li><li>数据结构上，HashMap用的是TreeNode，ConcurrentHashMap新增了TreeBin，以及转移节点，导致内部实现上有较大差别</li></ul></blockquote><p><strong>（2）ConcurrentHashMap 通过哪些手段保证了线程安全。</strong></p><blockquote><ul><li>储存 Map 数据的数组被 volatile 关键字修饰，一旦被修改，立马就能通知其他线程</li><li>put时用的是无限死循环+cas算法来保证一定新增成功，如果put的时候，这个hash值正好是转移节点，会等扩容完毕再push，保证老数组的值不会变</li><li>对数组槽点操作，会先锁住，然后再对链表或红黑树操作，对红黑树操作时也会锁住根节点，保证旋转时的线程安全。</li></ul></blockquote><p><strong>（3）ConcurrentHashMap 是如何发现当前槽点正在扩容的。</strong></p><blockquote><p>ConcurrentHashMap 新增了一个节点类型，叫做转移节点，当我们发现当前槽点是转移节点时(其 hash 值是 -1)，即表示 Map 正在进行扩容。</p></blockquote><p><strong>（4）描述一下 CAS 算法在 ConcurrentHashMap 中的应用?</strong></p><blockquote><p><a href="https://www.jianshu.com/p/ae25eb3cfb5d" target="_blank" rel="noopener">https://www.jianshu.com/p/ae25eb3cfb5d</a></p><p>CAS 其实是一种乐观锁，一般有三个值，分别为:赋值对象，原值，新值，在执行的时 候，会先判断内存中的值是否和原值相等，相等的话把新值赋值给对象，否则赋值失败，整个过 程都是原子性操作，没有线程安全问题。</p><p>put 方法中，有使用到 CAS ，是结合无限 for 循环一起使用的，其步骤是</p><ul><li><p>首先计算出数组索引的下标，拿出下标对应的原值</p></li><li><p>CAS 覆盖当前下标的值，赋值时，如果发现内存值和 1 拿出来的原值相等，执行赋值，退出</p><p>循环，否则不赋值，进行下一次for循环</p></li></ul></blockquote><p><strong>（5）两种 Map 扩容时，有啥区别?</strong></p><blockquote><p>HashMap 是直接在老数据上面进行扩容，ConcurrentHashMap 就不太一样，扩容过程是这样的：</p><ul><li>从数组的队尾开始拷贝</li><li>拷贝数组的槽点时，先把原数组槽点锁住，拷贝成功到新数组时，把原数组槽点赋值为转移节点</li><li>从数组的尾部拷贝到头部，每拷贝成功一次，就把原数组的槽点设置成转移节点，这样就把每一个槽点拷贝过来了</li><li>所有数组数据都拷贝到新数组时，直接把新数组整个赋值给数组容器，拷贝完成</li></ul><p>简单来说，<strong>通过扩容时给槽点加锁，和发现槽点正在扩容就等待的策略</strong>，保证了 ConcurrentHashMap 可以慢慢地一个一个槽点的转移，保证了扩容时的线程安全</p></blockquote><p><strong>（6）ConcurrentHashMap 在 Java 7 和 8 中关于线程安全的做法有啥不同?</strong></p><blockquote><p>拿 put 方法为例，Java 7 的做法是:</p><ul><li>把数组进行分段，找到当前 key 对应的是那一段</li><li>将当前段锁住，然后再根据 hash 寻找对应的值，进行赋值操作</li></ul><p>Java 7 的做法比较简单，缺点也很明显，就是当我们需要 put 数据时，我们会锁住改该数据对 应的某一段，这一段数据可能会有很多，比如我只想 put 一个值，锁住的却是一段数据，导致这一段的其他数据都不能进行写入操作，大大的降低了并发性的效率</p></blockquote><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/17/CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/17/CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h1><p>并发容器，是一种线程安全的list，它具有以下特征：</p><ul><li><p>线程安全的，多线程环境下可以直接使用，无需加锁</p></li><li><p><strong>通过锁 + 数组拷贝 + volatile 关键字保证了线程安全</strong></p></li><li><p>每次数组操作，都会把数组拷贝一份出来，在新数组上进行操作，操作成功之后再赋值回去 cas</p></li></ul><h2 id="一、整体结构"><a href="#一、整体结构" class="headerlink" title="一、整体结构"></a>一、整体结构</h2><p>整体架构和ArrayList一致，底层是个数组，这个数组是被volatile修饰的，保证了可见性，一旦数组被修改，其他线程能立马感知到。数组虽然有拷贝的成本，但是比其他线程安全的代替方案效率更高（注释上这么说的）。并且在迭代过程中，也不会影响到原来的数组，不会抛出ConcurrentModificationException异常。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span></code></pre><p>transient关键字是来防止对象被序列化：<a href="https://www.cnblogs.com/lanxuezaipiao/p/3369962.html" target="_blank" rel="noopener">https://www.cnblogs.com/lanxuezaipiao/p/3369962.html</a></p><p>在操作它时，大概有四步：</p><ul><li>加锁（保证同一时刻数组只有一个线程在操作数组）</li><li>拷贝原数组，长度+1（拷贝是为了保证数组内存地址被修改，才能触发volatile的可见性）</li><li>在新数组上进行操作，并把新数组赋值给数组容器</li><li>解锁</li></ul><h2 id="二、新增"><a href="#二、新增" class="headerlink" title="二、新增"></a>二、新增</h2><p>新增有很多种情况，比如说:新增到数组尾部、新增到数组某一个索引位置、批量新增等等</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 添加元素到尾部</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//加锁</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//获取原数组</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//拷贝</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//对最后一个位置赋值</span>            newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//替换原数组</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//解锁，保证即使 try 发生了异常，仍然能够释放锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>有一个问题是，既然都加锁了，为什么还需要创建新数组，再赋值，再替换呢，不能能直接在原数组上操作吗？原因是：</p><ul><li>volatile 关键字修饰的是数组，简单的在原来数组上修改某几个元素的值，是无无法触发可见性的，必须<strong>通过改数组内存的地址，才能触发可见性</strong>，也就是说要对数组重新赋值。</li></ul><p>下面是在指定位置添加元素的源码：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// len:数组的长度、index:插入的位置</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> len <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token operator">+</span>index<span class="token operator">+</span>                                                    <span class="token string">", Size: "</span><span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements<span class="token punctuation">;</span>            <span class="token keyword">int</span> numMoved <span class="token operator">=</span> len <span class="token operator">-</span> index<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果要插入的位置正好等于数组的末尾，直接拷贝数组即可</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果要插入的位置在数组的中间，就需要拷贝 2 次</span>              <span class="token comment" spellcheck="true">// 第一次从 0 拷贝到 index。</span>              <span class="token comment" spellcheck="true">// 第二次从 index+1 拷贝到末尾。</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index<span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                 numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            newElements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>从源码中可以看到，当插入的位置正好处于末尾时，只需要拷贝一次，当插入的位置处于中间时，此时我们会把原数组一分为二，进行两次拷贝操作。</p><p>add系列方法，加锁，拷贝（改变内存地址触发volatile可见性）</p><h2 id="三、删除"><a href="#三、删除" class="headerlink" title="三、删除"></a>三、删除</h2><p>根据index来删除</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 删除某个索引位置的数据</span>        <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 加锁</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 获取原数组及其长度</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 要删除的值</span>            E oldValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> numMoved <span class="token operator">=</span> len <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果要删除的数据正好是数组的尾部，直接删除</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">setArray</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果删除的数据在数组的中间，分三步走</span>              <span class="token comment" spellcheck="true">// 1. 设置新数组的长度减一</span>              <span class="token comment" spellcheck="true">// 2. 从 0 拷贝到数组新位置</span>              <span class="token comment" spellcheck="true">// 3. 从新位置拷贝到数组尾部</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                                 numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>锁 + try finally +数组拷贝，锁被 final 修饰的，保证了在加锁过程中，锁的内存地址肯定不会被改，finally 保证锁一定能够被释放</p><p>批量删除源码</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 批量删除包含在 c 中的元素</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 说明数组有值，数组无值直接返回 false</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// newlen 表示新数组的索引位置，新数组中存在不包含在 c 中的元素</span>                <span class="token keyword">int</span> newlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                Object<span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 循环，把不包含在 c 里面的元素，放到新数组中</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Object element <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>                        temp<span class="token punctuation">[</span>newlen<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                  <span class="token comment" spellcheck="true">// 拷贝新数组，变相的删除了不包含在 c 中的元素</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newlen <span class="token operator">!=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setArray</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> newlen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们并不会直接对数组中的元素进行挨个删除，而是先对数组中的值进行判断，把不需要删除的数据放到临时数组中，最后拷贝临时数组中的数据即可。ArrayList的批量删除也是这个思想，如果要删除多个元素，不要单个单个删除，单个删除每次都会进行一次拷贝，有性能损耗。（详细看11、集合源码、集合性能。）</p><h2 id="四、查找"><a href="#四、查找" class="headerlink" title="四、查找"></a>四、查找</h2><p>indexOf，查找元素在数组中的下标位置，如果元素存在就返回元素的下标位 置，元素不存在的话返回 -1，不但<strong>支持 null 值的搜索</strong>，还支持正向和反向的查找，以正向查找为例</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// o:我们需要搜索的元素,elements:搜索的目标数组,index:搜索的开始位置,fence:搜索的结束位置</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> fence<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 支持对 null 的搜索</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// 找到第一个 null 值，返回下标索引的位置</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// 通过 equals 方法来判断元素是否相等</span>                  <span class="token comment" spellcheck="true">// 如果相等，返回元素的下标位置</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="五、迭代"><a href="#五、迭代" class="headerlink" title="五、迭代"></a>五、迭代</h2><p>在 CopyOnWriteArrayList 类注释中，明确说明了，在其迭代过程中，即使数组的原值被改变，也不会抛出 ConcurrentModificationException 异常，其根源在于数组的每次变动，都不是在原数组上进行操作，而是使用新数组，不会影响老数组（然后再拷贝，使得内存地址发生改变，触发了volatile可见性）这样的话，迭代过程中，根本就不会发生迭代数组的变动（因为老数组）没动。</p><p>迭代持有的是老数组的引用，而 CopyOnWriteArrayList 每次的数据变动，都会产生新的数组， 对老数组的值不会产生影响。</p>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/15/HashSet%E5%92%8CTreeSet%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/15/HashSet%E5%92%8CTreeSet%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="HashSet与TreeSet"><a href="#HashSet与TreeSet" class="headerlink" title="HashSet与TreeSet"></a>HashSet与TreeSet</h1><p>HashSet、TreeSet 两个类是在 Map 的基础上组装起来的类，学习的侧重点，主要在于 Set 是如何利用 Map 现有的功能，来达成自己的目标的。</p><h2 id="一、HashSet"><a href="#一、HashSet" class="headerlink" title="一、HashSet"></a>一、HashSet</h2><h3 id="1、类注释"><a href="#1、类注释" class="headerlink" title="1、类注释"></a>1、类注释</h3><p>看源码先看类注释上，我们可以得到的信息有:</p><ul><li>底层实现基于 HashMap，所以迭代时不能保证按照插入顺序，或者其它顺序进行迭代</li><li>add、remove、contanins、size 等方法的耗时性能，是不会随着数据量的增加而增加的，这是和HashMap的底层数据结构有关，不管数据量有多大，不考虑hash冲突情况，时间复杂度都是O(1)</li><li>线程不安全的</li><li>迭代过程中，如果数据结构被改变，会快速失败的，会抛出ConcurrentModificationException 异常。</li></ul><p>后面3点是List、Map、Set的共同点。</p><h3 id="2、HashSet如何利用HashMap"><a href="#2、HashSet如何利用HashMap" class="headerlink" title="2、HashSet如何利用HashMap"></a>2、HashSet如何利用HashMap</h3><p>HashSet 的实现是基于 HashMap 的，在 Java 中，要基于基础类进行创新实现，有两种办法</p><ul><li>继承基础类，覆写基础类的方法</li><li>组合基础类，通过调用基础类的方法，来复用基础类的能力。</li></ul><p>HashSet是把HashMap组合进来的</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 把 HashMap 组合进来，key 是 Hashset 的 key，value 是下面的 PRESENT</span><span class="token keyword">private</span> <span class="token keyword">transient</span> HashMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// HashMap 中的 value</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>为什么要用组合呢？</strong>（从继承和组合两个角度回答）</p><ul><li>继承表示父子类是同一个事物，而 Set 和 Map 本来就是想表达两种事物，所以继承不妥，并且java只能单继承，后续很难扩展</li><li>组合更加灵活，可以任意的组合现有的基础类，并且可以在基础类方法的基础上进行扩展</li><li>工作中也是多用组合，少用继承</li></ul><p><strong>从代码中可以得到的信息是</strong></p><ul><li>使用 HashSet 时，比如 add 方法，只有一个入参，但组合的 Map 的 add 方法却有 key，value 两个入参，相对应上 Map 的 key 就是我们 add 的入参，value 就是第二行代码，中的 PRESENT，此处设计非常巧妙，用一个默认值 PRESENT 来代替 Map 的 Value；<strong>看下面代码，set的add方法实际上就是添加key的过程，而value使用的是自定义的默认值。</strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h3><p>HashSet 的初始化就是直接 new HashMap ，比较有意思的是，当有原始集合数据进行初始化的情况下，会对 HashMap 的初始容量进行计算，源码如下：</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>Math.max ((int) (c.size ()/.75f) + 1, 16)</code>，就是对 HashMap 的容量进行了计 算，翻译成中文就是取括号中两个数的最大值(期望的值 / 0.75+1，默认值 16)</p><ul><li>如果给定 HashMap 初始容量小于 16 ，就按照 HashMap 默 认的 16 初始化好了，如果大于 16，就按照给定值初始化。</li><li>HashMap 扩容的伐值的计算公式是:Map 的容量 * 0.75f，一旦达到阀值就会扩容</li></ul><p>同时这种写法，也提供了一种思路给我们，如果有人问你，往 HashMap 拷贝大集合时，如何给 HashMap 初始化大小时，完全可以借鉴这种写法:取最大值(期望的值 / 0.75 + 1，默认 值 16)。</p><h2 id="二、TreeSet"><a href="#二、TreeSet" class="headerlink" title="二、TreeSet"></a>二、TreeSet</h2><p>TreeSet 底层组合的是 TreeMap，所以有 TreeMap key 能够排序的功能，迭代的时候，也可以按照 key 的排序顺序进行迭代</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>复用 TreeMap 时，复用有两种思路：</p><p>思路一：TreeSet 的 add 方法，底层直接使用的是 HashMap 的 put 的能力</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>思路二：需要迭代 TreeSet 中的元素，那应该也是像 add 那样，直接使用 HashMap 已有的迭 代能力，比如像下面这样:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模仿思路一的方式实现</span><span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">descendingIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 直接使用 HashMap.keySet 的迭代能力 </span>  <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种是思路一的实现方式，TreeSet 组合 TreeMap，直接选择 TreeMap 的底层能力进行包 装，但 TreeSet 实际执行的思路却完全相反，TreeSet 本身已经定义了迭代的规范，源码如下</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// NavigableSet 接口，定义了迭代的一些规范，和一些取值的特殊方法 </span><span class="token comment" spellcheck="true">// TreeSet 实现了该方法，也就是说 TreeSet 本身已经定义了迭代的规范 </span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NavigableSet</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">SortedSet</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        E <span class="token function">lower</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// m.navigableKeySet() 是 TreeMap 写了一个子类实现了 NavigableSet接口，实现了 TreeSet 定义的迭代规范</span><span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//，让 TreeMap 去实现自己定义的规范</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">navigableKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191214165855896-3423843.png" alt=""></p><p>总结下 TreeSet 组合 TreeMap 实现的两种思路：</p><ul><li>TreeSet 直接使用 TreeMap 的某些功能，自己包装成新的 api，<strong>自己实现</strong></li><li>TreeSet 定义自己想要的 api，自己定义接口规范，<strong>让 TreeMap 去实现</strong>。</li></ul><p>这两个方式都是TreeSet调用TreeMap，第一种是功能的定义和实现都在 TreeMap，TreeSet 只是简单的调用而已，第二种是TreeSet把规范结构定义出来了，让让 TreeMap 去实现，TreeSet只要往外吐出结果就可以，都不用包装。</p><p><strong>为什么要有这两种复用思路？</strong></p><ul><li>像 add 这些简单的方法，没有复杂逻辑，直接调用TreeMap的自己实现</li><li>另一种是复杂场景下，TreeSet不太清楚TreeMap的底层逻辑是什么，这时候不如让TreeSet定义接口规范，让TreeMap来负责实现，因为TreeMap对底层比较清楚。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/14/LinkedHashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/14/LinkedHashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h1><p>HashMap 是无序的，TreeMap 可以按照 key 进行排序，LinkedHashMap是可以维护插入顺序的，它本身继承HashMap，拥有HashMap的所有特性。除了可以维护插入顺序以外，实现了访问最少最先删除功能，其目的是把很久都没有访问的 key 自动删除。</p><h2 id="一、LinkedHashMap的新增属性"><a href="#一、LinkedHashMap的新增属性" class="headerlink" title="一、LinkedHashMap的新增属性"></a>一、LinkedHashMap的新增属性</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//链表头与尾巴</span><span class="token keyword">transient</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> head<span class="token punctuation">;</span><span class="token keyword">transient</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * HashMap.Node subclass for normal LinkedHashMap entries.     * 继承了Node，为数组的每个元素添加了before与after属性     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>        <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//控制两种访问模式的字段</span><span class="token comment" spellcheck="true">//true是按照访问顺序，会把经常访问的key放到队尾</span><span class="token comment" spellcheck="true">//false 按照插入顺序提供访问（初始化时是false）</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">;</span></code></pre><p>LinkedHashMap 的数据结构很像是把 LinkedList 的每个元素换成了 HashMap 的 Node，像是两者的结合体，也正是因为增加了这些结构，从而能把 Map 的元素都串联起来，形成一个链表，而链表就可以保证顺序了，就可以维护元素插入进来 的顺序。</p><h2 id="二、如何按照顺序新增"><a href="#二、如何按照顺序新增" class="headerlink" title="二、如何按照顺序新增"></a>二、如何按照顺序新增</h2><p>初始化时，默认 accessOrder 为 false，就是会按照插入顺序提供访问，插入方法使用的是父类HashMap 的 put 方法，不过覆盖了 put 方法执行中调用的 newNode/newTreeNode 和 afterNodeAccess 方。</p><p>newNode/newTreeNode 方法，控制新增节点追加到链表的尾部，这样每次新节点都追加到尾部，即可保证插入顺序了，要注意的是节点具有before与after属性，以 newNode 源码为例</p><pre class=" language-java"><code class="language-java">    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span>              <span class="token comment" spellcheck="true">//new一个新的节点出来</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//追加到链表的尾部</span>        <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// link at the end of list p是新增节点</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> last <span class="token operator">=</span> tail<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//让新增加点=尾节点</span>        tail <span class="token operator">=</span> p<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">///如果尾节点是空的，说明链表是空的，首尾节点一样，否则就让它变成尾节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>            head <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>            last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="三、如何按照顺序访问"><a href="#三、如何按照顺序访问" class="headerlink" title="三、如何按照顺序访问"></a>三、如何按照顺序访问</h2><p>LinkedHashMap 只提供了单向访问，即按照插入的顺序从头到尾进行访问，不能像 LinkedList 那样可以双向访问。主要通过迭代器进行访问，迭代器初始化的时候，默认从头节点开始访问，在迭代的过程中，不断访问当前节点的 after 节点即可。</p><p>Map 对 key、value 和 entity(节点) 都提供出了迭代的方法，假设我们需要迭代 entity，就可使 用 LinkedHashMap.entrySet().iterator()</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashIterator</span> <span class="token punctuation">{</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> current<span class="token punctuation">;</span>        <span class="token keyword">int</span> expectedModCount<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//初始化，默认从头节点开始访问</span>        <span class="token function">LinkedHashIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//头节点作为第一个节点</span>            next <span class="token operator">=</span> head<span class="token punctuation">;</span>            expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            current <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> next <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//nextNode</span>        <span class="token keyword">final</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> next<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//校验版本号</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//如果下一个节点为空，抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//准备下一个节点</span>            current <span class="token operator">=</span> e<span class="token punctuation">;</span>            next <span class="token operator">=</span> e<span class="token punctuation">.</span>after<span class="token punctuation">;</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="四、LRU算法"><a href="#四、LRU算法" class="headerlink" title="四、LRU算法"></a>四、LRU算法</h2><p>LinkedHashMap实现了访问最少最先删除功能，其目的是把很久都没有访问的 key 自动删除。这种策略叫做LRU（Least recently used，最近最少使用），其实现思路是，把经常访问的元素追到到队尾，这样不经常访问的就靠近了队头，我们可以设置删除的策略，比如map元素大于多少个时，就把头节点删除。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//这是removeEldestEntry方法</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们可以自定义实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造方法，初始化容量，负载因子，是否按照插入顺序访问，true则是实现lru算法，false则按照插入顺序访问</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//重写removeEldestEntry</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//我们设定当节点个数大于 3 时，就开始删除头节点</span>                <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用map.get(9),9就被放到了链表尾</span>        Integer integer <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> it2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> next <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>初始化结果，只有三个了<span class="token number">9</span><span class="token operator">:</span><span class="token number">9</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">20</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>调用map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9</span>就被放到了链表尾<span class="token number">20</span><span class="token operator">:</span><span class="token number">20</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token number">9</span><span class="token operator">:</span><span class="token number">9</span></code></pre><p>我们放进去四个元素，但结果只有三个元素，10 不见了，这 个主要是因为我们覆写了 removeEldestEntry 方法，我们实现了如果 map 中元素个数大于 3 时，我们就把队头的元素删除，当 put(1, 1) 执行的时候，正好把队头的 10 删除。</p><p>为什么调用get，元素会被移动到队尾，看下源码</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果为true，也就是启用LRU策略</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//就把这个key移动到队尾</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// move node to last</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>last <span class="token operator">=</span> tail<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span>                <span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">,</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">,</span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>            p<span class="token punctuation">.</span>after <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span>                head <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">else</span>                b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null<span class="token punctuation">)</span>                a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">else</span>                last <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>                head <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>                last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tail <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="五、删除策略"><a href="#五、删除策略" class="headerlink" title="五、删除策略"></a>五、删除策略</h2><p>我们选择使用LRU算法，在9.4中去执行put时，发现队头的元素被删除了，由于LinkedHashMap调用的是HashMap的put方法，它自己是没有put的，队头能够删除是因为LinkedHashMap实现了put方法中的 afterNodeInsertion 这个方法，通过自己的afterNodeInsertion来实现删除，源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 删除很少被访问的元素，被 HashMap 的 put 方法所调用</span><span class="token keyword">void</span> <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// possibly remove eldest</span>              <span class="token comment" spellcheck="true">// 得到元素头节点</span>        LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//如果链表不为空，且用removeEldestEntry来控制删除策略</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>evict <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            K key <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//删除头节点</span>            <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/13/TreeMap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/13/TreeMap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h1><p>TreeMap 底层的数据结构就是红黑树。TreeMap 利用了红黑树左节点小，右节点大的性质，根据 key 进行排序，使每个元素能够插入到红黑树大小适当的位置，维护了 key 的大小关系，适用于 key 需要排序的场景。因为底层使用的是红黑树的结构（平衡树），所以 containsKey、get、put、remove 等方法的时间 复杂度都是 log(n)。</p><p>在讲TreeMap之前，了解下Comperable接口与Comparator比较器这两种排序方式。Comperable接口中有一个CompareTo方法，需要排序的类要实现这个接口重写这个方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另一个是比较器Comparator，可以自定义比较器来比较。</p><h2 id="一、常见属性"><a href="#一、常见属性" class="headerlink" title="一、常见属性"></a>一、常见属性</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自带的比较器，如果外部有传进来比较器，优先用外部的</span><span class="token keyword">private</span> <span class="token keyword">final</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> comparator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//红黑树的根</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//红黑树已有元素个数</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//版本号修改次数</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//红黑树的节点</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> left<span class="token punctuation">;</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> right<span class="token punctuation">;</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> parent<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span></code></pre><h2 id="二、新增节点"><a href="#二、新增节点" class="headerlink" title="二、新增节点"></a>二、新增节点</h2><ul><li>第一步，判断红黑树的根节点是不是空的，是空的则要创建根节点，并且key不能为null</li><li>第二步，根据红黑树左小右大的特性，找到新增节点的父节点（这边要判断有没有外部比较器），如果已经存在，就是值相等，就直接覆盖</li><li>第三步，找到父节点之后就是插入，相等的情况就在第二步中处理</li><li>第四步，对红黑树进行着色旋转，达到平衡</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> t <span class="token operator">=</span> root<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//1、如果根是空的，就new一个出来，size++，修改版本号（这边限制了key不能为null）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// type (and possibly null) check</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cmp<span class="token punctuation">;</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> parent<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据红黑树左小右大的特性，找到新增节点的父节点</span>        Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> cpr <span class="token operator">=</span> comparator<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果有外部比较器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cpr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 自旋找到key应该新增的位置</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//一次循环结束时，parent 就是上次比过的对象</span>                parent <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 通过 compare 来比较 key 的大小</span>                cmp <span class="token operator">=</span> cpr<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//key 小于 t，把 t 左边的值赋予 t，因为红黑树左边的值比较小，循环再比</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    t <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//key 大于 t，把 t 右边的值赋予 t，因为红黑树右边的值比较大，循环再比</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                    t <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果相等的话，直接覆盖原值</span>                <span class="token keyword">else</span>                    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// t 为空，说明已经到叶子节点了</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//如果没有外部比较器</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> k <span class="token operator">=</span> <span class="token punctuation">(</span>Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span><span class="token punctuation">)</span> key<span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                parent <span class="token operator">=</span> t<span class="token punctuation">;</span>                cmp <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    t <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                    t <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// cmp 代表最后一次对比的大小，小于 0 ，代表 e 在上一节点的左边</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 代表 e 在上一节点的右边，相等的情况第二步已经处理</span>        <span class="token keyword">else</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>TreeMap的查找与HashMap类似</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/12/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/12/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap源码解读"><a href="#HashMap源码解读" class="headerlink" title="HashMap源码解读"></a>HashMap源码解读</h1><p>JDK 1.7中使用的是数组+链表，就是大学里数据结构课本上的那种实现</p><p>JDK 1.8中，HashMap底层的数据结构是：数组+链表+红黑树。其中当链表的长度大于等于 8 时，链表会转化成红黑树，当红黑树的大小小于等于 6 时，红黑树会转化成链表，整体的数据结构如下:</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305234952852.png" alt=""></p><p>图中左边竖着的是 HashMap 的数组结构，数组的元素可能是单个 Node，也可能是个链表， 也可能是个红黑树</p><p>换一张图，HashMap内部的结构，它可以看作是数组(Node[] table)和链表结合组成的复合结构，数组被分为一个个桶(bucket)，通过哈希值决定了键值对在这个数组的寻址；哈希值相同的键值对，则以链表形式存储你可以参考下面的示意图。这里需要注意的是，如果链表大小超过阈值(TREEIFY_THRESHOLD, 8)，图中的链表就会被改造为红黑树。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191211210845932.png" alt=""></p><h2 id="一、类注释"><a href="#一、类注释" class="headerlink" title="一、类注释"></a>一、类注释</h2><ul><li>允许 null 值，不同于 HashTable，是线程不安全的</li><li>load factor(影响因子) 默认值是 0.75，是均衡了时间和空间损耗算出来的值，较高的值会减少空间开销(扩容减少，数组大小增长速度变慢)，但增加了查找成本(hash 冲突增加，链表长度变长)，不扩容的条件：数组容量 &gt; 需要的数组大小 /load factor;</li><li>如果有很多数据需要储存到 HashMap 中，建议 HashMap 的容量一开始就设置成足够的大小，这样可以防止在其过程中不断的扩容，影响性能;</li><li>在迭代过程中，如果 HashMap 的结构被修改，会快速失败。</li></ul><h2 id="二、常见属性"><a href="#二、常见属性" class="headerlink" title="二、常见属性"></a>二、常见属性</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//初始容量为16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token comment" spellcheck="true">//最大容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//负载因子默认值</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//桶上的链表长度大于等于8时，链表转化成红黑树</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//桶上的红黑树大小小于等于6时，红黑树转化成链表</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当数组容量大于 64 时，链表才会转化成红黑树</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录迭代过程中 HashMap 结构是否发生变化，如果有变化，迭代时会 fail-fast</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HashMap 的实际大小，可能不准(因为当你拿到这个值的时候，可能又发生了变化)</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存放数据的数组</span><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 扩容的门槛，有两种情况</span><span class="token comment" spellcheck="true">// 如果初始化时，给定数组大小的话，通过 tableSizeFor 方法计算，数组大小永远接近于 2 的幂次方（有一个公式的）</span><span class="token comment" spellcheck="true">// 如果是通过 resize 方法进行扩容，实际使用长度 = 数组容量 * 0.75</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链表的节点</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//红黑树的节点</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span></code></pre><h2 id="三、新增节点"><a href="#三、新增节点" class="headerlink" title="三、新增节点"></a>三、新增节点</h2><p>新增的步骤如下：</p><ol><li>空数组有没有初始化，没有的话需要初始化</li><li>如果通过 key 的 hash 能够直接找到值，跳转到第6步，否则跳到第3步</li><li>如果 hash 冲突，两种解决方案：链表 or 红黑树</li><li>如果是链表，递归循环，把新元素追加到尾巴</li><li>如果是红黑树，调用红黑树新增的方法</li><li>通过 2、4、5 将新元素追加成功，再根据 onlyIfAbsent 判断是否需要覆盖</li><li>判断是否需要扩容，需要扩容进行扩容，结束</li></ol><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305235017556.png" alt=""></p><p>总结：要把键值对&lt;key,value&gt;放进去，首先会根据key计算出它的hash值，应该放到哪个位置，如果一开始数组是空的，那就会先<code>resize</code>初始化数组，初始化完后，就要去放键值对了，找到计算出的位置，如果那个索引位置是空的，就会直接新建Node，那就直接放在索引位置上，如果有值了，发生hash冲突了，那就要进行处理，判断是以红黑树还是链表的方式新增，递增完要更新版本号，并且如果HashMap的大小大于阈值了，就要resize，源码如下：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 入参 hash:通过 hash 算法计算出来的值。</span>        <span class="token comment" spellcheck="true">// 入参 onlyIfAbsent:false 表示即使 key 已经存在了，仍然会用新值覆盖原来的值，默认为 false</span>    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// n 表示数组的长度，i 为数组索引下标，p 为 i 下标位置的 Node 值</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果数组为空，使用 resize 方法初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 如果当前索引位置是空的，直接生成新的节点在当前索引位置上</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前索引位置有值(hash 冲突了),如何解决 hash 冲突</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// e为当前节点的临时变量</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果 key 的 hash 和值都相等，直接把当前下标位置的 Node 值赋值给临时变量</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> p<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果是红黑树，使用红黑树的方式新增</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 否则是个链表，把新节点放到链表的尾端</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//自旋操作</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// e = p.next 表示从头开始，遍历链表</span>                                        <span class="token comment" spellcheck="true">// p.next == null 表明 p 是链表的尾节点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment" spellcheck="true">// 把新节点放到链表的尾部</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 当链表的长度大于等于 8 时，链表转红黑树</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                      <span class="token comment" spellcheck="true">// 链表遍历过程中，发现有元素和新增的元素相等，结束循环</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//更改循环的当前元素，使 p 在遍历过程中，一直往后移动。</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 说明新节点的新增位置已经找到了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 当 onlyIfAbsent 为 false 时，才会覆盖值</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 返回老值</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 记录 HashMap 的数据结构发生了变化</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果 HashMap 的实际大小大于扩容的门槛，开始扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="1、链表新增节点"><a href="#1、链表新增节点" class="headerlink" title="1、链表新增节点"></a>1、链表新增节点</h3><p>链表的新增比较简单，就是把当前节点追加到链表的尾部，和 LinkedList 的追加实现一样的。当链表长度大于等于 8 时，此时的链表就会转化成红黑树，转化的方法是<code>treeifyBin</code>（treeify是树化的意思），<strong>此方法有一个判断，当链表长度大于等于 8，并且整个数组大小大于 64 时，才会转成红黑树，当数组大小小于 64 时，只会触发扩容，不会转化成红黑树</strong>，转化成红黑树的过程也比较简单，具体转 化的过程源码可以去 github:<a href="https://github.com/luanqiu/java8" target="_blank" rel="noopener">https://github.com/luanqiu/java8</a> 上面去查看。</p><p>可能面试的时候，<strong>有人问你为什么是 8</strong>，这个答案在源码中注释有说，中文翻译过来大概的意思是：</p><blockquote><p>链表查询的时间复杂度是 O (n)，红黑树的查询复杂度是 O (log (n))。在链表数据不多的时候， 使用链表进行遍历也比较快，只有当链表数据比较多的时候，才会转化成红黑树，但红黑树需要的占用空间是链表的 2 倍（源码注释中写的），考虑到转化时间和空间损耗，所以要定义出这个转化的边界值：</p><p>在设计 8 这个值的时候，参考了泊松分布概率函数，由泊松分布中得出结论，链表各个长度的命中概率为:</p><pre class=" language-java"><code class="language-java">     <span class="token operator">*</span> <span class="token number">0</span><span class="token operator">:</span>    <span class="token number">0.60653066</span>     <span class="token operator">*</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token number">0.30326533</span>     <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token number">0.07581633</span>     <span class="token operator">*</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token number">0.01263606</span>     <span class="token operator">*</span> <span class="token number">4</span><span class="token operator">:</span>    <span class="token number">0.00157952</span>     <span class="token operator">*</span> <span class="token number">5</span><span class="token operator">:</span>    <span class="token number">0.00015795</span>     <span class="token operator">*</span> <span class="token number">6</span><span class="token operator">:</span>    <span class="token number">0.00001316</span>     <span class="token operator">*</span> <span class="token number">7</span><span class="token operator">:</span>    <span class="token number">0.00000094</span>     <span class="token operator">*</span> <span class="token number">8</span><span class="token operator">:</span>    <span class="token number">0.00000006</span></code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191211204357542.png" alt=""></p><p>当链表的长度是 8 的时候，出现的概率是 0.00000006，不到千万分之一，所以说正常情况下，链表的长度不可能到达 8 ，而一旦到达 8 时，肯定是 hash 算法出了问题，所以在这种情况下，为了让 HashMap 仍然有较高的查询性能，所以让链表转化成红黑树，我们正常写代码，使用 HashMap 时，几乎不会碰到链表转化成红黑树的情况，毕竟概念只有千万分之 一。</p></blockquote><h3 id="2、红黑树新增节点"><a href="#2、红黑树新增节点" class="headerlink" title="2、红黑树新增节点"></a>2、红黑树新增节点</h3><ul><li><p>首先判断新增的节点在红黑树上是不是已经存在，判断手段有如下两种：</p><ul><li>如果节点没有实现 Comparable 接口，使用 equals 进行判断;</li><li>如果节点自己实现了 Comparable 接口，使用 compareTo 进行判断。</li></ul></li><li><p>新增的节点如果已经在红黑树上，直接返回;不在的话，判断新增节点是在当前节点的左边还是右边，左边值小，右边值大;</p></li><li><p>自旋递归 1 和 2 步，直到当前节点的左边或者右边的节点为空时，停止自旋，当前节点即为我们新增节点的父节点;</p></li><li><p>把新增节点放到当前节点的左边或右边为空的地方，并于当前节点建立父子节点关系;</p></li><li><p>进行着色和旋转，结束。</p></li></ul><p>源码如下：</p><pre class=" language-java"><code class="language-java">      <span class="token comment" spellcheck="true">//入参h为hash值</span>            <span class="token keyword">final</span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">putTreeVal</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> map<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> K k<span class="token punctuation">,</span> V v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kc <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> searched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//找到根节点</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//自旋</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> dir<span class="token punctuation">,</span> ph<span class="token punctuation">;</span> K pk<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// p hash 值大于 h，说明 p 在 h 的右边（左小右大）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">></span> h<span class="token punctuation">)</span>                    dir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// p hash 值小于 h，说明 p 在 h 的左边</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>                    dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 要放进去key在当前树中已经存在了(equals来判断)</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> p<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 自己实现的Comparable的话，不能用hashcode比较了，需要用compareTo</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                          <span class="token comment" spellcheck="true">// 得到key的Class类型，如果key没有实现Comparable就是null</span>                          <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                             <span class="token comment" spellcheck="true">//当前节点pk和入参k不等</span>                          <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>searched<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> q<span class="token punctuation">,</span> ch<span class="token punctuation">;</span>                        searched <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                             <span class="token punctuation">(</span>q <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                             <span class="token punctuation">(</span>q <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> q<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    dir <span class="token operator">=</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xp <span class="token operator">=</span> p<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//找到和当前hashcode值相近的节点(当前节点的左右子节点其中一个为空即可)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>left <span class="token operator">:</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xpn <span class="token operator">=</span> xp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//生成新的节点</span>                    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">newTreeNode</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> xpn<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//把新节点放在当前子节点为空的位置上</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        xp<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        xp<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//当前节点和新节点建立父子，前后关系</span>                    xp<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">;</span>                    x<span class="token punctuation">.</span>parent <span class="token operator">=</span> x<span class="token punctuation">.</span>prev <span class="token operator">=</span> xp<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xpn <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>xpn<span class="token punctuation">)</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> x<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//balanceInsertion 对红黑树进行着色或旋转，以达到更多的查找效率</span>                      <span class="token comment" spellcheck="true">//着色:新节点总是为红色;如果新节点的父亲是黑色，则不需要重新着色</span>                      <span class="token comment" spellcheck="true">//如果父亲是红色，则只能是黑色</span>                      <span class="token comment" spellcheck="true">//旋转: 父亲是红色，叔叔是黑色时，进行旋转</span>                      <span class="token comment" spellcheck="true">//如果当前节点是父亲的右节点，则进行左旋 </span>                      <span class="token comment" spellcheck="true">//如果当前节点是父亲的左节点，则进行右旋</span>                    <span class="token comment" spellcheck="true">//moveRootToFront 方法是把算出来的root放到根节点上</span>                    <span class="token function">moveRootToFront</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>一般只会问到新增节点到红黑树上大概是什么样的一个过程，着色和旋转的细节不会问，因为很难说清楚，但我们要清楚<strong>着色指的是给红黑树的节点着上红色或黑色</strong>，<strong>旋转是为了让红黑树更加平衡，提高查询的效率</strong>，总的来说都是为了满足红黑树的 5 个原则：</p><ul><li>根是与叶子都是黑色</li><li>节点是红色或黑色</li><li>从任一节点到它每个叶子的所有简单路径都包含相同数目的黑色节点</li><li>从每个叶子到根的所有路径上不能有两个连续的红色节点</li></ul><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200209232100235.png" alt=""></p><h2 id="四、查找"><a href="#四、查找" class="headerlink" title="四、查找"></a>四、查找</h2><p>HashMap 的查找主要分为以下三步：</p><ul><li>根据 hash 算法定位数组的索引位置，equals 判断当前节点是否是我们需要寻找的 key，是的话直接返回，不是的话往下。</li><li>判断当前节点有无 next 节点，有的话判断是链表类型，还是红黑树类型。</li><li>分别走链表和红黑树不同类型的查找方法。</li></ul><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200209224029797.png" alt=""></p><p>链表查找关键源码如下</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 采用自旋方式从链表中查找 key，e 初始为为链表的头节点</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果当前节点 hash 等于 key 的 hash，并且 equals 相等，当前节点就是我们要找的节点</span>  <span class="token comment" spellcheck="true">// 当 hash 冲突时，同一个 hash 值上是一个链表的时候，我们是通过 equals 方法来比较 key是否就是我们要找的那个</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 否则，把当前节点的下一个节点拿出来继续寻找</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>红黑树查找代码思路：</p><ol><li><p>从根节点递归查找;</p></li><li><p>根据 hashcode，比较查找节点，左边节点，右边节点之间的大小，根本红黑树左小右大的</p><p>特性进行判断;</p></li><li><p>判断查找节点在第 2 步有无定位节点位置，有的话返回，没有的话重复 2，3 两步;</p></li><li><p>一直自旋到定位到节点位置为止。</p></li></ol><p>如果红黑树比较平衡的话，每次查找的次数就是树的深度。</p><h2 id="五、其他问题"><a href="#五、其他问题" class="headerlink" title="五、其他问题"></a>五、其他问题</h2><p>抛两个知乎专栏：<a href="https://zhuanlan.zhihu.com/p/76735726" target="_blank" rel="noopener">专栏1</a>、<a href="https://zhuanlan.zhihu.com/p/87929020" target="_blank" rel="noopener">专栏2</a></p><p>（1）初始容量为什么必须是2的幂次方？能不能传别的数进去？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span></code></pre><p>哈希桶的个数为2的幂次方， 在JDK1.7中，如果还没初始化它就会进行初始化，如果输入其他数字，它初始化的时候会调用一个<code>roundUpToPowerOf2</code>方法，就是把它调整为2的幂。hashCode一共是42亿个数，比如初始一共16个桶，你要把42亿个数放进16个桶里面，如果用取余操作，它缺点很多，比如要对负数额外进行处理，并且处理速度很慢，所以写JDK的有一个很鬼畜的操作，它们用了&amp;，他们将hash值与（length-1）与运算了一下。length是桶的个数（数组长度），它是2的幂次方，比如10000（16的2进制），2^4^-1 = 1111，这个时候把hash值跟它与操作，得到一个二进制数字，就得到了数组下标了，前面都是0根本不用管它。（位运算基本知识：和1做与操作取得这个位上的值）</p><p>（2）JDK7中HashMap的问题</p><blockquote><ul><li>引发HashMap死锁，见<a href="https://coolshell.cn/articles/9606.html" target="_blank" rel="noopener">网页</a></li></ul><p>在多线程环境下，JDK 7中数组+链表的HashMap实现，有可能出现成环，然后就死循环，并且很难重现。<a href="https://www.bilibili.com/video/av71408100?from=search&seid=9615660035464292427" target="_blank" rel="noopener">视频讲解</a>（30分钟左右）</p><p>JAVA 7它是头插法，啥意思呢，比如我们本来有个hash表 某个节点上它是下面这样的</p><pre><code>Node1 -&gt; key:1,value:1 -&gt; key:2,value:2 -&gt; key:3,value:3经过扩容rehash后，变成了Node1 -&gt; key:3,value:3Node2 -&gt; key:2,value:2 -&gt; key:1,value:1</code></pre><p>因为它是头插法，我先把key=1的摘下来，插进一个新的节点，然后再把2摘下来，头插刀新的节点，2就变到了1的前面了！那这样一来顺序就反了。在多线程的情况下，线程调度本来就随机的嘛。原先是1-&gt;2，扩容后变为2-&gt;1，这样就可能出现死锁，出现环形链表。正常情况查找元素是找到头，往下挨个找，变成环，就有死循环了，线上系统cpu 100%。</p><ul><li><p>还有一个安全隐患，可以通过精心构造的恶意请求引发Dos</p><p>Tomcat使用了一个hash表来存储http的请求参数，那么就可以构造hashCode值一样的字符串，不断发送请求，这样直接导致hash表退化成链表，链表查找时间复杂度是O(n)，这样大大使得性能损耗， 1.7时通过hashSeeds这么一个补丁，就是对它再hash，来避免，接下来就到了1.8。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191211224529407.png" alt=""></p></li></ul></blockquote><p>（3）JDK 8中对HashMap的改进</p><blockquote><ul><li><p>数组+链表+红黑树</p></li><li><p>扩容时插入顺序的改进</p><p>JDK 1.7是头插法，1.8改成了尾插把，特别加了个注释preserve order，保持顺序</p></li><li><p>扩容</p><p>之前讲了数组长度为什么是2的幂次方，这里扩容的时候，比如把2^4^扩容成2^5^，就是由1111变为11111，那么hashCode和它与运算，最高位要么多个1，要么多个0，后面四位不变的，那么它针对hash桶上某个index上对应的链表，这个链表会拆分成两部分，一部分留在原地，另一部分被移走了，这边就把这条链表拆分成了高位和低位，判断哪一部分是要移动的，并且移动的时候顺序是保持的，不会再像JDK 7中出现环，完事后，把高位链表和低位链表赋到新的hash桶中的index下去</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191211230350526.png" alt=""></p></li></ul></blockquote><p>（4）hash方法怎么实现的？为什么要用异或^运算符</p><blockquote><p>JDK 1.8 中，是通过 hashCode() 的高 16 位异或低 16 位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度，功效和质量来考虑的，减少系统的开销，使用异或保证了对象的 hashCode 的 32 位值只要有一位发生改变，整个 hash() 返回值就会改变。尽可能的减少碰撞。</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/11/LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/11/LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>&emsp;&emsp;底层数据结构是<strong>双向链表</strong>，如图。链表中没数据时，first和last是同一个结点，前后指向null。因为是个双向链表，只要机器内存足够大，没有大小限制。</p><p>内部有一个Node类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//节点值</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指向后继</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指向前驱</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="1、-新增"><a href="#1、-新增" class="headerlink" title="1、 新增"></a>1、 新增</h4><p>&emsp;&emsp;追加节点时，我们可以选择追加到链表头部，还是追加到链表尾部，add 方法<strong>默认是从尾部开始追加</strong>，通过移动尾节点的 next 指向，addFirst 方法是从头部开始追加，通过移动头节点的 prev 指向。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//从尾部增加</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//把尾节点数据暂存</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//新建节点，l是新节点的前驱，e为要新增的节点，新增节点的后一个节点为null</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//（前驱、本身、后继）</span>          <span class="token comment" spellcheck="true">//把newNode追加到尾部</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//链表空与不空两种情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//大小与版本的修改</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//从头部增加</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//头节点赋给临时变量</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//新建节点，新节点前驱为null，e是新建节点，f为后继</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//（前驱、本身、后继）</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//判断链表空不空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//修改大小与版本</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2、-删除"><a href="#2、-删除" class="headerlink" title="2、 删除"></a>2、 删除</h4><p>&emsp;&emsp;节点删除的方式和追加类似，我们可以选择从头部删除，也可以选择从尾部删除，删除操作会把节点的值，前后指向节点都置为 null，帮助 GC 进行回收。贴一个从头部删除</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//拿出头节点的值作为方法的返回值</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//拿出头节点的下一个节点</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//帮助GC回收</span>        f<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>          <span class="token comment" spellcheck="true">//头节点的下一个节点成为头节点</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果 next 为空，表明链表为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>            last <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>              <span class="token comment" spellcheck="true">//链表不为空，头节点的前一个节点指向 null</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//修改大小与版本</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3、-查询"><a href="#3、-查询" class="headerlink" title="3、 查询"></a>3、 查询</h4><p>&emsp;&emsp;链表查询某一个节点是比较慢的，需要挨个循环查找才行。</p><pre class=" language-java"><code class="language-java">    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果 index 处于队列的前半部分，从头开始找，否则从后面开始找</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;LinkedList 并没有采用从头循环到尾的做法，而是采取了简单二分 法，首先看看 index 是在链表的前半部分，还是后半部分。如果是前半部分，就从头开始寻 找，反之亦然。通过这种方式，使循环的次数至少降低了一半，提高了查找的性能。</p><h4 id="4、-方法对比"><a href="#4、-方法对比" class="headerlink" title="4、 方法对比"></a>4、 方法对比</h4><table><thead><tr><th>方法含义</th><th>返回异常</th><th>返回特殊值</th><th>底层实现</th></tr></thead><tbody><tr><td>新增节点</td><td>add(e)</td><td>offer(e)</td><td>底层实现相同</td></tr><tr><td>删除节点</td><td>remove(e)</td><td>poll(e)</td><td>链表为空时，remove 会抛出异常，poll 返回 null。</td></tr><tr><td>查找节点</td><td>element(e)</td><td>peek()</td><td>链表为空时，element 会抛出异常，peek 返回 null。</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>   <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Deque<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre><p>&emsp;&emsp;LinkedList 也实现了 Deque 接口，对新增、删除和查找都提供从头开始，还是从尾开始两种方向的方法，比如 remove 方法，Deque 提供了 removeFirst 和 removeLast 两种方向的使用方式，但当链表为空时的表现都和 remove 方法一样，都会抛出异常。</p><h4 id="5、-迭代器"><a href="#5、-迭代器" class="headerlink" title="5、 迭代器"></a>5、 迭代器</h4><p>&emsp;&emsp;因为 LinkedList 要实现双向的迭代访问，所以我们使用 Iterator 接口肯定不行了，因为 Iterator 只支持从头到尾的访问。Java 新增了一个迭代接口，叫做ListIterator，这个接口提供了向前和向后的迭代方法。</p><table><thead><tr><th align="left">迭代顺序</th><th>方法</th></tr></thead><tbody><tr><td align="left">从头到尾迭代方法</td><td>hasNext、next、nextIndex</td></tr><tr><td align="left">从尾到头迭代方法</td><td>hasPrevious、previous、previousIndex</td></tr></tbody></table><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> lastReturned<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//上一次执行 next() 或者 previos() 方法时的节点位置</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//下一个节点</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> nextIndex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//下一个节点的位置</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//期望版本号与目标版本号</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下一个节点的索引小于链表的大小，就有</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//检查期望版本号有无发生变化</span>            <span class="token function">checkForComodificaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//再次检查</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//把上一个节点位置改为当前节点</span>            lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// next 是下一个节点了，为下次迭代做准备</span>            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//返回节点值</span>            <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//从尾到头迭代    </span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果上次节点索引位置大于 0，就还有节点可以迭代</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 取前一个节点</span>        <span class="token keyword">public</span> E <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// next 为空场景:1:说明是第一次迭代，取尾节点(last);2:上一次操作把尾节点删除掉了</span>              <span class="token comment" spellcheck="true">// next 不为空场景:说明已经发生过迭代了，直接取前一个节点即可(next.prev)</span>            lastReturned <span class="token operator">=</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> last <span class="token operator">:</span> next<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 索引位置变化</span>            nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//迭代器删除</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// lastReturned 是本次迭代需要删除的值，分以下空和非空两种情况:</span>                        <span class="token comment" spellcheck="true">// lastReturned 为空，说明调用者没有主动执行过 next() 或者 previos()，直接报错</span>              <span class="token comment" spellcheck="true">// lastReturned 不为空，是在上次执行 next() 或者 previos()方法时赋的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> lastNext <span class="token operator">=</span> lastReturned<span class="token punctuation">.</span>next<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//删除当前节点</span>            <span class="token function">unlink</span><span class="token punctuation">(</span>lastReturned<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span>                next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span>            <span class="token keyword">else</span>                nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> null<span class="token punctuation">;</span>            expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="6、-面试问题"><a href="#6、-面试问题" class="headerlink" title="6、 面试问题"></a>6、 面试问题</h4><p>（1）<strong>ArrayList 和 LinkedList 有何不同?</strong></p><blockquote><p>答:先从底层数据结构开始说起，然后以某一个方法为突破口深入，比如:最大的不同是两者底层的数据结构不同，ArrayList 底层是数组，LinkedList 底层是双向链表，两者的数据结构不同也导致了操作的 API 实现有所差异，拿新增实现来说，ArrayList 会先计算并决定是否扩容，然后把新增的数据直接赋值到数组上，而 LinkedList 仅仅只需要改变插入节点和其前后节点的指向位置关系即可。</p></blockquote><p>（2）<strong>ArrayList 和 LinkedList 应用场景有何不同</strong></p><blockquote><p>答:ArrayList 更适合于快速的查找匹配，不适合频繁新增删除，像工作中经常会对元素进行匹 配查询的场景比较合适，LinkedList 更适合于经常新增和删除，对查询反而很少的场景。</p></blockquote><p>（3）<strong>ArrayList 和 LinkedList 两者有没有最大容量</strong></p><blockquote><p>答:ArrayList 有最大容量的，为 Integer 的最大值，LinkedList 底层是双向链表，理论上可以无限大,但源码中，LinkedList 实际大小用 的是 int 类型，这也说明了 LinkedList 不能超过 Integer 的最大值，不然会溢出。</p></blockquote><p>（4）<strong>ArrayList 和 LinkedList 是如何对 null 值进行处理的</strong></p><blockquote><p>答:ArrayList 允许 null 值新增，也允许 null 值删除。删除 null 值时，是从头开始，找到第一个值是 null 的元素删除，LinkedList 也是允许null值的新增和删除的。</p></blockquote><p>（5）<strong>ArrayList 和 LinedList 是线程安全的么，为什么?</strong></p><blockquote><p>答:当两者作为非共享变量时，比如说仅仅是在方法里面的局部变量时，是没有线程安全问题 的，只有当两者是共享变量时，才会有线程安全问题。</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java源码</title>
      <link href="/2019/09/10/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/09/10/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList就是一个数组，源码中有几个重要概念</p><blockquote><ul><li>index：表示数组下标</li><li>elementData：表示数组本身</li><li>DEFAULT_CAPACITY：表示初始数组的大小，默认是10！！！（无参构造器初始化是0，10 是在第一次 add 的时候扩容的数组值。）</li><li>size：表示当前数组的大小，没有用volatile修饰，非线程安全</li><li>modCount：统计当前数组被修改的次数，数组结构有变动，就会+1</li></ul></blockquote><p>一些重要注释</p><blockquote><ul><li>ArrayList允许put null值</li><li>size、isEmpty、get、set、add 等方法时间复杂度都是 O(1)</li><li>是非线程安全的，多线程情况下，推荐使用线程安全类</li><li>增强 for 循环，或者使用迭代器迭代过程中，如果数组大小被改变，会快速失败，抛出异常。</li></ul></blockquote><h4 id="1、-初始化"><a href="#1、-初始化" class="headerlink" title="1、 初始化"></a>1、 初始化</h4><p>有三种初始化办法:无参数直接初始化、指定大小初始化、指定初始数据初始化，源码如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 无参初始化，数组大小为空</span><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定初始数据来初始化</span><span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// elementData是保存数组的容器，默认为null</span>        elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 如果初始集合c有值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果集合元素不是Object类型，则转成Object类型</span>            <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果初始集合c没值，则默认空数组</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>注意</strong></p><ul><li>ArrayList 无参构造器初始化时，<strong>默认大小是空数组</strong>，并不是10，10 是在第一次 add 的时候扩容的数组值。</li></ul><h4 id="2、-新增与扩容"><a href="#2、-新增与扩容" class="headerlink" title="2、 新增与扩容"></a>2、 新增与扩容</h4><p>新增就是往数组中添加元素，主要分为两步。</p><blockquote><ul><li>首先看要不要扩容，如果需要就先扩容</li><li>直接赋值</li></ul><p>新增源码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//确保数组大小是否足够，不够则直接扩容，size是当前数组的大小，+1就是增加后的大小</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>              <span class="token comment" spellcheck="true">//直接赋值，这是线程不安全的</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></blockquote><p><strong>扩容(ensureCapacityInternal)源码</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//确保容量足够</span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 记录数组被修改的次数</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果我们需要的最小容量 大于 当前数组的长度，那就需要扩容了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//扩容，把现有数据拷贝到新的数组中</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//新数组容量</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果扩容后的容量 &lt; 期望的容量，那就让期望容量成为新容量，因为至少需要这么多的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果扩容后的容量 > jvm能分配的最大值，那么就用 Integer 的最大值，上界</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过复制进行扩容</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>扩容成原来大小的1.5倍</li><li>ArrayList 中的数组的最大值是 Integer.MAX_VALUE，超过这个值，JVM 就不会给数组分配内存空间了。</li><li>新增时，并没有对值进行严格的校验，所以 ArrayList 是允许 null 值的。</li></ul><p><strong>扩容本质</strong></p><blockquote><p>通过代码<code>Arrays.copyOf(elementData, newCapacity);</code>来实现扩容，就是数组的拷贝，新建一个符合预期容量的新数组，然后把老数据拷贝过去。<code>Arrays.copyOf</code>是通过<code>System.arraycopy</code>来实现的，这个方法是native方法，源码如下。</p></blockquote><h4 id="3、-删除"><a href="#3、-删除" class="headerlink" title="3、 删除"></a>3、 删除</h4><p>&emsp;&emsp;ArrayList 删除元素有很多种方式，比如根据数组索引删除、根据值删除或批量删除等等，原理和思路都差不多，这里选取根据值删除方式来进行源码说明：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//如果要删除的是null，找到第一个为null的删除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">//调用根据索引位置来删除</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//如果要删除的值不为null，找到第一个和要删除的值相等的元素删除</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">//！！注意！！这里是根据equals来判断值是否相等，然后根据索引位置来删除</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>新增元素时可以增加null元素，所以删除时也是允许删除null元素的</li><li>找到值在数组中的索引位置，通过equals来判断相不相等等。</li></ul><p>下面是fastRemove方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//记录修改次数</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//numMoved表示删除index上的元素后，有多少个元素要移动到元素前面去（数据结构知识）</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//把index后面的元素拷贝过去</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//数组最后一个元素赋值null，帮助GC</span>                elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>    <span class="token punctuation">}</span></code></pre><h4 id="4、-迭代器"><a href="#4、-迭代器" class="headerlink" title="4、 迭代器"></a>4、 迭代器</h4><p>&emsp;&emsp;如果要自己实现迭代器，实现 java.util.Iterator 类就好了，ArrayList 也是这样做的，它里面的Itr实现了迭代器接口。迭代器有三个重要参数，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 迭代过程中下一个元素的位置，默认从0开始</span>    <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// add场景：表示上一次迭代过程中索引的位置，remove场景：-1</span>    <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//迭代过程中期望的版本次数。</span></code></pre><p>ArrayList迭代器的三个方法源码</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>               <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token function">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//有没有值可以迭代</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//如果下一个元素位置和大小相等，说明已经迭代完了，不等则还可以继续迭代</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//迭代过程中判断版本号有没有被修改，如果被修改了，抛出ConcurrentModificationException异常</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//下一个元素位置</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//为下一次迭代做准备</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回元素值</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//如果lastRet值为-1，说明数组已经被删完了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//迭代过程中判断版本号有没有被修改</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//-1表示元素已经被删除，写这一句是为了避免重复删除的操作</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//删除后modCount已经发生变化，要把它赋值给expectedModCount，下一次迭代两个值就一致了</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//补上</span>      <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;只有当 ArrayList 作为共享变量时，才会有线程安全问题，当 ArrayList 是方法内的局部变量时，是没有线程安全的问题的。ArrayList 有线程安全问题的本质，是因为 ArrayList 自身的 elementData、size、modConut 在进行各种操作时，都没有加锁，而且这些变量的类型是不可见(volatile)的，所以如果多个线程对这些变量进行操作时，可能会有值被覆盖的情况。</p><p>&emsp;&emsp;类注释中推荐我们使用 Collections#synchronizedList 来保证线程安全，SynchronizedList 是通过在每个方法上面加上锁来实现，虽然实现了线程安全，但是性能大大降低。</p><h4 id="5、-面试问题"><a href="#5、-面试问题" class="headerlink" title="5、 面试问题"></a>5、 面试问题</h4><p>（1）<strong>ArrayList 无参数构造器构造，现在 add 一个值进去，此时数组的大小是多少，下一次扩容前最大可用大小是多少?</strong></p><blockquote><p>答:此处数组的实际大小是 1，但下一次扩容前最大可用大小是 10，因为 ArrayList 第一次扩容时， 是有默认值的，默认值是 10，在第一次 add 一个值进去时，数组的可用大小被扩容到 10 了。</p></blockquote><p>（2） <strong>如果我连续往 list 里面新增值，增加到第 11 个的时候，数组的大小是多少?</strong></p><blockquote><p>答:这里的考查点就是扩容的公式，当增加到 11 的时候，此时我们希望数组的大小为 11，但 实际上数组的最大容量只有 10，不够了就需要扩容，扩容的公式是:oldCapacity + (oldCapacity&gt;&gt; 1)，oldCapacity 表示数组现有大小，目前场景计算公式是:10 + 10 /2 = 15，然后我们发现 15 已经够用了，所以数组的大小会被扩容到 15。</p></blockquote><p>（3）<strong>数组初始化，被加入一个值后，如果我使用 addAll 方法，再一下子加入 15 个值，那么最终数组的大小是多少?</strong></p><blockquote><p>答:第一题中我们已经计算出来数组在加入一个值后，实际大小是 1，最大可用大小是 10 ，现在需要一下子加入 15 个值，那我们期望数组的大小值就是 16，此时数组最大可用大小只有 10，明显不够，需要扩容，扩容后的大小是:10 + 10 /2 = 15，这时候发现扩容后的大小仍 然不到我们期望的值 16，这时候源码中有一种策略如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果扩容后的值 &lt; 我们的期望值，我们的期望值就等于本次扩容的大小 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span></code></pre><p>所以最终数组扩容后的大小为 16。</p></blockquote><p>（4）<strong>现在我有一个很大的数组需要拷贝，原数组大小是 5k，请问如何快速拷贝?</strong></p><blockquote><p>答:因为原数组比较大，如果新建新数组的时候，不指定数组大小的话，就会频繁扩容，频繁扩容就会有大量拷贝的工作，造成拷贝的性能低下，所以说新建数组时，指定新数组的大小为 5k 即可。</p></blockquote><p>（5）<strong>有一个 ArrayList，数据是 2、3、3、3、4，中间有三个 3，现在我通过 for 循环的方式想把3删除，可以删除干净吗？最终结果是什么？为什么</strong></p><blockquote><p>答:不能删除干净，最终删除的结果是 2、3、4，有一个 3 删除不掉，原因我们看下图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304171218373.png" alt="例子"></p><p>每次删除一个元素后，该元素后面的元素就会往前移动，而此时循环的 i 在不断地增长，最终会使每次删除 3 的后一个 3 被遗漏，导致删除不掉。</p></blockquote><p>（6）<strong>还是上面的 ArrayList 数组，我们通过增强 for 循环进行删除，可以么?</strong></p><blockquote><p>答:不可以，会报错。因为增强 for 循环调用的就是迭代器的 next () 方法，当你调用 remove () 方法进行删除时，modCount 的值会 +1，而这时候迭代器中的 expectedModCount 的值却没有变，导致在迭代器下次执行 next () 方法时， expectedModCount != modCount 就会报 ConcurrentModificationException 的错误。</p></blockquote><p>（7）<strong>还是上面的数组，如果删除时使用list. Iterator 然后remove () 可以删除么，为什么?</strong></p><blockquote><p>答：可以的，因为 Iterator.remove () 方法在执行的过程中，会把最新的 modCount 赋值给 expectedModCount，这样在下次循环过程中，modCount 和 expectedModCount 两者就会相等。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for (int i = 0; i &lt; list.size(); i++) {</span>        <span class="token comment" spellcheck="true">//     if (list.get(i) == 3) {</span>        <span class="token comment" spellcheck="true">//         list.remove(i);</span>        <span class="token comment" spellcheck="true">//     }</span>        <span class="token comment" spellcheck="true">// }</span>          <span class="token comment" spellcheck="true">//增强型for循环调用的是迭代器的next，list.remove然后会调用fastRemove</span>        <span class="token comment" spellcheck="true">//前面是迭代器的版本号，后面是list里面持有的版本号，list调用remove，版本号+1</span>        <span class="token comment" spellcheck="true">//但是前面迭代器的版本号是没变的。</span>        <span class="token comment" spellcheck="true">// for (Integer i : list) {</span>        <span class="token comment" spellcheck="true">//     if (i == 3) {</span>        <span class="token comment" spellcheck="true">//         list.remove(i);</span>        <span class="token comment" spellcheck="true">//     }</span>        <span class="token comment" spellcheck="true">// }</span>        Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//迭代器的remove，而不是list的</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//主要就是看这个迭代器是不是list自己的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Java集合源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/09/05/JVM%E4%B9%8BGC%E5%9C%BA%E6%99%AF%E6%A8%A1%E6%8B%9F%E4%B8%8E%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2019/09/05/JVM%E4%B9%8BGC%E5%9C%BA%E6%99%AF%E6%A8%A1%E6%8B%9F%E4%B8%8E%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM之GC场景模拟与日志分析"><a href="#JVM之GC场景模拟与日志分析" class="headerlink" title="JVM之GC场景模拟与日志分析"></a>JVM之GC场景模拟与日志分析</h1><h2 id="一、Young-GC场景模拟与日志分析"><a href="#一、Young-GC场景模拟与日志分析" class="headerlink" title="一、Young GC场景模拟与日志分析"></a>一、Young GC场景模拟与日志分析</h2><h3 id="1、JVM参数设置"><a href="#1、JVM参数设置" class="headerlink" title="1、JVM参数设置"></a>1、JVM参数设置</h3><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span>NewSize<span class="token operator">=</span><span class="token number">5242880</span>                        <span class="token comment" spellcheck="true">//新生代大小为5MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxNewSize<span class="token operator">=</span><span class="token number">5242880</span>                <span class="token comment" spellcheck="true">//最大新生代大小为5MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>InitialHeapSize<span class="token operator">=</span><span class="token number">10485760</span>    <span class="token comment" spellcheck="true">//初始堆大小10MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxHeapSize<span class="token operator">=</span><span class="token number">10485760</span>            <span class="token comment" spellcheck="true">//初始堆最大大小10MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>SurvivorRatio<span class="token operator">=</span><span class="token number">8</span>                        <span class="token comment" spellcheck="true">//新生代5MB，Eden占4MB，两个S区各占0.5MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>PretenureSizeThreshold<span class="token operator">=</span><span class="token number">10485760</span>        <span class="token comment" spellcheck="true">//大对象阈值为10MB</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseParNewGC                            <span class="token comment" spellcheck="true">//新生代使用PN垃圾回收器</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseConcMarkSweepGC                <span class="token comment" spellcheck="true">//老年代使用CMS垃圾回收器</span><span class="token comment" spellcheck="true">//设置打印JVM日志的参数</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetils            <span class="token comment" spellcheck="true">//打印详细的gc日志</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCTimeStamps    <span class="token comment" spellcheck="true">//这个参数可以打印出来每次GC发生的时间</span><span class="token operator">-</span>Xloggc<span class="token operator">:</span>gc<span class="token punctuation">.</span>log                    <span class="token comment" spellcheck="true">//这个参数可以设置将gc日志写入一个磁盘文件</span></code></pre><p> <img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028163835508.png" alt=""></p><p>idea参数设置步骤方法</p><h3 id="2、代码测试"><a href="#2、代码测试" class="headerlink" title="2、代码测试"></a>2、代码测试</h3><p>代码如下，<code>new byte[1024 * 1024]</code>这样的代码连续分配了3个数组，每个数组都是1MB（1024B*1024B），通过array1这个局部变量依次引用这三个对象，最后还把array1这个局部变量指向了null。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第一行<code>byte[] array1 = new byte[1024 * 1024];</code>代码一旦运行，就会在JVM的Eden区内放入一个1MB的对象，同时在main线程的虚拟机栈中会压入一个main()方法的栈帧，在main()方法的栈帧内部，会有一个“array1”变量，这个变量是指向堆内存Eden区的那个1MB的数组。</p><p>第二行<code>array1 = new byte[1024 * 1024];</code>此时会在堆内存的Eden区中创建第二个数组，并且让局部变量指向第二个数组，然后第一个数组就没人引用了，此时第一个数组就成了没人引用的“垃圾对象”了。</p><p>第三行<code>byte[] array1 = new byte[1024 * 1024];</code>，让array1变量指向了第三个数组，此时前面两个数组都没有人引用了，就都成了垃圾对象。</p><p>第四行<code>array1 = null;</code>array1这个变量什么都不指向了，此时会导致之前创建的3个数组全部变成垃圾对象。最后如图所示：</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028164424610.png" alt=""></p><p>第五行<code>byte[] array2 = new byte[2 * 1024 * 1024];</code>分配一个2MB大小的数组，尝试放入Eden区中,此时Eden放不下了，就会触发Young GC。</p><p>运行程序，得到GC日志文件<code>gc.log</code></p><h3 id="3、日志分析"><a href="#3、日志分析" class="headerlink" title="3、日志分析"></a>3、日志分析</h3><pre class=" language-log"><code class="language-log">Java HotSpot(TM) 64-Bit Server VM (25.212-b10) for bsd-amd64 JRE (1.8.0_212-b10), built on Apr  1 2019 23:10:56 by "java_re" with gcc 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)Memory: 4k page, physical 16777216k(469700k free)/proc/meminfo:CommandLine flags: -XX:InitialHeapSize=10485760 -XX:MaxHeapSize=10485760 -XX:MaxNewSize=5242880 -XX:NewSize=5242880 -XX:OldPLABSize=16 -XX:PretenureSizeThreshold=10485760 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:SurvivorRatio=8 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC 0.101: [GC (Allocation Failure) 0.102: [ParNew: 3473K->416K(4608K), 0.0018825 secs] 3473K->1442K(9728K), 0.0019891 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] Heap par new generation   total 4608K, used 3650K [0x00000007bf600000, 0x00000007bfb00000, 0x00000007bfb00000)  eden space 4096K,  78% used [0x00000007bf600000, 0x00000007bf928920, 0x00000007bfa00000)  from space 512K,  81% used [0x00000007bfa80000, 0x00000007bfae8100, 0x00000007bfb00000)  to   space 512K,   0% used [0x00000007bfa00000, 0x00000007bfa00000, 0x00000007bfa80000) concurrent mark-sweep generation total 5120K, used 1026K [0x00000007bfb00000, 0x00000007c0000000, 0x00000007c0000000) Metaspace       used 2934K, capacity 4496K, committed 4864K, reserved 1056768K  class space    used 320K, capacity 388K, committed 512K, reserved 1048576K</code></pre><h3 id="（1）第一部分"><a href="#（1）第一部分" class="headerlink" title="（1）第一部分"></a>（1）第一部分</h3><p><code>CommandLine flags</code>就是一些默认参数以及我们设置的一些参数。</p><h3 id="（2）第二部分"><a href="#（2）第二部分" class="headerlink" title="（2）第二部分"></a>（2）第二部分</h3><pre><code>0.101: [GC (Allocation Failure) 0.102: [ParNew: 3473K-&gt;416K(4608K), 0.0018825 secs] 3473K-&gt;1442K(9728K), 0.0019891 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] </code></pre><p>这一段说的是本次GC执行的情况。</p><ul><li><p><code>GC (Allocation Failure)</code>：GC发生原因，分配对象失败0.102,意思是系统运行了0.102s后发生GC</p></li><li><p><code>ParNew: 3473K-&gt;416K(4608K), 0.0018825 secs</code>：前面是我们指定的垃圾回收器，3473K-&gt;416K(4608K)，意思是对新生代执行一次GC前已经使用了3473KB，，但是GC后只有416KB对象是存活下来的，然后(4608)代表新生代可用空间是4.5M（Eden+1个S），后面时间是本次GC耗费的时间。<strong>虽然我们创建的数组是1MB，但是为了存这个数组，JVM还附带了其他的一些信息，导致每个数组实际占的内存大于1M。这些其他信息是什么可以借助专门的工具来分析堆内存快照。</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028180747301.png" alt=""></p><p>如图所示是放了三个对象与位置对象的情况，共占3473KB</p><p>接下来就进行了Young GC，存活416KB，如图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028181008019.png" alt=""></p></li></ul><ul><li><p><code>3473K-&gt;1442K(9728K), 0.0019891 secs</code>：这段话指的是整个Java堆内存的使用情况，总可用空间9728KB（9.5MB），就是年轻代+老年代，GC前整个Java堆内存使用了3473KB，GC后Java堆内存使用了1442KB</p></li><li><p><code>[Times: user=0.01 sys=0.00, real=0.01 secs]</code>：这个是本次GC消耗的时间，从秒为单位来看几乎为0</p></li></ul><h3 id="（3）第三部分"><a href="#（3）第三部分" class="headerlink" title="（3）第三部分"></a>（3）第三部分</h3><p>Heap开始就是JVM退出的时候打印出当前堆内存的使用情况了。</p><pre><code>Heap par new generation   total 4608K, used 3650K [0x00000007bf600000, 0x00000007bfb00000, 0x00000007bfb00000)</code></pre><ul><li><code>par new generation   total 4608K, used 3650K</code>：意思是ParNew垃圾回收器负责的年轻代总共4608KB（4.5MB），目前使用了3650KB（3.5MB）。照理来说应该是（2M对象+之前400多KB未知的对象应该是2.5MB左右，但是为什么变成3.5MB呢？因为我们的2.5MB是理论值，具体情况和使用的IDE有差异。）</li></ul><pre><code>eden space 4096K,  78% used [0x00000007bf600000, 0x00000007bf928920, 0x00000007bfa00000)from space 512K,  81% used [0x00000007bfa80000, 0x00000007bfae8100, 0x00000007bfb00000)to   space 512K,   0% used [0x00000007bfa00000, 0x00000007bfa00000, 0x00000007bfa80000)</code></pre><ul><li>这是新生代三个区域<code>Eden</code>、<code>Survivor from</code>、<code>Survivor to</code>三个区域的使用率。</li></ul><pre><code>concurrent mark-sweep generation total 5120K, used 1026K [0x00000007bfb00000, 0x00000007c0000000, 0x00000007c0000000) Metaspace       used 2934K, capacity 4496K, committed 4864K, reserved 1056768K  class space    used 320K, capacity 388K, committed 512K, reserved 1048576K</code></pre><ul><li><code>concurrent mark-sweep generation total 5120K, used 1026K</code>：使用的是CMS回收器，管理老年代大小一共5MB，使用了1026KB</li><li><code>Metaspace</code>：元数据空间，存放一些类信息、常量池的东西</li><li><code>class space</code>：Class 空间</li></ul><h2 id="二、进入老年代的场景模拟与日志分析"><a href="#二、进入老年代的场景模拟与日志分析" class="headerlink" title="二、进入老年代的场景模拟与日志分析"></a>二、进入老年代的场景模拟与日志分析</h2><h3 id="1、对象进入老年代的四个条件"><a href="#1、对象进入老年代的四个条件" class="headerlink" title="1、对象进入老年代的四个条件"></a>1、对象进入老年代的四个条件</h3><ul><li>躲过15次GC后直接进入老年代</li><li>动态年龄判断规则，如果Survivor区域内年龄1+年龄2+年龄3+年龄n的对象总和大于Survivor区的50%，此时年龄n以上的对象会进入老年代，不一定要达到15岁</li><li>Young GC后存活的对象太多而无法放入Survivor区，直接进入老年代</li><li>大对象直接进入老年代</li></ul><h3 id="2、场景一（动态年龄判断规则场景）"><a href="#2、场景一（动态年龄判断规则场景）" class="headerlink" title="2、场景一（动态年龄判断规则场景）"></a>2、场景一（动态年龄判断规则场景）</h3><p><strong>在这里模拟根据动态年龄判断规则进入老年代的那个场景。</strong></p><h4 id="（1）首先设置JVM参数"><a href="#（1）首先设置JVM参数" class="headerlink" title="（1）首先设置JVM参数"></a>（1）首先设置JVM参数</h4><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span>NewSize<span class="token operator">=</span><span class="token number">10485760</span>                    <span class="token comment" spellcheck="true">//新生代大小为10MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxNewSize<span class="token operator">=</span><span class="token number">10485760</span>             <span class="token comment" spellcheck="true">//新生代最大大小为10MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>InitialHeapSize<span class="token operator">=</span><span class="token number">20971520</span>     <span class="token comment" spellcheck="true">//初始化堆大小为20MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxHeapSize<span class="token operator">=</span><span class="token number">20971520</span>             <span class="token comment" spellcheck="true">//最大堆大小为20MB</span><span class="token operator">-</span>XX<span class="token operator">:</span>SurvivorRatio<span class="token operator">=</span><span class="token number">8</span>                      <span class="token comment" spellcheck="true">//新生代区域划分8:1:1</span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxTenuringThreshold<span class="token operator">=</span><span class="token number">15</span>     <span class="token comment" spellcheck="true">//默认是躲过15次GC进入老年代</span><span class="token operator">-</span>XX<span class="token operator">:</span>PretenureSizeThreshold<span class="token operator">=</span><span class="token number">10485760</span>     <span class="token comment" spellcheck="true">//超过10MB的对象直接进入老年代</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseParNewGC                             <span class="token comment" spellcheck="true">//新生代使用PN</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseConcMarkSweepGC             <span class="token comment" spellcheck="true">//老年代使用CMS</span><span class="token comment" spellcheck="true">//设置打印JVM日志的参数</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetils            <span class="token comment" spellcheck="true">//打印详细的gc日志</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCTimeStamps    <span class="token comment" spellcheck="true">//这个参数可以打印出来每次GC发生的时间</span><span class="token operator">-</span>Xloggc<span class="token operator">:</span>gc<span class="token punctuation">.</span>log                    <span class="token comment" spellcheck="true">//这个参数可以设置将gc日志写入一个磁盘文件</span></code></pre><h4 id="（2）代码测试并分析GC日志"><a href="#（2）代码测试并分析GC日志" class="headerlink" title="（2）代码测试并分析GC日志"></a>（2）代码测试并分析GC日志</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//初步代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>idea+debug模式</p><pre><code>Java HotSpot(TM) 64-Bit Server VM (25.212-b10) for bsd-amd64 JRE (1.8.0_212-b10), built on Apr  1 2019 23:10:56 by &quot;java_re&quot; with gcc 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)Memory: 4k page, physical 16777216k(573728k free)/proc/meminfo:CommandLine flags: -XX:InitialHeapSize=20971520 -XX:MaxHeapSize=20971520 -XX:MaxNewSize=10485760 -XX:MaxTenuringThreshold=15 -XX:NewSize=10485760 -XX:OldPLABSize=16 -XX:PretenureSizeThreshold=10485760 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:SurvivorRatio=8 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC 0.138: [GC (Allocation Failure) 0.138: [ParNew: 8179K-&gt;627K(9216K), 0.0008498 secs] 8179K-&gt;627K(19456K), 0.0009520 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] Heap par new generation   total 9216K, used 2921K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)  eden space 8192K,  28% used [0x00000007bec00000, 0x00000007bee3d8a0, 0x00000007bf400000)  from space 1024K,  61% used [0x00000007bf500000, 0x00000007bf59ccb8, 0x00000007bf600000)  to   space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000) concurrent mark-sweep generation total 10240K, used 0K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) Metaspace       used 2930K, capacity 4556K, committed 4864K, reserved 1056768K  class space    used 312K, capacity 392K, committed 512K, reserved 1048576K</code></pre><p>前四行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1 <span class="token operator">=</span> null<span class="token punctuation">;</span></code></pre><p>这一块连续创建3个2MB的数组，最后还把array1设置为null，此时的内存图如下所示</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028212621722.png" alt=""></p><p>前四行代码运行后堆内存中的结果</p><p>第五行<code>byte[] array2 = new byte[128 * 1024]</code>在Eden区创建一个128KB的数组，由array2来引用。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028213129634.png" alt=""></p><p>第五行代码运行后堆内存中的结果</p><p>此时运行第六行代码，再分配一个2MB的数组发现Eden区没有空间了，这时候一定会先触发一次Young GC，我们可以在日志中看到有这么一句：<code>ParNew: 8179K-&gt;627K(9216K)</code>，这行日志清晰表明了，在GC之前新生代占用了8179KB的内存，这里大概就是6MB（6144）的3个数组 + 128KB的1个数组 + 几百KB的一些未知对象。接着看GC日志,Young GC存活下来的都进了Survivor区了，占了一半，这些是未知的对象+128KB数组，同时Eden区域内被占据了28%的空间，大概就是2MB左右，这就是新来的数组占用Eden的空间大小。此时如图所示。</p><pre><code> par new generation   total 9216K, used 2921K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)  eden space 8192K,  28% used [0x00000007bec00000, 0x00000007bee3d8a0, 0x00000007bf400000)  from space 1024K,  61% used [0x00000007bf500000, 0x00000007bf59ccb8, 0x00000007bf600000)  to   space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000)</code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028213713681.png" alt=""></p><p>第六行代码运行后堆内存中的结果。</p><p>此时Survivor From区里的那些对象，他们都是1岁，熬过1次GC，年龄就增加1，而此时占用了总Survivor区域的61%，超过50%了。</p><h4 id="（3）再完善代码并分析GC日志"><a href="#（3）再完善代码并分析GC日志" class="headerlink" title="（3）再完善代码并分析GC日志"></a>（3）再完善代码并分析GC日志</h4><p>把上述代码完善成这样子，我们要出发出来第二次Young GC，来看Survivor区域中的动态年龄判断规则是否生效。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新增加的代码</span>        array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array3 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>GC日志（idea，Debug模式）</p><pre><code>Java HotSpot(TM) 64-Bit Server VM (25.212-b10) for bsd-amd64 JRE (1.8.0_212-b10), built on Apr  1 2019 23:10:56 by &quot;java_re&quot; with gcc 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)Memory: 4k page, physical 16777216k(578716k free)/proc/meminfo:CommandLine flags: -XX:InitialHeapSize=20971520 -XX:MaxHeapSize=20971520 -XX:MaxNewSize=10485760 -XX:MaxTenuringThreshold=15 -XX:NewSize=10485760 -XX:OldPLABSize=16 -XX:PretenureSizeThreshold=10485760 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:SurvivorRatio=8 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC 0.400: [GC (Allocation Failure) 0.400: [ParNew: 8179K-&gt;617K(9216K), 0.0011641 secs] 8179K-&gt;617K(19456K), 0.0012530 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 0.403: [GC (Allocation Failure) 0.403: [ParNew: 7085K-&gt;0K(9216K), 0.0042709 secs] 7085K-&gt;521K(19456K), 0.0043461 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] Heap par new generation   total 9216K, used 2130K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)  eden space 8192K,  26% used [0x00000007bec00000, 0x00000007bee14930, 0x00000007bf400000)  from space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000)  to   space 1024K,   0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000) concurrent mark-sweep generation total 10240K, used 521K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) Metaspace       used 2931K, capacity 4556K, committed 4864K, reserved 1056768K  class space    used 312K, capacity 392K, committed 512K, reserved 1048576K</code></pre><p>分析这4行代码</p><pre class=" language-java"><code class="language-java">array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array3 <span class="token operator">=</span> null<span class="token punctuation">;</span></code></pre><p>这些代码就是再生成2个2MB数组和个128KB数组，最后array3指向null，示意图如下</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028215314854.png" alt=""></p><p>接下来就运行最后一行代码<code>byte[] array4 = new byte[2 * 1024 * 1024];</code>这时候是放不下去的，必然会触发一次Young GC，看一下日志：</p><pre><code>0.403: [GC (Allocation Failure) 0.403: [ParNew: 7085K-&gt;0K(9216K), 0.0042709 secs] 7085K-&gt;521K(19456K), 0.0043461 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] </code></pre><p>第二次出发Young GC，此时发现<code>7085K-&gt;0K(9216K)</code>这就说明，第二次GC后新生代中没有对象了。没有任何对象是不可能的啊，我们的array2还指向这个变量呢。其实这会根据动态年龄判断规则，年龄1+年龄2+年龄n的对象总大小超过了Survivor区域的50%，年龄n以上的对象进入老年代。当然这里的对象都是年龄1的，所以直接全部进入老年代了。可以看到CMS管理的区域多了这么512KB。</p><pre><code>concurrent mark-sweep generation total 10240K, used 521K [0x00000007bf600000, 0x00000007c0000000, </code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028221106024.png" alt=""></p><p>然后array4变量引用的那个2MB的数组，此时就会分配到Eden区域中，如下图所示。所以日志中有这么几行（此时Survivor区域中的对象都到老年代去了）</p><pre><code>eden space 8192K,  26% used [0x00000007bec00000, 0x00000007bee14930, 0x00000007bf400000)from space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000)  to   space 1024K,   0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000)</code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028221134196.png" alt=""></p><h3 id="3、场景二（Survivor放不下则直接进老年代）"><a href="#3、场景二（Survivor放不下则直接进老年代）" class="headerlink" title="3、场景二（Survivor放不下则直接进老年代）"></a>3、场景二（Survivor放不下则直接进老年代）</h3><p>抛出问题：那些放不下的对象，是全部进入老年代还是部分进入老年代呢？</p><p>JVM参数和场景一相同</p><h4 id="（1）代码测试并分析GC日志"><a href="#（1）代码测试并分析GC日志" class="headerlink" title="（1）代码测试并分析GC日志"></a>（1）代码测试并分析GC日志</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>Java HotSpot(TM) 64-Bit Server VM (25.212-b10) for bsd-amd64 JRE (1.8.0_212-b10), built on Apr  1 2019 23:10:56 by &quot;java_re&quot; with gcc 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)Memory: 4k page, physical 16777216k(407972k free)/proc/meminfo:CommandLine flags: -XX:InitialHeapSize=20971520 -XX:MaxHeapSize=20971520 -XX:MaxNewSize=10485760 -XX:MaxTenuringThreshold=15 -XX:NewSize=10485760 -XX:OldPLABSize=16 -XX:PretenureSizeThreshold=10485760 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:SurvivorRatio=8 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC 0.150: [GC (Allocation Failure) 0.150: [ParNew: 8179K-&gt;488K(9216K), 0.0023498 secs] 8179K-&gt;2538K(19456K), 0.0024491 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] Heap par new generation   total 9216K, used 2782K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)  eden space 8192K,  28% used [0x00000007bec00000, 0x00000007bee3d8a0, 0x00000007bf400000)  from space 1024K,  47% used [0x00000007bf500000, 0x00000007bf57a0a8, 0x00000007bf600000)  to   space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000) concurrent mark-sweep generation total 10240K, used 2050K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) Metaspace       used 2930K, capacity 4556K, committed 4864K, reserved 1056768K  class space    used 312K, capacity 392K, committed 512K, reserved 1048576K</code></pre><p><strong>分析：</strong></p><pre><code>byte[] array1 = new byte[2 * 1024 * 1024];array1 = new byte[2 * 1024 * 1024];array1 = new byte[2 * 1024 * 1024];byte[] array2 = new byte[128 * 1024];array2 = null;</code></pre><p>首先创建3个2MB的数组，最开始两个变成垃圾，只有最后一个被array1指向了，接着创建了一个128KB的数组，然后array2指向空，128KB的数组也变成垃圾，如图所示：</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028225839758.png" alt=""></p><p>此时我们执行<code>byte[] array3 = new byte[2 * 1024 * 1024];</code>代码，发现放不进Eden了，要进行第一次Young GC。查看日志，发现<code>ParNew: 8179K-&gt;488K(9216K)</code>，GC后还剩余488KB。情况是这样的，2个2MB和1个128KB的数组被回收掉了，最后剩下一个2MB的数组和488KB的未知对象，这两个加起来大于Survivor区的大小，所以直接进入老年代，但是并不是全部进去的，我们可以看到日志中又这么几行</p><pre><code>par new generation   total 9216K, used 2782K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)  eden space 8192K,  28% used [0x00000007bec00000, 0x00000007bee3d8a0, 0x00000007bf400000)  from space 1024K,  47% used [0x00000007bf500000, 0x00000007bf57a0a8, 0x00000007bf600000)  to   space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000) concurrent mark-sweep generation total 10240K, used 2050K [0x00000007bf600000, 0x00000007c0000000, </code></pre><p><code>concurrent mark-sweep generation total 10240K, used 2050K</code>说明那个原来存在的2MB的数组进了老年代，另外<code>from space 1024K,  47% used</code>说明了把这个位置对象放进了S1区，以及<code>eden space 8192K,  28% used</code>这个说明我们新创建的对象也放进了了Eden区。最后如图所示：</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028230455552.png" alt=""></p><h2 id="三、Old-GC场景模拟与日志分析"><a href="#三、Old-GC场景模拟与日志分析" class="headerlink" title="三、Old GC场景模拟与日志分析"></a>三、Old GC场景模拟与日志分析</h2><h3 id="1、JVM参数设置-1"><a href="#1、JVM参数设置-1" class="headerlink" title="1、JVM参数设置"></a>1、JVM参数设置</h3><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span>NewSize<span class="token operator">=</span><span class="token number">10485760</span> <span class="token operator">-</span>XX<span class="token operator">:</span>MaxNewSize<span class="token operator">=</span><span class="token number">10485760</span> <span class="token operator">-</span>XX<span class="token operator">:</span>InitialHeapSize<span class="token operator">=</span><span class="token number">20971520</span> <span class="token operator">-</span>XX<span class="token operator">:</span>MaxHeapSize<span class="token operator">=</span><span class="token number">20971520</span> <span class="token operator">-</span>XX<span class="token operator">:</span>SurvivorRatio<span class="token operator">=</span><span class="token number">8</span>  <span class="token operator">-</span>XX<span class="token operator">:</span>MaxTenuringThreshold<span class="token operator">=</span><span class="token number">15</span> <span class="token operator">-</span>XX<span class="token operator">:</span>PretenureSizeThreshold<span class="token operator">=</span><span class="token number">3145728</span>     <span class="token comment" spellcheck="true">//这里最大对象是3MB，超过则进入老年代</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseParNewGC <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseConcMarkSweepGC <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetails <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCTimeStamps <span class="token operator">-</span>Xloggc<span class="token operator">:</span>gc<span class="token punctuation">.</span>log</code></pre><h3 id="2、代码测试与日志分析"><a href="#2、代码测试与日志分析" class="headerlink" title="2、代码测试与日志分析"></a>2、代码测试与日志分析</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>日志如下</p><pre><code>Java HotSpot(TM) 64-Bit Server VM (25.212-b10) for bsd-amd64 JRE (1.8.0_212-b10), built on Apr  1 2019 23:10:56 by &quot;java_re&quot; with gcc 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)Memory: 4k page, physical 16777216k(912216k free)/proc/meminfo:CommandLine flags: -XX:InitialHeapSize=20971520 -XX:MaxHeapSize=20971520 -XX:MaxNewSize=10485760 -XX:MaxTenuringThreshold=15 -XX:NewSize=10485760 -XX:OldPLABSize=16 -XX:PretenureSizeThreshold=3145728 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:SurvivorRatio=8 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC 0.125: [GC (Allocation Failure) 0.125: [ParNew (promotion failed): 8179K-&gt;8785K(9216K), 0.0032460 secs]0.129: [CMS: 8194K-&gt;6722K(10240K), 0.0026381 secs] 12275K-&gt;6722K(19456K), [Metaspace: 2924K-&gt;2924K(1056768K)], 0.0060166 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 0.132: [GC (CMS Initial Mark) [1 CMS-initial-mark: 6722K(10240K)] 8770K(19456K), 0.0001890 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 0.132: [CMS-concurrent-mark-start]Heap par new generation   total 9216K, used 2294K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000)  eden space 8192K,  28% used [0x00000007bec00000, 0x00000007bee3d8a0, 0x00000007bf400000)  from space 1024K,   0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000)  to   space 1024K,   0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000) concurrent mark-sweep generation total 10240K, used 6722K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) Metaspace       used 2930K, capacity 4556K, committed 4864K, reserved 1056768K  class space    used 312K, capacity 392K, committed 512K, reserved 1048576K</code></pre><p>分析：</p><p>首先<code>byte[] array1 = new byte[4 * 1024 * 1024];</code>直接分配一个4MB大的对象，直接进入老年代，然后array1不指向它，它就变成了垃圾，接着有3个2MB大小的数组和1个128KB的数组进入Eden，如图：</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191028234906490.png" alt=""></p><p>再接下来去运行<code>byte[] array6 = new byte[2 * 1024 * 1024];</code>这个代码，新来的2MB数组放不下了就会产生第一次Young GC，日志中有一条<code>ParNew (promotion failed): 8179K-&gt;8785K(9216K),</code>这行日志显示了，Eden区原来是有8179多KB的对象，但是回收之后发现一个都回收不掉，因为都有引用，所以要放到老年代去，但是此时新生代对象总大小大于老年代可用空间，所以会先发生一次Old GC</p><pre><code>[CMS: 8194K-&gt;6722K(10240K), 0.0026381 secs] 12275K-&gt;6722K(19456K), [Metaspace: 2924K-&gt;2924K(1056768K)], 0.0060166 secs]</code></pre><p>此时执行了CMS垃圾回收器的Full GC，我们之前讲过Full GC其实就是会对老年代进行Old GC，同时一般会跟一次Young GC关联，还会触发一次元数据区（永久代）的GC。这里看到<code>CMS: 8194K-&gt;6722K(10240K)</code>，老年代从8MB左右的对象占用，变成了6MB左右的对象占用，这个过程是这样的：在CMS Full GC之前，就已经触发过Young GC了，它先把2个2MB的数组放进了老年代，剩下1个2MB和1和128KB的数组放不下了此时已用空间8MB（4+2+2）如图：</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191029000219984.png" alt=""></p><p>然后触发Full GC，回收掉其中的一个4MB的数组，接着放入进去1个2MB的数组和1个128KB的数组，就是8MB-4MB+2MB+128KB，大约6MB，此时最后一行代码要在年轻代分配2MB的数组就可以成功了，如图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191029000346921.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/09/04/OOM%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/09/04/OOM%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="OOM问题的分析与解决"><a href="#OOM问题的分析与解决" class="headerlink" title="OOM问题的分析与解决"></a>OOM问题的分析与解决</h1><h2 id="一、OOM原因与场景模拟"><a href="#一、OOM原因与场景模拟" class="headerlink" title="一、OOM原因与场景模拟"></a>一、OOM原因与场景模拟</h2><h3 id="1、Metaspace内存溢出"><a href="#1、Metaspace内存溢出" class="headerlink" title="1、Metaspace内存溢出"></a>1、Metaspace内存溢出</h3><h4 id="（1）原因"><a href="#（1）原因" class="headerlink" title="（1）原因"></a>（1）原因</h4><p>首先来讲Metaspace的回收，当Metaspace快满了就要进行回收，但是这个回收条件比较苛刻，比如这个类的类加载器要先被回收、这个类的所有实例对象要被回收等等，所以即使Metaspace满了，未必能回收掉很多类，腾不出太多空间，又要放进入，就会导致OOM，一般来说，Metaspace的OOM有两个原因</p><p><strong>第一个原因</strong>是我们忘记去设置永久区的大小了，默认永久区大小只有几十MB，太小了，我们一般设置为256MB～512MB。有两个参数是来设置区域大小的：<code>-XX:MetaspaceSize=512m</code>和<code>-XX:MaxMetaspaceSize=512m</code>。一般来说512MB足够！</p><p><strong>第二个原因</strong>是写系统的时候使用了cglib之类的技术，来动态的生成一些类，一旦没控制好生成类的个数就很容易把Metaspace塞满，引发内存溢出。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191101103540944.png" alt=""></p><p>示意图：内存溢出</p><h4 id="（2）场景模拟"><a href="#（2）场景模拟" class="headerlink" title="（2）场景模拟"></a>（2）场景模拟</h4><p>这里使用cglib来模拟Metaspace的OOM</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191101104842624.png" alt=""></p><p>使用cglib来增强Car类的run方法，实质就是cglib的Enhancer能在系统运行期间动态的生成Car的子类。在JVM参数中动点手脚，把Metaspace的区域限制得小一点：</p><pre><code>-XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m</code></pre><p>然后价格计数器来看它能生成多少个子类，得到日志</p><pre><code>Exception in thread &quot;main&quot; java.lang.IllegalStateException: Unable to load cache itemat net.sf.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:79)at net.sf.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:119)at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:294)at net.sf.cglib.reflect.FastClass$Generator.create(FastClass.java:65)at net.sf.cglib.proxy.MethodProxy.helper(MethodProxy.java:121)at net.sf.cglib.proxy.MethodProxy.init(MethodProxy.java:75)at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:226)at com.limao.demo.jvm.Demo1$1.intercept(Demo1.java:22)at com.limao.demo.jvm.Demo1$Car$$EnhancerByCGLIB$$7e5aa3a5_264.run(&lt;generated&gt;)at com.limao.demo.jvm.Demo1.main(Demo1.java:30)Caused by: java.lang.OutOfMemoryError: Metaspaceat java.lang.Class.forName0(Native Method)at java.lang.Class.forName(Class.java:348)at net.sf.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:467)at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:339)at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:96)at net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:94)at net.sf.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)at java.util.concurrent.FutureTask.run(FutureTask.java:266)at net.sf.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61)</code></pre><p>发送有一行就是OOM，明确告诉你溢出了。</p><p><strong>一般使用动态代理要记得用缓存！这个子类只要生成一次就可以了，下次能直接用，如果没有缓存这个动态生成的类，每次调用生成一个类，若线上负载很高，可能导致瞬间创建一大堆类，塞满元数据空间，直接OOM，系统崩溃。</strong></p><h3 id="2、栈内存溢出"><a href="#2、栈内存溢出" class="headerlink" title="2、栈内存溢出"></a>2、栈内存溢出</h3><h4 id="（1）原因-1"><a href="#（1）原因-1" class="headerlink" title="（1）原因"></a>（1）原因</h4><p>JVM把类加载进内存后，就通过main线程执行main方法，方法调用的栈帧不断压入虚拟机栈，这都是占栈内存的，每一个虚拟机栈的大小是固定的，比如1MB，虽然说一些变量和其他数据占卜了太多，但是这个<code>栈帧</code>是会占内存的，一个方法调用的栈帧要占个几百字节。如果我们不停的调用方法，不停的往栈里放入栈帧，就会导致OOM。</p><h4 id="（2）场景模拟-1"><a href="#（2）场景模拟-1" class="headerlink" title="（2）场景模拟"></a>（2）场景模拟</h4><p>代码设置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目前是第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>counter<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"次调用方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JVM参数设置</p><pre><code>-XX:ThreadStackSize=1m</code></pre><p>直接打印出结果</p><pre><code>目前是第5729次调用方法目前是第5730次调用方法Exception in thread &quot;main&quot; java.lang.StackOverflowError</code></pre><h4 id="（3）处理思路"><a href="#（3）处理思路" class="headerlink" title="（3）处理思路"></a>（3）处理思路</h4><p>在JVM参数中加入打印日志参数和内存快照参数，但是内存快照参数主要是分析堆内存的Metaspace的，对于栈内存而言不需要用。运行本地代码能够得到异常报错的调用栈，直接告诉你溢出问题来自哪个类的哪个方法，可以直接定位到。</p><pre class=" language-java"><code class="language-java">at com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>Demo2<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span>Demo2<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>Demo2<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span>Demo2<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">)</span></code></pre><h3 id="3、堆内存溢出"><a href="#3、堆内存溢出" class="headerlink" title="3、堆内存溢出"></a>3、堆内存溢出</h3><h4 id="（1）原因-2"><a href="#（1）原因-2" class="headerlink" title="（1）原因"></a>（1）原因</h4><p>对象进来先进入Eden区，Eden区满了则Young GC，多次GC后S区也满了，S区放不下放进了老年代，慢慢的，老年代也满了，那就得等CMS进行回收，如果此时Full GC后，依然存活下来很多对象，而此时又有对象要放进老年代，如果老年代空间不足，就会再出发Full GC，触发后还是没足够空间，如果还坚持要放就会导致OOM。</p><p><strong>总的来说，就是有限的空间放了过多的对象，大多数都是存活的，即使GC后也有很多存活的，再放进新的对象就不行了，此时就引发OOM了。</strong></p><p><strong>内存溢出的两个场景</strong></p><p><strong>第一个场景</strong>：系统承载高并发请求，因为请求量过大，导致大量对象都是存活的，所以要继续放入新的对象实在是不行了，此时就会引发OOM。</p><p><strong>第二个场景</strong>：系统有内存泄漏的问题，莫名其妙弄了很多的对象，结果对象都是存活的，没有及时取消对他们的引用，导致触发GC还是无法回收，此时只能引发内存溢出</p><p><strong>总的来说，一般引发OOM不是系统负载过高就是有内存泄漏问题。</strong></p><h4 id="（2）场景模拟-2"><a href="#（2）场景模拟-2" class="headerlink" title="（2）场景模拟"></a>（2）场景模拟</h4><p>代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目前创建了第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>counter<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JVM参数设置堆内存大小总共10MB，尽快触发溢出</p><pre><code>-XX:InitialHeapSize=10485760-XX:MaxHeapSize=10485760</code></pre><p>结果</p><pre><code>目前创建了第360145个对象Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</code></pre><h4 id="（3）处理思路-1"><a href="#（3）处理思路-1" class="headerlink" title="（3）处理思路"></a>（3）处理思路</h4><p>添加打印日志参数和堆内存快照参数，得到日志文件，中有这么几行，告诉我们堆内存溢出了</p><pre><code>java.lang.OutOfMemoryError: Java heap spaceDumping heap to ./java_pid1023.hprof ...Heap dump file created [13409210 bytes in 0.033 secs]Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</code></pre><p>接着我们用mat来分析</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191101123713956.png" alt=""></p><p>第一句话，这个main线程的局部变量引用了7203536个字节对象（7MB），我测试时候给堆内存总共是10MB，所以7MB差不多极限。第二句话，表明内存被一个Object的实例对象占满了。点开下方的Details就真相大白了</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191101124003886.png" alt=""></p><p>我们要知道这些对象是怎么创建的，就可以使用<code>See stacktrace</code></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191101124105414.png" alt=""></p><h2 id="二、OOM时自动dump内存快照"><a href="#二、OOM时自动dump内存快照" class="headerlink" title="二、OOM时自动dump内存快照"></a>二、OOM时自动dump内存快照</h2><p>解决OOM首先就要知道是什么对象导致了OOM，获取dump内存快照，使用mat工具来分析，此时需要在JVM中加入两个参数</p><pre><code>-XX:+HeapDumpOnOutOfMemoryError      //在OOM的时候自动dump内存快照出来-XX:HeapDumpPath=/usr/local/app/oom        //内存快照dump地址</code></pre><p>JVM参数模版</p><pre><code>-Xms4096M -Xmx4096M -Xmn3072M -Xss1M  -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFaction=92 -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=0 -XX:+CMSParallelInitialMarkEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -XX:+PrintGCDetails -Xloggc:gc.log -XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=/usr/local/app/oom”</code></pre><h2 id="三、导致OOM的实例"><a href="#三、导致OOM的实例" class="headerlink" title="三、导致OOM的实例"></a>三、导致OOM的实例</h2><h3 id="1、每秒仅上百请求的事故现场"><a href="#1、每秒仅上百请求的事故现场" class="headerlink" title="1、每秒仅上百请求的事故现场"></a>1、每秒仅上百请求的事故现场</h3><p>每秒仅100+请求的系统报警发生异常，第一件事就是登陆到线上机器去看日志文件。看到有这么一行</p><pre><code>Exception in thread &quot;http-nio-8080-exec-1089&quot; java.lang.OutOfMemoryError: Java heap space</code></pre><p>这里<code>http-nio-8080-exec-1089</code>说的其实就是Tomcat的工作线程。我们写的系统都是部署在Tomcat中的。最早我们会在IDE上写一堆的Servlet，然后打包之后放入Tomcat，再启动Tomcat，接着我们访问Tomcat监听的一个端口号（一般是8080），然后系统的功能就可以运行起来了。后来随着技术发展，我们不再写Servlet这么原始的东西了，有一些类似Spring MVC之类的框架把Servlet封装起来了，我们就基于Spring MVC之类的框架去开发。再到后来，越来越先进了，出现了Spring Boot，我们可以把Tomcat之类的Web容器都内嵌在系统里。再到后来甚至是基于Spring Cloud去开发分布式的系统。我们基于Spring Cloud、Spring Boot、Spring Web MVC等技术，写好一套系统，给打包之后，放入线上服务器中部署的Tomcat目录下，然后启动Tomcat就可以了。每当Tomcat间听到了请求，就会把请求交给框架去处理，框架会根据请求路径，找到代码中处理这个请求的Controller组件。如图。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191101125402691.png" alt=""></p><p>Tomcat自己本身就是个JVM进程，我们写好的系统只不过是一些代码，一个个类被Tomcat加载到内存中，由Tomcat来执行。Tomcat有很多的线程，少则100来个，多则三四百个，从8080端口上收到的请求就交给这些线程去做，这些线程收到请求后就回去调用框架的代码，框架再调用我们写好的代码，这基本就是Tomcat的底层原理了。如图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191101125659399.png" alt=""></p><p>碰到事故，首先先看是三个区域中哪里溢出了，其次看是哪个线程溢出的（MAT可以看有哪些线程存在），可能是Tomcat的线程，也可能是我们自己的线程。每个系统上线务必设置<code>-XX:+HeapDumpOnOutOfMemoryError</code>以及导出内存快照，排查问题基本依靠内存快照。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/09/02/CMS%E5%86%8D%E4%BC%98%E5%8C%96%E4%B8%8E%E9%A2%91%E7%B9%81FullGC%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/2019/09/02/CMS%E5%86%8D%E4%BC%98%E5%8C%96%E4%B8%8E%E9%A2%91%E7%B9%81FullGC%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="CMS再优化与频繁Full-GC问题分析"><a href="#CMS再优化与频繁Full-GC问题分析" class="headerlink" title="CMS再优化与频繁Full GC问题分析"></a>CMS再优化与频繁Full GC问题分析</h1><h2 id="一、CMS深度优化技巧"><a href="#一、CMS深度优化技巧" class="headerlink" title="一、CMS深度优化技巧"></a>一、CMS深度优化技巧</h2><h3 id="1、CMS内存碎片问题"><a href="#1、CMS内存碎片问题" class="headerlink" title="1、CMS内存碎片问题"></a>1、CMS内存碎片问题</h3><p>最常见的优化是用工具判断出来每次Young GC后存活对象有多少，Eden区域过小，自然会导致频繁的触发Young GC，Survivor区域过小，自然会导致经常在Young GC之后存活对象其实也没多少，但就是Survivor区域放不下，通过调整区域比例，避免对象快速进入老年代。这是优化的第一步，也是最容易想到的。</p><p>此外，比如老年代有2G的内存，其中1.5G是连续可用内存，0.5G是很多内存碎片。本来老年代如果都是连续空内存的话，那么可能可以对象占用到将近2G才会触发Full GC。结果现在就是对象占用到了1.5G就需要触发Full GC了，剩下0.5G是没法放任何对象的。所以，在第一步降低了Full GC频率之后，由于老年代使用CMS，它的默认碎片整理次数是每5次Full GC后整理一下内存碎片，务必设置如下参数-XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=0”，每次Full GC后都整理一下内存碎片，否则如果每次Full GC过后，都造成老年代里很多内存碎片，那么必然导致下一次Full GC更快到来。</p><h3 id="2、CMS深度优化"><a href="#2、CMS深度优化" class="headerlink" title="2、CMS深度优化"></a>2、CMS深度优化</h3><p>引入两外两个参数。</p><p>第一个参数是<code>-XX:+CMSParallelInitialMarkEnabled</code>。在使用CMS时的初始标记阶段，是会进行<code>Stop the World</code>的，会导致系统停顿，可以打开参数，这个参数会在CMS垃圾回收器的“初始标记”阶段开启多线程并发执行，可以尽可能优化这个阶段的性能，减少<code>Stop the World</code>的时间，</p><p>另外一个参数是<code>-XX:+CMSScavengeBeforeRemark</code>，这个参数会在CMS的重新标记阶段之前，先尽量执行一次Young GC。CMS的重新标记也是会Stop the World的，所以所以如果在重新标记之前，先执行一次Young GC，就会回收掉一些年轻代里没有人引用的对象。所以如果先提前回收掉一些对象，那么在CMS的重新标记阶段就可以少扫描一些对象，此时就可以提升CMS的重新标记阶段的性能，减少他的耗时。</p><p>小型业务JVM模版</p><pre><code>-Xms4096M -Xmx4096M -Xmn3072M -Xss1M  -XX:PermSize=256M -XX:MaxPermSize=256M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFaction=92 -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=0 -XX:+CMSParallelInitialMarkEnabled -XX:+CMSScavengeBeforeRemark</code></pre><h2 id="二、四大频繁Full-GC原因分析"><a href="#二、四大频繁Full-GC原因分析" class="headerlink" title="二、四大频繁Full GC原因分析"></a>二、四大频繁Full GC原因分析</h2><h3 id="1、大量反射代码使永久代类太多导致频繁Full-GC"><a href="#1、大量反射代码使永久代类太多导致频繁Full-GC" class="headerlink" title="1、大量反射代码使永久代类太多导致频繁Full GC"></a>1、大量反射代码使永久代类太多导致频繁Full GC</h3><p>频繁Full GC不光是老年代触发的，有时候也会因为Metaspace区域的类太多而触发，也是就是Metaspace区域被占满，Full GC 的时候回收其中部分类，我们想了解Metaspace为什么被频繁占满，是哪个类不停的被加载进入，就可以使用下面的两个参数，很有用！</p><p>第一个参数是<code>-XX:TraceClassLoading</code>,第二个参数是<code>-XX:TraceClassUnloading</code>，分别追踪类加载和类卸载的情况，他会通过日志打印出来JVM中加载了哪些类，卸载了哪些类。对于这些类，通过查资料就会明白了，有一个案例说是java中反射时加载的类，执行反射代码时，JVM会在你反射调用一定次数之后就动态生成一些类。<strong>只要记住一个结论：如果你在代码里大量用了类似上面的反射的东西，那么JVM就是会动态的去生成一些类放入Metaspace区域里的。</strong></p><h4 id="（1）为什么会这些类会被放进Metaspace呢？"><a href="#（1）为什么会这些类会被放进Metaspace呢？" class="headerlink" title="（1）为什么会这些类会被放进Metaspace呢？"></a>（1）为什么会这些类会被放进Metaspace呢？</h4><p>反射过程中生成的类的Class对象，都是软引用的，正常情况下不会被回收！（什么是Class对象？类自己本身就是一个对象，就是一个Class的对象，一个Class对象代表了一个类，这个Class对象能够派生出很多的实例）</p><h4 id="（2）什么时候软引用会被回收呢？"><a href="#（2）什么时候软引用会被回收呢？" class="headerlink" title="（2）什么时候软引用会被回收呢？"></a>（2）什么时候软引用会被回收呢？</h4><p>通过这个公式来判断<code>clock - timestamp &lt;= freespace * SoftRefLRUPolicyMSPerMB</code>,“clock - timestamp”代表了一个软引用对象他有多久没被访问过了，freespace代表JVM中的空闲内存空间，SoftRefLRUPolicyMSPerMB代表每一MB空闲内存空间可以允许SoftReference对象存活多久,默认是1000毫秒。假如JVM空闲空间为3000MB，那么一个软引用的对象最多可以活50分钟（3000*1000ms）。</p><h4 id="（3）解决方案"><a href="#（3）解决方案" class="headerlink" title="（3）解决方案"></a>（3）解决方案</h4><p>按理说JVM应该会随着反射代码的执行，动态的创建一些奇怪的类，他们的Class对象都是软引用的，正常情况下不会被回收，但是也不应该快速增长才对，问题出在<code>SoftRefLRUPolicyMSPerMB</code>这个参数，别误把它设置为0，一旦这个参数设置为0，任何软引用对象就可以尽快释放掉，但这样并不会提高内存利用率，JVM好不容易给你弄出来100个奇怪的类，结果因为瞎设置软引用的参数，导致突然一次GC就给你回收掉几十个类，接着JVM在反射代码执行的过程中，就会继续创建这种奇怪的类，在JVM的机制之下，会导致这种奇怪类越来越多。</p><p>解决方案：在有大量反射代码的场景下，只要把<code>-XX:SoftRefLRUPolicyMSPerMB=0</code>，这个参数设置大一些即可，千万别让一些新手同学设置为0，可以设置个1000，2000，3000，或者5000毫秒，都可以。提高这个数值，就是让反射过程中JVM自动创建的软引用的一些类的Class对象不要被随便回收，优化这个参数之后，就可以看到系统稳定运行了。</p><h3 id="2、大对象导致频繁Full-GC"><a href="#2、大对象导致频繁Full-GC" class="headerlink" title="2、大对象导致频繁Full GC"></a>2、大对象导致频繁Full GC</h3><p>场景是这样的，有一个线上系统一天频繁Full GC数十次，开始以为是每次Young GC后的存活对象较多，Survivor区域太小，放不下了，但通过jstat工具观察，发现每次Young GC后的对象很少，每次存活也就几十MB，且通过jstat追踪观察，并不是每次Young GC后都有几十MB对象进入老年代的，而是偶尔一次Young GC才会有几十MB对象进入老年代，记住，是偶尔一次！但是不知道为什么突然有几百MB对象进入老年代中，所以才导致Young GC偶尔一次让几十MB对象升入老年代，平均30分钟左右就会触发一次Full GC！这个几百MB的对象就是<strong>大对象</strong>，我们想要知道大对象是谁，可以利用堆内存快照工具jmap，通过使用这个工具我们发现是几个Map之类的数据结构，是从数据库中出来的，通过排查SQL语句，发现有一句<code>select * from tbl</code>，根本没使用where语句，导致它把表中几十万条数据查出来，搞出来一个大对象。</p><p><strong>解决方案</strong>，一是对SQL语句的处理，不要一次性查表里全部数据，二是给新生代分配更多的空间，毕竟每次到老年代的对象较少而且频率很低，同时给老年代调整了参数“-XX:CMSInitiatingOccupancyFraction=92”，避免老年代仅仅占用68%就触发GC。</p><h3 id="3、致命代码：System-gc-导致频繁Full-GC"><a href="#3、致命代码：System-gc-导致频繁Full-GC" class="headerlink" title="3、致命代码：System.gc()导致频繁Full GC"></a>3、致命代码：<strong>System.gc()</strong>导致频繁Full GC</h3><p><strong><code>System.gc()</code></strong>不能随便瞎写，它每次执行都会指挥JVM去尝试执行一次Full GC，连带年轻代、老年代、永久代都会去回收，一秒一次Full GC太可怕了！如果写了这个代码，平时系统运行时，访问量很低，基本还不会出大乱子！但是在大促活动的时候，访问量一高，立马由<code>System.gc()</code>代码频繁触发了Full GC，导致了这个系统直接被卡死了！</p><p><strong>解决方案</strong>：一是平时写代码不要用<code>System.gc()</code>去随便触发GC，二是在JVM参数中加入<code>-XX:+DisableExplicitGC</code>,这个参数的意思就是禁止显式执行GC，不允许你来通过代码触发GC。</p><h3 id="4、内存泄漏引起CPU高负载导致频繁Full-GC"><a href="#4、内存泄漏引起CPU高负载导致频繁Full-GC" class="headerlink" title="4、内存泄漏引起CPU高负载导致频繁Full GC"></a>4、内存泄漏引起CPU高负载导致频繁Full GC</h3><p>线上系统的机器CPU负载过高的两个常见的场景。</p><p><strong>第一个场景</strong>，是你自己在系统里创建了大量的线程，这些线程同时并发运行，而且工作负载都很重，过多的线程同时并发运行就会导致你的机器CPU负载过高。</p><p><strong>第二个场景</strong>，就是你的机器上运行的JVM在执行频繁的Full GC，Full GC是非常耗费CPU资源的，他是一个非常重负载的过程。所以一旦你的JVM有频繁的Full GC，带来的一个明显的感觉，一个是系统可能时不时会卡死。这可能与内存泄漏有关。</p><p><strong>内存泄漏问题</strong>，就是内存里驻留了大量的对象塞满了老年代，导致稍微有一些对象进入老年代就会引发Full GC，而且Full GC之后还不会回收掉老年代里大量的对象，只是回收一小部分而已！（可以使用mat分析内存泄漏）</p><p>这个内存泄漏问题可能是没有限制JVM本次缓存大小，没有使用LRU之类的算法定期淘汰一些缓存里的数据，导致缓存在内存里的对象越来越多，进而造成了内存泄漏。</p><p>解决问题很简单，只要使用类似EHCache之类的缓存框架就可以了，他会固定最多缓存多少个对象，定期淘汰删除掉一些不怎么访问的缓存，以便于新的数据可以进入缓存中。</p><h2 id="三、JVM优化阶段性总结"><a href="#三、JVM优化阶段性总结" class="headerlink" title="三、JVM优化阶段性总结"></a>三、JVM优化阶段性总结</h2><h3 id="问：如何设置JVM参数？"><a href="#问：如何设置JVM参数？" class="headerlink" title="问：如何设置JVM参数？"></a>问：如何设置JVM参数？</h3><h4 id="1、初步估计"><a href="#1、初步估计" class="headerlink" title="1、初步估计"></a>1、初步估计</h4><p>首先根据拥有的设备、每秒请求量、每秒创建多少个对象以及对象的大小等来估算1秒钟会占用多少内存空间，估算多久发生一次Young GC、每次存活下来多少对象，需要多少Survivor区，接着要去看老年代中对象的增长速度，多久发生一次Full GC，这样初步估算后去分配堆内存中新生代和老年代的空间，以及新生代中区域的比例。进入压测阶段。</p><h4 id="2、压测后调整"><a href="#2、压测后调整" class="headerlink" title="2、压测后调整"></a>2、压测后调整</h4><p>在这里要分析Eden区对象的增长速度有多快，Young GC后有多少对象存活，Young GC频率和耗时，老年代对象增长速率，Full GC后有多少对象存活，Full GC的频率和耗时。压测完全可以通过jstat来看，然后我们调整参数，找到一些问题，主要还是避免对象频繁进入老年代引起频繁的Full GC。</p><h4 id="3、系统上线后监控"><a href="#3、系统上线后监控" class="headerlink" title="3、系统上线后监控"></a>3、系统上线后监控</h4><p>系统上线后要使用监控工具如Zabbix、Open-Falcon等工具来监控运行情况。如果出现了CPU负载过高、频繁Full GC或者系统无法处理请求这种现象，都要去考虑是不是Full GC太频繁了。</p><p>频繁Full GC 的原因就是上面四个大标题</p><ul><li>大量使用反射导致Metaspace拥挤发生频繁的Full GC。</li><li>大对象可能引起频繁Full GC，需要去修改代码和JVM参数。</li><li>可能是内存泄漏引起的，使用MAT工具分析堆内存快照。</li><li>最后一种是使用了System.gc()方法，并且在JVM参数中也没有添加禁止显式执行gc的参数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/08/31/JVM%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/31/JVM%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM工具的使用"><a href="#JVM工具的使用" class="headerlink" title="JVM工具的使用"></a>JVM工具的使用</h1><h2 id="一、jstat"><a href="#一、jstat" class="headerlink" title="一、jstat"></a>一、jstat</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>jstat可以让你看到当前运行中的系统，他的JVM内的Eden、Survivor、老年代的内存使用情况，还有Young GC和Full gC的执行次数以及耗时。通过这些指标，我们可以轻松的分析出当前系统的运行情况，判断当前系统的内存使用压力以及GC压力，还有就是内存分配是否合理。</p><h3 id="2、命令"><a href="#2、命令" class="headerlink" title="2、命令"></a>2、命令</h3><h4 id="（1）jps命令"><a href="#（1）jps命令" class="headerlink" title="（1）jps命令"></a>（1）jps命令</h4><p>jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令。</p><ul><li><code>jps -q</code>：只显示pid</li><li><code>jps -m</code>：输出传递给main 方法的参数</li><li><code>jps -l</code>：输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</li><li><code>jps -v</code>：输出传递给JVM的参数</li></ul><h4 id="（2）jstat命令"><a href="#（2）jstat命令" class="headerlink" title="（2）jstat命令"></a>（2）jstat命令</h4><p>命令格式：jstat [option] LVMID [interval] [count]</p><ul><li><code>option</code> : 操作参数、<code>LVMID</code>: 本地虚拟机进程ID、<code>interval]</code>: 连续输出的时间间隔、<code>count</code> : 连续输出的次数</li><li><code>jstat -gc PID</code>：查看Java进程（JVM）的内存和GC情况，最常用的命令</li><li><code>jstat -gccapacity PID</code>：堆内存分析</li><li><code>jstat -gcnew PID</code>：年轻代GC分析，这里的TT和MTT可以看到对象在年轻代存活的年龄和存活的最大年龄</li><li><code>jstat -gcnewcapacity PID</code>：年轻代内存分析</li><li><code>jstat -gcold PID</code>：老年代GC分析</li><li><code>jstat -gcoldcapacity PID</code>：老年代内存分析</li><li><code>jstat -gcmetacapacity PID</code>：元数据区内存分析</li></ul><h4 id="（3）命令结果解释"><a href="#（3）命令结果解释" class="headerlink" title="（3）命令结果解释"></a>（3）命令结果解释</h4><ul><li><code>S0C</code>：这是From Survivor区的大小</li><li><code>S1C</code>：这是To Survivor区的大小</li><li><code>S0U</code>：这是From Survivor区当前使用的内存大小</li><li><code>S1U</code>：这是To Survivor区当前使用的内存大小</li><li><code>EC</code>：这是Eden区的大小</li><li><code>EU</code>：这是Eden区当前使用的内存大小</li><li><code>OC</code>：这是老年代的大小</li><li><code>OU</code>：这是老年代当前使用的内存大小</li><li><code>MC</code>：这是方法区（永久代、元数据区）的大小</li><li><code>MU</code>：这是方法区（永久代、元数据区）的当前使用的内存大小</li><li><code>YGC</code>：这是系统运行迄今为止的Young GC次数</li><li><code>YGCT</code>：这是Young GC的耗时</li><li><code>FGC</code>：这是系统运行迄今为止的Full GC次数</li><li><code>FGCT</code>：这是Full GC的耗时</li><li><code>GCT</code>：这是所有GC的总耗时</li></ul><h3 id="3、工具使用姿势"><a href="#3、工具使用姿势" class="headerlink" title="3、工具使用姿势"></a>3、工具使用姿势</h3><p>使用jstat来分析线上的JVM进程，要知道的信息有如下几个：新生代对象增长的速率、Young GC的触发频率、Young GC的耗时、每次Young GC后有多少对象是存活下来的、每次Young GC过后有多少对象进入了老年代、老年代对象增长的速率、Full GC的触发频率、Full GC的耗时等。知道了这些就能进行优化了。</p><h4 id="（1）新生代对象增长速率"><a href="#（1）新生代对象增长速率" class="headerlink" title="（1）新生代对象增长速率"></a>（1）新生代对象增长速率</h4><p>使用<code>jstat -gc PID 1000 10</code>，每隔1秒钟更新出来最新的一行jstat统计信息，通过这个命令，你可以非常灵活的对线上机器通过固定频率输出统计信息，观察每隔一段时间的jvm中的Eden区对象占用变化。时间段可以根据对象增长速度来设定。还有就是一般系统都有高峰和日常两种状态，比如系统高峰期用的人很多，此时你就应该在系统高峰期去用上述命令看看高峰期的对象增长速率。然后你再得在非高峰的日常时间段内看看对象的增长速率。</p><h4 id="（2）Young-GC触发一频率和耗时"><a href="#（2）Young-GC触发一频率和耗时" class="headerlink" title="（2）Young GC触发一频率和耗时"></a>（2）Young GC触发一频率和耗时</h4><p>知道了新生代对象增长速度，就可以估计Young GC的时间了，同时jstat会告诉你迄今为止系统已经发生了多少次Young GC以及这些Young GC的总耗时。比如系统运行24小时后共发生了100次Young GC，总耗时为20s。那么平均下来每次Young GC大概就耗时二十毫秒的时间。</p><h4 id="（3）每次Young-GC后有多少对象进入老年代"><a href="#（3）每次Young-GC后有多少对象进入老年代" class="headerlink" title="（3）每次Young GC后有多少对象进入老年代"></a>（3）每次Young GC后有多少对象进入老年代</h4><p>这个对象量只能估算出来，我们知道了多久发生一次Young GC，假设为t，可以利用<code>jstat -gc PID t 10</code>看看，每隔t分钟后Eden、Survivor、老年代的对象变化。老年代中内存占用会慢慢增加，这里的关键，就是观察老年代的对象增长速率。正常的角度来看，老年代的对象是不太可能不停的快速增长的，普通的系统其实没那么多长期存活的对象。如果你发现比如每次Young GC过后，老年代对象都要增长几十MB，那很有可能就是你一次Young GC过后存活对象太多了。如果老年代对象快速增长，那一定是不正常的。</p><h4 id="（4）Full-GC出发时机和耗时"><a href="#（4）Full-GC出发时机和耗时" class="headerlink" title="（4）Full GC出发时机和耗时"></a>（4）Full GC出发时机和耗时</h4><p>知道了老年代对象的增长速率，那么Full GC的触发时机就很清晰了，jstat可以打印Full GC次数以及总耗时。</p><h2 id="二、jmap和jhat"><a href="#二、jmap和jhat" class="headerlink" title="二、jmap和jhat"></a>二、jmap和jhat</h2><p>这两个工具可以帮助我们观察线上JVM中的对象分布，了解到系统运行过程中，到底哪些对象占据了主角位置，他们占据了多少内存空间。这篇<a href="https://www.cnblogs.com/ityouknow/p/5714703.html" target="_blank" rel="noopener">博客</a>写的非常详细！</p><h3 id="1、jmap"><a href="#1、jmap" class="headerlink" title="1、jmap"></a>1、jmap</h3><p>单单看JVM运行状况，jstat足够用了，如果发现JVM新对象增加速度很快，想看这个对象是谁，可以用jmap。</p><ul><li><code>jmap -heap PID</code>：系统运行时内存区域信息。这个会打印出来堆内存相关的一些参数设置，以及当前堆内存里的一些基本各个区域的情况。</li><li><code>jmap -histo PID</code>：系统运行时的对象分布，他会按照各种对象占用内存空间的大小降序排列，把占用内存最多的对象放在最上面。</li></ul><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191030143932022.png" alt=""></p><ul><li><code>jmap -dump:live,format=b,file=dump.hprof PID</code>:把这一时刻JVM堆内存里所有对象的快照放到文件里去了，供你后续去分析。</li></ul><h3 id="2、jhat"><a href="#2、jhat" class="headerlink" title="2、jhat"></a>2、jhat</h3><p>通过jmap得到了堆内存快照，可以利用jhat去分析堆内存快照，jhat内置了web服务器，他会支持你通过浏览器来以图形化的方式分析堆转储快照。使用<code>jhat dump.hprof -port 7000</code>命令即可启动jhat服务器，还可以指定自己想要的http端口号，默认是7000端口号,接着你就在浏览器上访问当前这台机器的7000端口号，就可以通过图形化的方式去分析堆内存里的对象分布情况了。</p><h2 id="三、JVM监控工具"><a href="#三、JVM监控工具" class="headerlink" title="三、JVM监控工具"></a>三、JVM监控工具</h2><p>很多中大型公司都会部署专门的监控系统，比较常见的有Zabbix、OpenFalcon、Ganglia，此时你就可以在这些监控系统可视化的界面里，看到你需要的所有指标，包括你的各个内存区域的对象占用变化曲线，直接可以看到Eden区的对象增速，还会告诉你Young GC发生的频率以及耗时，包括老年代的对象增速以及Full GC的频率和耗时。<strong>对线上运行的系统，要不然用命令行工具手动监控，发现问题就优化，要不然就是依托公司的监控系统进行自动监控，可视化查看日常系统的运行状态。</strong></p><h2 id="四、Young-GC实战"><a href="#四、Young-GC实战" class="headerlink" title="四、Young GC实战"></a>四、Young GC实战</h2><p>模拟电商订单系统，机器4核8G，堆内存中的新生代分配的内存都在1.5G左右，Eden区大概也就1G左右的空间，假设每台机器500个请求，每个请求需要加载100KB的数据，1秒就是50MB，大概20s左右就会填满Eden区然后触发Young GC进行回收。</p><pre><code>-XX:NewSize=104857600         //新生代100MB-XX:MaxNewSize=104857600 -XX:InitialHeapSize=209715200        //堆内存200MB-XX:MaxHeapSize=209715200 -XX:SurvivorRatio=8        //Eden80MB，S区各占10MB      -XX:MaxTenuringThreshold=15 -XX:PretenureSizeThreshold=3145728 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//模拟系统按照每秒钟50个请求，每个请求加载100KB数据的方式不停的运行，每秒5MB</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data <span class="token operator">=</span> null<span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动！首先找到进程号</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191030153448868.png" alt=""></p><p>接着输入jstat命令</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191030153630314.png" alt=""></p><p>观察<code>EU</code>可以发现Eden刚开始被用了8MB左右，然后以5MB/s速度增长，Eden一共80MB，当使用量达到70多MB的时候，再要分配5MB的对象就失败了，此时就会触发一次Young GC，Eden区的使用量从70多MB降低为了1MB多，大致在十几秒左右会触发一次Young GC，同时我们也看到回收对象也只用了0.002s，速度非常快。，<code>S1U</code>就是Survivor中被使用的内存，之前一直是0，在一次Young GC过后变成了875.3KB，所以一次Young GC后也就存活875.3KB的对象而已，轻松放入10MB的Survivor中。同时<code>OU</code>一直都是0 ，说明这个系统运行良好，Young GC都不会导致对象进入老年代，这就几乎不需要什么优化了。因为几乎可以默认老年代对象增速为0，Full  GC发生频率趋向于0，对系统无影响。</p><h2 id="五、Full-GC实战"><a href="#五、Full-GC实战" class="headerlink" title="五、Full GC实战"></a>五、Full GC实战</h2><h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>百亿数据量计算系统，从数据库中提取数据到内存中来计算。这是一套分布式运行系统，平均每台机器每分钟执行100次数据提取和计算，每次会提取大概1万条左右的数据到内存里来计算，平均每次计算大概需要耗费10秒左右的时间。机器4核8G，JVM内存给4G，新生代老年代分别1.5G。这里每条数据都是比较大的，大概每条数据包含了平均20个字段，可以认为平均每条数据在1KB左右的大小，1万条数据就对应了10MB的大小。新生代按8:1:1，则Eden占1.2GB，每个S区占100MB，这样一分钟大概对应100次计算任务，Eden区大概满了，执行Young GC前会检查老年代可用空间，那么此时Eden区里有多少对象还是存活的，无法被垃圾回收呢？每个计算任务1万条数据需要计算10秒钟，所以假设此时80个计算任务都执行结束了，但是还有20个计算任务共计200MB的数据，还在计算中，那么此时就是200MB的对象是存活的，不能被垃圾回收掉，然后有1GB的对象是可以垃圾回收的，由于Survivor区实际上就100MB的空间，此时就会通过空间担保机制，让这200MB对象直接进入老年代去。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191030155206552.png" alt=""></p><p>按照上述计算，每分钟都是一个轮回，大概算下来是每分钟都会把新生代的Eden区填满，然后触发一次Minor GC，然后大概都会有200MB左右的数据进入老年代，所以大概在8分钟左右，新生代慢了，要进入老年代，但是老年代放不下了，要进行GC。假设此时老年代被占据的1.4G空间里，全部都是可以回收的对象，那么此时一次性就会把这些对象都给回收了，然后这200MB对象再进入老年代，再回到上图的结果。</p><h3 id="2、优化"><a href="#2、优化" class="headerlink" title="2、优化"></a>2、优化</h3><p>因为这个系统是数据计算系统，每次Minor GC的时候，必然会有一批数据没计算完毕，但是按照现有的内存模型，最大的问题，其实就是 每次Survivor区域放不下存活对象。所以就增加了新生代的内存比例，3GB左右的堆内存，其中2GB分配给新生代，1GB留给老年代，这样Survivor区大概就是200MB，每次刚好能放得下Minor GC过后存活的对象了。</p><h3 id="3、场景模拟"><a href="#3、场景模拟" class="headerlink" title="3、场景模拟"></a>3、场景模拟</h3><p>JVM参数唯一修改的就是“<strong>-XX:PretenureSizeThreshold</strong>”，把大对象阈值修改为了20MB，避免程序里分配的大对象直接进入老年代。</p><pre><code>-XX:NewSize=104857600 -XX:MaxNewSize=104857600 -XX:InitialHeapSize=209715200 -XX:MaxHeapSize=209715200 -XX:SurvivorRatio=8  -XX:MaxTenuringThreshold=15 -XX:PretenureSizeThreshold=20971520 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</code></pre><p>代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>每秒钟都会执行一次loadData()方法，他会分配4个10MB的数组，但是都立马成为垃圾，但是会有data1和data2两个10MB的数组是被变量引用必须存活的，此时Eden区已经占用了六七十MB空间了，接着是data3变量依次指向了两个10MB的数组，这是为了在1s内触发Young GC的。采用jstat监控其运行状态可以看到如下的信息：</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191030160946794.png" alt=""></p><p>按照我们上述的代码，他一定会在一秒内触发一次Young GC，Young GC过后，我们发现S1U中有798.8KB的存活对象，就是未知存活对象，同时每秒会发生一次Young GC，都会导致20MB~30MB左右的对象进入老年代（因为Survivor区域是放不下只能进老年代），然后老年代的对象占用从30KB一路到60MB左右，此时突然在60MB之后下一秒，明显发生了一次Full GC。</p><p>从<code>YGC</code>可以看到，23次Young GC，结果耗费了105毫秒，平均下来一次Young GC要5毫秒左右。但是11次Full GC才耗费22毫秒，平均下来一次Full GC才耗费2毫秒，这是因为这个Full GC是由Young GC触发的，必须得等Full GC执行完毕了，Young GC才能把存活对象放入老年代才算结束，导致Young GC速度非常慢。</p><h3 id="4、场景优化"><a href="#4、场景优化" class="headerlink" title="4、场景优化"></a>4、场景优化</h3><p>JVM参数</p><pre><code>-XX:NewSize=209715200 -XX:MaxNewSize=209715200 -XX:InitialHeapSize=314572800     //调整到300MB-XX:MaxHeapSize=314572800 -XX:SurvivorRatio=2            //调整为2:1:1-XX:MaxTenuringThreshold=15 -XX:PretenureSizeThreshold=20971520 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log</code></pre><p>把堆大小从200MB调整到300MB，新生代给了200MB，同时<code>-XX:SurvivorRatio=2</code>表明，Eden:Survivor:Survivor的比例为2:1:1，所以Eden区是100MB，每个Survivor区是50MB，老年代也是100MB。运行程序，结果如下：</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20191030162026117.png" alt=""></p><p>可以看到，只有Young GC，没有Full GC，没有Full GC的干扰后，Young GC速度是很快的</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/08/29/JVM%E4%B9%8BG1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%9B%9E%E6%94%B6%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2019/08/29/JVM%E4%B9%8BG1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%9B%9E%E6%94%B6%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="G1垃圾回收器详解与回收性能优化"><a href="#G1垃圾回收器详解与回收性能优化" class="headerlink" title="G1垃圾回收器详解与回收性能优化"></a>G1垃圾回收器详解与回收性能优化</h1><h2 id="一、G1的引出"><a href="#一、G1的引出" class="headerlink" title="一、G1的引出"></a>一、G1的引出</h2><h3 id="1、G1与堆内存"><a href="#1、G1与堆内存" class="headerlink" title="1、G1与堆内存"></a>1、G1与堆内存</h3><p>&emsp;&emsp;新生代还是老年代，<code>Stop the World</code>是最大的痛点，它们都会产生这个现象，影响系统的运行，所有垃圾回收器的优化都是朝着减少STW的目标去做的，G1便应运而生了。G1可以同时回收新生代和老年代，<strong>它的最大特点，就是把Java堆内存拆分为多个大小相等的<code>Region</code></strong>，如图，所以G1的新生代老年代是一种逻辑上的概念了，新生代可能包含了某些<code>Region</code>，老年代可能包含了某些<code>Reigon</code>。<strong>另一个最大特点，就是允许我们设置一个垃圾回收的预期停顿时间，比如我们可以指定1小时内回收垃圾的时候产生的STW时间要小于1min</strong></p><p>&emsp;&emsp;<strong>G1相比之前的垃圾回收器，最大进步就是STW可控</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172228596.png" alt=""></p><p>&emsp;&emsp;给整个堆内存设置了大小后，启动JVM，一旦发现你使用的是G1垃圾回收器（通过使用<code>-XX:+UseG1GC</code>这个参数来设置），那就会自动用堆内存大小除以2048（默认情况下是这个，当然我们可以通过<code>-XX:G1HeapRegionSize</code>参数来指定），因为最多可以有2048个Region，Region的大小为2的倍数，比如堆内存给2G，那Region可能是1MB、2MB、4MB这样的，堆内存给4G，那每个Region就是2MB。</p><p>&emsp;&emsp;Region区域既有新生代，也有老年代，这时候就不需要去给他们分配内存了，这两个区域是由G1控制，不停变动的。默认新生代堆内存占比是5%，当然可以通过<code>-XX:G1NewSizePercent</code>参数来设置新生代初始占比，一般都是维持这个默认值，因为系统运行时会动态变化。</p><p>&emsp;&emsp;此外，新生代还是有Eden和Survivor划分的，之前有个参数是<code>-XX:SurvivorRatio=8</code>，意思是说80%的Eden，20%的Survivor，在这里，比如新生代初始共100个Region，那就是80个Eden，两个Survivor各占十个。随着动态分配，比如新生代的Region不断增加，那么Eden和Survivor对应的Region也会不断增加。</p><h3 id="2、G1如果做到对于系统的停顿可控的？"><a href="#2、G1如果做到对于系统的停顿可控的？" class="headerlink" title="2、G1如果做到对于系统的停顿可控的？"></a>2、G1如果做到对于系统的停顿可控的？</h3><p>&emsp;&emsp;G1要做到这一点必须<strong>追踪每一个Region的回收价值</strong>，所谓回收价值就是根据设定的预期系统停顿时间，来选择<strong>最少回收时间和最多回收对象的Region进行垃圾回收</strong>，保证GC对系统停顿的影响在可控范围内，同时还能尽可能回收最多的对象。（有点类似贪心算法）。</p><h2 id="二、G1的垃圾回收机制"><a href="#二、G1的垃圾回收机制" class="headerlink" title="二、G1的垃圾回收机制"></a>二、G1的垃圾回收机制</h2><h3 id="1、G1新生代Region的垃圾回收"><a href="#1、G1新生代Region的垃圾回收" class="headerlink" title="1、G1新生代Region的垃圾回收"></a>1、G1新生代Region的垃圾回收</h3><p>前提：新生代占据了整个堆大小的60%。（比如我们划分了2000个Region，差不多有1200个新生代Region，其中Eden占1000个，每个Survivor各占100个，如图）</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172239966.png" alt=""></p><p>这时候还是会触发Minor GC，使用复制算法，进入<code>Stop the World</code>，把Eden中活着的对象放进S1对应的Region，然后回收。看起来和ParNew没区别，其实是有区别的，因为我们给G1设定了停顿时间（参数<code>-XX:MaxGCPauseMills</code>,默认200ms），那么G1首先会对每个Region追踪回收的时间，再选择，来尽可能多回收掉一点对象。</p><p><strong>当然也有进入老年代的几种情况：</strong></p><ul><li><p><strong>第一种</strong>是超过我们设定的年龄阈值的对象，就会进入老年代Region；</p></li><li><p><strong>第二种</strong>是存活的对象超过了Survivor的50%（动态年龄判断规则）</p></li></ul><p><strong>对于大对象的处理，不放入老年代</strong>!!G1提供了专门的Region来存放大对象（并不是60%新生代，40%老年代，动态变化的，G1会自己处理），只要一个对象超过了一个Region大小的50%，就会被放过去，这个对象如果太大，还可以横跨多个Region来存放。另外大对象的回收是跟着新生代老年代的回收一起进行的。</p><h3 id="2、G1混合垃圾回收——Mixed-GC"><a href="#2、G1混合垃圾回收——Mixed-GC" class="headerlink" title="2、G1混合垃圾回收——Mixed GC"></a>2、G1混合垃圾回收——Mixed GC</h3><h4 id="（1）Mixed-GC的触发时机"><a href="#（1）Mixed-GC的触发时机" class="headerlink" title="（1）Mixed GC的触发时机"></a>（1）Mixed GC的触发时机</h4><p>G1有一个参数，是<code>-XX:InitiatingHeapOccupancyPercent</code>，他的默认值是45%,这个参数的意思是如果老年代占据了堆内存的45%的Region的时候，此时就会尝试触发一个新生代+老年代一起回收的混合回收阶段。</p><h4 id="（2）Mixed-GC的停止时机"><a href="#（2）Mixed-GC的停止时机" class="headerlink" title="（2）Mixed GC的停止时机"></a>（2）Mixed GC的停止时机</h4><p><strong>混合回收都是基于复制算法进行的</strong>，把要回收的Region区存活的对象放入其他Region，然后这个Region全部清理掉，这样就会不断空出来新的Region，有一个参数<code>-XX:G1HeapWastePercent</code>，默认值是5%，就是说空出来的区域大于整个堆的5%，就会立即停止混合回收了。正常默认回收次数是8次，但是可能到了4次，发现空闲Region大于整个堆的5%，就不会再进行后续回收了。</p><h4 id="（3）回收失败问题"><a href="#（3）回收失败问题" class="headerlink" title="（3）回收失败问题"></a>（3）回收失败问题</h4><p>可以看出<strong>G1整体都是基于复制算法进行，不会出现内存碎片问题</strong>，但另一个问题是，Mixed GC中新生代、老年代都是复制算法，对象复制时候别的Region内存不够了咋办？那就是回收失败了！就会立即停止系统程序，然后采用单线程去标记、清理、压缩整理，再空闲出新的Region，这个过程极其缓慢！（<strong>采用的是Serial Old回收器</strong>）</p><h3 id="3、Mixed-GC的四个阶段"><a href="#3、Mixed-GC的四个阶段" class="headerlink" title="3、Mixed GC的四个阶段"></a>3、Mixed GC的四个阶段</h3><h4 id="（1）初始标记阶段"><a href="#（1）初始标记阶段" class="headerlink" title="（1）初始标记阶段"></a>（1）初始标记阶段</h4><p>这个过程需要进入<code>Stop the World</code>的，仅仅只是标记一下GC  Roots直接能引用的对象，这个过程速度是很快的。如下图，<strong>先停止系统程序的运行</strong>，然后<strong>对各个线程栈内存中的局部变量代表的GC Roots，以及方法区中的类静态变量代表的GC Roots，进行扫描</strong>，标记出来他们直接引用的那些对象。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172318944.png" alt=""></p><h4 id="（2）并发标记阶段"><a href="#（2）并发标记阶段" class="headerlink" title="（2）并发标记阶段"></a>（2）并发标记阶段</h4><p>这个阶段会<strong>允许系统程序的运行</strong>，同时进行GC Roots追踪，从GC Roots开始追踪所有的存活对象，并对这个过程对象的变化<strong>做记录</strong>，比如哪些对象失去了引用，哪些对象是新建的。如下图所示。（这个阶段也是很耗时的，要追踪全部存活的对象，但跟系统并发运行，影响不大）</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172358117.png" alt=""></p><h4 id="（3）最终标记阶段"><a href="#（3）最终标记阶段" class="headerlink" title="（3）最终标记阶段"></a>（3）最终标记阶段</h4><p>这个阶段会进入<code>Stop the World</code>，<strong>系统程序是禁止运行的</strong>，但是会根据并发标记阶段记录的那些对象修改，最终标记一下有哪些存活对象，有哪些是垃圾对象，如下图所示。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172412072.png" alt=""></p><h4 id="（4）混合回收阶段"><a href="#（4）混合回收阶段" class="headerlink" title="（4）混合回收阶段"></a>（4）混合回收阶段</h4><p>&emsp;&emsp;基于复制算法，这个阶段会计算老年代中每个Region中的存活对象数量，存活对象的占比，还有执行垃圾回收的预期性能和效率。<strong>接着会停止系统程序</strong>，然后全力以赴尽快进行垃圾回收，此时会选择部分Region进行回收，因为必须让垃圾回收的停顿时间控制在我们指定的范围内。</p><p>&emsp;&emsp;注意，这里到底回收哪些Region是G1自己选择的，<strong>这里的混合回收是指在我们指定的时间（比如200ms）内回收尽可能多的垃圾。</strong></p><p>&emsp;&emsp;<strong>另外，这个阶段G1允许多次执行混合回收</strong>，也就是说先停止系统工作，执行回收，恢复系统运行，再停止系统运行，再回收，再恢复…这么一个流程。每次回收的间隔是由G1自己控制的，回收执行次数可以通过参数<code>-XX:G1MixedGCCountTarget</code>来设置，这个参数默认回收次数是8次，同时有一个参数<code>-XX:G1HeapWastePercent</code>，默认值是5%，就是说空出来的区域大于整个堆的5%，就会立即停止混合回收了。正常默认回收次数是8次，但是可能到了4次，发现空闲Region大于整个堆的5%，就不会再进行后续回收了。这种多次回收的机制能够让系统停顿时间不要太长，可以在多次回收的间隙也运行一下。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172431309.png" alt=""></p><h3 id="4、G1垃圾回收的参数"><a href="#4、G1垃圾回收的参数" class="headerlink" title="4、G1垃圾回收的参数"></a>4、G1垃圾回收的参数</h3><ul><li><code>-XX:+UseG1GC</code>：设置使用G1垃圾回收器</li><li><code>-XX:MaxGCPauseMills</code>：设定系统停顿时间，默认200ms</li><li><code>-XX:G1HeapRegionSize</code>：设置区域划分的个数和大小，默认<code>堆大小/2048</code></li><li><code>-XX:G1NewSizePercent</code>：用来设置新生代初始占比的，默认值为5%即可。</li><li><code>-XX:G1MaxNewSizePercent</code>：用来设置新生代最大占比的，默认值为60%即可。</li><li><code>-XX:SurvivorRatio=8</code>：设置新生代Region区域中Eden和Survivor的比例，默认8:1:1</li><li><code>-XX:InitiatingHeapOccupancyPercent</code>：设置Mixed GC的比例，默认45%</li><li><code>-XX:G1MixedGCCountTarget</code>：混合回收阶段最多允许G1执行回收的次数，默认是8次。</li><li><code>-XX:G1HeapWastePercent</code>：默认值5%，Mixed GC时空出来的Region大于5%，就停止混合回收。</li><li><code>-XX:G1MixedGCLiveThresholdPercent</code>：默认值是85%，确定要回收的Region的时候，必须是存活对象低于85%的Region才可以回收。</li></ul><h2 id="三、G1性能优化"><a href="#三、G1性能优化" class="headerlink" title="三、G1性能优化"></a>三、G1性能优化</h2><h3 id="1、背景引入"><a href="#1、背景引入" class="headerlink" title="1、背景引入"></a>1、背景引入</h3><p>&emsp;&emsp;百万级用户的在校教育平台，首先分析这个系统最高频的行为。作为用户，浏览课程详情、下单付费、选课排课，这些都是绝对的低频行为，我们几乎不用考虑到系统的运行中去，可以暂时忽略掉。对于这样的一个系统，他最关键的高频行为只有<strong>上课！</strong>就是每天晚上那两三小时的高峰时期，几乎你可以认为每天几十万日活用户（那些小孩儿）都会集中在这个时间段来平台上上在线课程。所以这个晚上两三小时的时间段里，将会是平台每天绝对的高峰期。那哪个功能最常用呢？除了上课学习，就是<strong>互动</strong>了。</p><p>&emsp;&emsp;分析这个系统核心点就是搞明白在晚上两三小时高峰期内，<strong>每秒钟会有多少请求，每个请求会连带产生多少对象，占用多少内存，每个请求要处理多长时间。</strong></p><p>&emsp;&emsp;假设晚上3小时有60w活跃用户，按平均每个用户1小时上课，每小时20w用户，对于每个用户1分钟1次互动，1分钟60次，20万人1分钟就是1200万次互动，平均每秒3000次，也就是1秒承受3000次请求。假设我们使用的是4核8G的机器，差不多需要5台，每台1秒抗住600个请求。互动过程一般不会有复杂对象，算上连带对象也就占几KB，假设5KB，1秒就是3MB左右内存（5*600/1000）。</p><p>&emsp;&emsp;分配4G给堆内存，其中新生代默认初始占比为5%，最大占比为60%，每个Java线程的栈内存为1MB，元数据区域（永久代）的内存为256M，新生代初始占比和最大新生代占比维持默认值即可，不用设置，分别为5%和60%，此时JVM参数如下：</p><pre><code>-Xms4096M -Xmx4096M  -Xss1M  -XX:PermSize=256M -XX:MaxPermSize=256M -XX:+UseG1GC</code></pre><p>&emsp;&emsp;此时每个Region大小为4G/2048 = 2MB，新生代占5%，算它100个Region，200MB，停顿时间我们先不设置，使用默认值200ms。此时大概不到1分钟就塞满这100个新生代Region了，此时你会觉得由于GC是很灵活的，他会根据你设定的gc停顿时间给你的新生代不停分配更多Region，然后到一定程度，感觉差不多了，就会触发新生代gc，保证新生代gc的时候导致的系统停顿时间在你预设范围内，这是它的一个原理，但事实不是这样的，具体情况要通过工具去查看。</p><h3 id="2、优化"><a href="#2、优化" class="headerlink" title="2、优化"></a>2、优化</h3><p><strong>对于新生代，主要是避免短生命对象进入老年代</strong></p><ul><li>预估每次Minor GC后存活下来对象的大小，合理的设置Survivor区，同时考虑高峰期间时，动态年龄判断条件的影响，不要让这种短生命周期对象侥幸逃脱进入老年代</li><li>大对象有他自己的Region，不用操心</li></ul><p><strong>对于老年代</strong></p><ul><li>系统的停顿时间时关键！是核心，要预测停顿时间，并不是越小越好，过小则回收效果不大</li></ul><p>（1）-XX:MaxGCPauseMills 参数优化</p><p>这个参数是核心点！如果参数设置的值很大，导致系统运行很久，新生代可能都占用了堆内存的60%了，此时才触发新生代GC，那么存活下来的对象可能就会很多，此时就会导致Survivor区域放不下那么多的对象（或是动态年龄判定规则），就会进入老年代中。如果参数设置过小，即使GC停顿时间很短，但GC频率太大，比如说30秒触发一次新生代gc，每次就停顿30毫秒，这样也是很影响系统性能的。至于到底如何优化这个参数，<strong>要结合工具的实战演练</strong>。</p><p>（2）Mixed GC优化</p><p>优化Mixed GC并不是优化它的参数，因为它的参数太多了，尽量避免对象过快进入老年代，尽量避免频繁触发Mixed GC，就可以做到根本上优化Mixed GC了。这边核心还是<code>-XX:MaxGCPauseMills</code>这个参数。如上所说</p><h2 id="四、G1的适用场景与总结"><a href="#四、G1的适用场景与总结" class="headerlink" title="四、G1的适用场景与总结"></a>四、G1的适用场景与总结</h2><h3 id="1、适合超大内存机器"><a href="#1、适合超大内存机器" class="headerlink" title="1、适合超大内存机器"></a>1、适合超大内存机器</h3><p>&emsp;&emsp;如果内存是一个<strong>大堆</strong>，比如部署在有16G、32G的内存的机器上，比如类似Kafka、Elasticsearch之类的大数据相关的系统，都是部署在大内存的机器上的，此时如果你的系统负载非常的高，比如每秒几万的访问请求到Kafka、Elasticsearch上去。那么可能导致你Eden区的几十G内存频繁塞满要触发垃圾回收，假设1分钟会塞满一次。如果使用传统回收器（比如ParNew+CMS），不用G1，会导致新生代每次GC回收的次数太多了，STW一多，停顿时间太长，使用G1可以指定每次停顿的时间来回收一部分Region，这样就很合适。从上面停顿时间太长这个角度出发，G1就适合要求<strong>低延时</strong>的业务。</p><p>&emsp;&emsp;另外G1压缩内存空间有优势，适合会产生大量碎片的应用。</p><p><strong>ParNew+CMS适合内存小的</strong></p><h3 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h3><h4 id="（1）G1小结"><a href="#（1）G1小结" class="headerlink" title="（1）G1小结"></a>（1）G1小结</h4><p>G1和ParNew+CMS的调优原则都是尽可能Minor GC，G1则更加智能，而PN+CMS更纯粹更直接，虽然G1在GC时没有碎片，但是由于每个Region有一个存活率大于85%不清理的机制，会导致内存没有充分释放。因此，对于cpu性能高的，内存容量大的，对应用响应度高的系统推荐使用g1。 而内存小，cpu性能比较低下的系统也可以使用pn+cms会更合适。</p><h4 id="（2）回收过程小结"><a href="#（2）回收过程小结" class="headerlink" title="（2）回收过程小结"></a>（2）回收过程小结</h4><ol><li>如果新生代未达60%，老年代未达45%，系统照常运行，不会触发回收 </li><li>如果新生代达60%，此时如果有新对象生成，跑到新生代，就会触发Minor GC<ol><li>开启了空间担保机制，Minor GC前先判断是否需要Full GC,如果每次回收后对象小于老年代空闲大小，则不用Full,否则要。（JDK 1.6之前是把空间担保机制和<code>HandlerPromotionFailure</code>参数拆开了，JDK 1.6之后的空间担保机制只要满足”老年代可用连续空间&gt;新生代对象总大小或历次晋升到老年代对象的平均大小”其中一个就可，不满足就Full GC）</li><li>不用触发Full GC，但Minor GC后的对象大于老年代空闲大小，无法直接进入老年代，触发Full GC</li></ol></li><li>老年代堆内存占了45%了，触发混合回收（四个阶段：先STW通过GC Root初始标记哪些是有直接引用的，然后并发标记追踪GC Roots所有对象，此时与系统并发执行，接着最终标记，STW，标记并发标记过程中心新来的对象和新产生的垃圾，最后混合回收，采用的是复制算法，不会产生垃圾碎片，G1按照我们给定时间去进行性价比高的回收，回收次数可以设置，默认是八次，如果回收过程中，空闲Region超过了堆内存的5%，会提前结束，当然可以修改这个参数，另外如果回收失败，转而使用Serial Old回收器，回收变得很慢）</li></ol>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/08/27/JVM%E4%B9%8B%E6%96%B0%E7%94%9F%E4%BB%A3%E4%B8%8E%E8%80%81%E5%B9%B4%E4%BB%A3JVM%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/"/>
      <url>/2019/08/27/JVM%E4%B9%8B%E6%96%B0%E7%94%9F%E4%BB%A3%E4%B8%8E%E8%80%81%E5%B9%B4%E4%BB%A3JVM%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="三、新生代JVM参数优化"><a href="#三、新生代JVM参数优化" class="headerlink" title="三、新生代JVM参数优化"></a>三、新生代JVM参数优化</h2><h3 id="1、背景引入"><a href="#1、背景引入" class="headerlink" title="1、背景引入"></a>1、背景引入</h3><p>&emsp;&emsp;假设我们的背景是每日上亿请求量的一个订单系统，按照每个用户每日访问次数为20次来算，大致有500万个用户（1亿/20），对这五百万个用户，假设付费转化率为10%，也就是有50万人会去下单，我们把这50万订单集中在4个小时的高峰期内，平均每秒钟也就几十个订单，感觉也没什么大的压力，因为几十个订单根本不需要对JVM做太多关注。</p><p>&emsp;&emsp;但是如果到了双十一这种活动，就会出问题了。硬件方面来说，如果我们部署到足够的机器上以及机器内存充裕，也不是问题，但就JVM的参数来说，如果我们不能合理的去设置这个参数，就会导致机器资源浪费，硬件成本的增加。</p><p>&emsp;&emsp;为什么要去调JVM参数？我们的<strong>目的就是对JVM有限的内存资源做好合理分配和优化，当然包括垃圾回收的优化，要让GC次数尽可能的少。</strong></p><p>&emsp;&emsp;假设双十一期间一台机器1秒要处理300个订单（处理订单比较耗时，工作经验上是每秒处理100～300个订单），对于每个订单对象我们按1KB来算，那1秒就是300KB内存开销了，但是这时订单连带对象如库存、促销、优惠券等一系列业务对象，这些对象从经验上来讲好要比订单单个对象的开销再放大10倍，同时还有很多与订单相关操作，比如查询等，往大估算就再扩大十倍，<strong>所以1秒钟，我们要处理60MB（300KB x 20 x 10 = 60000KB）对象。</strong>每1秒过后，这个对象就变成垃圾了。</p><p>&emsp;&emsp;假设我们使用4核8G的机器，JVM分配4G，其中3G给堆内存，1G给方法区和每个线程的虚拟机栈。虚拟机栈一般都是1MB，假设我们有几百个线程，就是几百MB，这里我们给永久代256MB，给虚拟机栈总共768MB。至于堆内存，我们给新生代1.5G，老年代1.5G。得到如下参数。（注意这里不写<code>-XX:HandlePromotionFailure</code>，我们使用JDK 1.8）。每1秒有60MB的垃圾，1.5G的内存大概25秒就满了。此时就要<code>Minor GC</code>，明显老年代能够存放新生代所有对象，可以放心GC，由于最后一秒订单还在处理，假设存活的对象就100MB，这里来问题了，如果<code>-XX:SurvivorRatio</code>参数默认值为8，那么此时新生代里Eden区大概占据了1.2GB内存，每个<code>Survivor</code>区是150MB的内存，如下图。</p><pre><code>-Xms3072M -Xmx3072M -Xmn1536M -Xss1M -XX:PermSize=256M -XX:MaxPermSize=256M</code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191937863.png" alt=""><br>&emsp;&emsp;所以启动JVM后，大概20秒左右，<code>Eden</code>区就满了，然后<code>Minor GC</code>，把存活对象放在<code>Survivor1</code>中，再过20s，再次回收<code>Eden</code>和<code>Survivor1</code>中的对象，存活的如果还是100MB就放入<code>Survivor2</code>中。</p><p>&emsp;&emsp;以上就是总体的背景，此时的JVM参数为：</p><pre><code>-Xms3072M -Xmx3072M -Xmn1536M -Xss1M -XX:PermSize=256M -XX:MaxPermSize=256M  -XX:SurvivorRatio=8</code></pre><h3 id="2、参数优化"><a href="#2、参数优化" class="headerlink" title="2、参数优化"></a>2、参数优化</h3><h4 id="（1）Survivor空间的设置"><a href="#（1）Survivor空间的设置" class="headerlink" title="（1）Survivor空间的设置"></a>（1）Survivor空间的设置</h4><p>&emsp;&emsp;JVM优化时，首先就得考虑<code>Survivor</code>空间够不够。就上述案例，一种情况是，<code>Survivor</code>中分配了150MB，如果来的对象大于150MB，就会频繁进入老年代，第二种情况是，即使100MB对象能够放入<code>Survivor</code>区，但是100/150 = 0.67，超过了<code>Survivor</code>区空间的50%，这样同一批年龄对象也进入老年代了，这种1秒就变成垃圾的短生命周期对象根本不需要进入老年代。我们得让它们留在新生代里。</p><p>&emsp;&emsp;<strong>方案：</strong>给<code>Survivor</code>区更大的容量。如果你的<strong>业务都是这种短生命周期的</strong>，老年代可以分配少一点的内存，我们可以考虑把新生代调整为2G，老年代为1G，如果<code>-XX:SurvivorRatio=8</code>那么此时<code>Eden</code>为1.6G，每个<code>Survivor</code>为200MB，如图。这时候上述两个问题就同时解决了。</p><p>&emsp;&emsp;针对任何系统，我们要预估内存并合理分配内存，首要做的就是<strong>尽量让每次Minor GC后的对象都留在Survivor里，不要进入老年代。</strong>此时参数如下</p><pre><code>-Xms3072M -Xmx3072M -Xmn2048M -Xss1M  -XX:PermSize=256M -XX:MaxPermSize=256M  -XX:SurvivorRatio=8</code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191954425.png" alt=""></p><h4 id="（2）-XX-MaxTenuringThreshold参数的设置"><a href="#（2）-XX-MaxTenuringThreshold参数的设置" class="headerlink" title="（2）-XX:MaxTenuringThreshold参数的设置"></a>（2）-XX:MaxTenuringThreshold参数的设置</h4><p>&emsp;&emsp;有些对象是可能躲过15次垃圾回收进入老年代的，就上述背景，有些对象在新生代躲了几分钟进入老年代很应该，那为了不让这种数据进入老年代要怎么做？我们需要调<code>-XX:MaxTenuringThreshold</code>这个参数。这个参数并不是一昧地去调高，一定要<strong>结合系统的运行模型，看看Minor GC频率</strong>，把这个参数从15调高到20、30，让一个垃圾多在<code>Survivor</code>中停留几分钟，根本没用，对于我们上述业务场景就要把这个参数调低，比如调到5.记住，一定要结合系统运行的模型。此时参数如下：</p><pre><code>-Xms3072M -Xmx3072M -Xmn2048M -Xss1M  -XX:PermSize=256M -XX:MaxPermSize=256M  -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=5</code></pre><h3 id="（3）-XX-PretenureSizeThreshold参数设置"><a href="#（3）-XX-PretenureSizeThreshold参数设置" class="headerlink" title="（3）-XX:PretenureSizeThreshold参数设置"></a>（3）-XX:PretenureSizeThreshold参数设置</h3><p>&emsp;&emsp;大对象是可以直接进入老年代的，但是多大呢？一般来说很少有超过1MB的对象，如果有，那就是你提前分配了一个大数组、大List之类的来存放缓存数据，一般这种数据是要用一段时间的，所以我们可以放到老年代。我们一般把这个参数设置为1。此时JVM参数如下：</p><pre><code>-Xms3072M -Xmx3072M -Xmn2048M -Xss1M  -XX:PermSize=256M -XX:MaxPermSize=256M  -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=5 -XX:PretenureSizeThreshold=1M</code></pre><h4 id="（4）指定垃圾回收器"><a href="#（4）指定垃圾回收器" class="headerlink" title="（4）指定垃圾回收器"></a>（4）指定垃圾回收器</h4><p>&emsp;&emsp;针对具体的客户端、服务端来设置垃圾回收器，之前讲过。我们这个系统新生代使用<code>ParNew</code>，老年代使用<code>CMS</code>。设置如下的参数：</p><pre><code>-Xms3072M -Xmx3072M -Xmn2048M -Xss1M  -XX:PermSize=256M -XX:MaxPermSize=256M  -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=5 -XX:PretenureSizeThreshold=1M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</code></pre><h2 id="四、老年代JVM参数优化"><a href="#四、老年代JVM参数优化" class="headerlink" title="四、老年代JVM参数优化"></a>四、老年代JVM参数优化</h2><p>&emsp;&emsp;老年代参数优化主要就是减少Full GC的次数。首先我们得要分析对象进入老年代的几个原因</p><h3 id="1、对象进入老年代的原因"><a href="#1、对象进入老年代的原因" class="headerlink" title="1、对象进入老年代的原因"></a>1、对象进入老年代的原因</h3><p><strong>第一种</strong>：就是<code>-XX:MaxTenuringThreshold</code>这个参数设置的太低了，就是之前新生代的案例，这种对象一般是<code>@Service</code>或<code>Controller</code>等注解标识的业务逻辑组件，这种对象一般全局有一个实例就行，是要一直用的，所以应该让他进。</p><p><strong>第二种</strong>：就是大对象，但是这种再上述案例中一般没有，可以忽略。</p><p><strong>第三种</strong>：就是Minor GC后存活的对象超过了<code>Survivor</code>区的50%，就直接进入了老年代</p><h3 id="2、大促销场景的Full-GC多久出发一次？"><a href="#2、大促销场景的Full-GC多久出发一次？" class="headerlink" title="2、大促销场景的Full GC多久出发一次？"></a>2、大促销场景的Full GC多久出发一次？</h3><p>&emsp;&emsp;对于此案例触发Full GC的几个情况：</p><p><strong>情况一</strong>：没有打开<code>-XX:HandlePromotionFailure</code>选项。<strong>我们知道如果老年代剩余内存大于新生代对象总大小就直接Minor GC的，但是老年代剩余内存总大小小于新生代对象总大小时，就要看这个参数了，如果没有打开这个参数，老年代空间小于新生代所有对象大小就直接Full GC，如果打开了，就看平均。</strong>这个参数就是看老年代剩余内存总大小是否大于之前每一次Minor GC进入老年代的对象的平均大小，按照之前项目案例，要很多次Minor GC之后才可能有一两次碰巧会有200MB对象升入老年代，所以这个“历次Minor GC后升入老年代的平均对象大小”，基本是很小的。（JDK 1.6之后就不看了）</p><p><strong>情况二</strong>：某次升入老年代的对象很大，但是老年代空间不够了。</p><p><strong>情况三</strong>：和<code>-XX:CMSInitiatingOccupancyFaction</code>参数有关，默认值是92%，超过这个值就会GC。</p><p>&emsp;&emsp;针对大促销场景，由于我们之前在新生代优化了参数，所以对象进入老年代较慢，经验上来说，很可能是在系统运行半小时~1小时之后，才会有接近1GB的对象进入老年代。在大促期间，订单系统运行1小时之后，大促下单高峰期几乎都快过了，此时才可能会触发一次Full GC。这个高峰期过后，基本订单系统访问压力就很小了，那么GC的问题几乎就更不算什么了。</p><p>&emsp;&emsp;当然老年代也会触发<code>Concurrent Mode Failure</code>问题。假设系统，运行1小时之后，老年代大概有900MB的对象了，剩余可用空间仅仅只有100MB了，然后CMS进行垃圾回收，垃圾回收期间是和系统程序并发的，如果系统此时还在创建对象，比如说很不巧有200MB对象要进来了，而老年代又放不下，那么此时就会进入<code>Stop the World</code>，然后切换CMS为Serial Old，直接禁止程序运行，然后单线程进行老年代垃圾回收，回收掉900MB对象过后，再让系统继续运行。当然这个概率非常的小，我们没必要特意去优化它。</p><p>此时参数为:</p><pre><code>-Xms3072M -Xmx3072M -Xmn2048M -Xss1M  -XX:PermSize=256M -XX:MaxPermSize=256M  -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=5 -XX:PretenureSizeThreshold=1M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFaction=9</code></pre><h3 id="3、CMS后内存碎片整理频率"><a href="#3、CMS后内存碎片整理频率" class="headerlink" title="3、CMS后内存碎片整理频率"></a>3、CMS后内存碎片整理频率</h3><p>&emsp;&emsp;没必要特意去修改这个频率，对于上述大促销场景，在大促高峰期，Full GC可能也就1小时执行一次，然后大促高峰期过去之后，就没那么多的订单了，此时可能几个小时才会有一次Full GC。所以就保持默认的设置，每次Full GC之后都执行一次内存碎片整理就可以。要针对特定的业务场景来设定。<strong>仅仅针对这个参数来说：</strong></p><ul><li>如果Full GC相对频繁，就设置多次Full GC后进行碎片整理</li><li>如果不是很频繁，可以设置每次Full GC后进行碎片整理</li></ul><h2 id="五、面试题"><a href="#五、面试题" class="headerlink" title="五、面试题"></a>五、面试题</h2><h3 id="1、一个面试题：parnew-cms的gc，如何保证只做ygc，jvm参数如何配置？"><a href="#1、一个面试题：parnew-cms的gc，如何保证只做ygc，jvm参数如何配置？" class="headerlink" title="1、一个面试题：parnew+cms的gc，如何保证只做ygc，jvm参数如何配置？"></a>1、一个面试题：parnew+cms的gc，如何保证只做ygc，jvm参数如何配置？</h3><p>首先和垃圾收集器没什么关系，不同的垃圾收集器，只是它们的性能、吞吐量不同，并不影响垃圾回收的时机。只要在新生代根据对象的存活特征，合理的去分配Eden区和s1、s2区域的大小，尽量让垃圾在新生代被回收就好了，注意这边开启内存担保（jdk 1.6），如果eden区超过了老年代大小，不开担保的话每次MGC前都要FGC的。</p><h3 id="2、为什么老年代回收比新生代慢？"><a href="#2、为什么老年代回收比新生代慢？" class="headerlink" title="2、为什么老年代回收比新生代慢？"></a>2、为什么老年代回收比新生代慢？</h3><p>新生代存活对象小，并且采用复制算法，速度很快，复制过去直接就删除，而老年代对象量较大，遍历标记、遍历清除，然后还要整理好腾出空间来，很耗时，耗时的就是步骤二和步骤四。初始标记是从GC Roots查找直接引用的对象，并发标记也是从GC Roots出发，通过每个对象的引用地址来看哪些对象活着的，活着的又很多，就很耗时。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/08/25/JVM%E4%B9%8BCMS%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/08/25/JVM%E4%B9%8BCMS%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="老年代回收容器——CMS"><a href="#老年代回收容器——CMS" class="headerlink" title="老年代回收容器——CMS"></a>老年代回收容器——CMS</h1><h3 id="1、CMS工作原理"><a href="#1、CMS工作原理" class="headerlink" title="1、CMS工作原理"></a>1、CMS工作原理</h3><p>&emsp;&emsp;一般老年代我们选择的垃圾回收器是CMS，他采用的是<strong>标记清理算法</strong>（不是标记整理）。之前提到过<code>Stop the World</code>状态，就是垃圾回收时停止一切线程的工作，如果在这个状态下再去慢慢执行标记清理算法，会导致系统卡死时间过长，所以CMS垃圾回收器采取的是<strong>垃圾回收线程和系统工作线程尽量同时执行的模式</strong>来处理的。</p><p>&emsp;&emsp;<strong>工作原理</strong>：为了避免长时间<code>Stop the World</code>，CMS采用了4个阶段来垃圾回收，分别是初始标记、并发标记、重新标记和并发清理。其中初始标记和重新标记，耗时很短，虽然会导致<code>Stop the World</code>，但是影响不大，然后并发标记和并发清理，两个阶段耗时最长，但是是可以跟系统的工作线程并发运行的，所以对系统没太大影响。</p><h3 id="2、CMS垃圾回收的四个阶段"><a href="#2、CMS垃圾回收的四个阶段" class="headerlink" title="2、CMS垃圾回收的四个阶段"></a>2、CMS垃圾回收的四个阶段</h3><h4 id="（1）初始标记——标记直接GC-Roots（直接）"><a href="#（1）初始标记——标记直接GC-Roots（直接）" class="headerlink" title="（1）初始标记——标记直接GC Roots（直接）"></a>（1）初始标记——标记直接GC Roots（直接）</h4><p>&emsp;&emsp;在这个阶段让系统的工作线程全部停止，进入<code>Stop the World</code>状态。同时<strong>标记所有GC Roots直接引用的对象</strong>，是直接引用！比如下面这段代码，仅仅会通过<code>replicaManager</code>这个类的静态变量代表的GC Roots，去标记出来他直接引用的<code>ReplicaManager</code>对象，不会去管<code>ReplicaFetcher</code>这种对象，因为<code>ReplicaFetcher</code>对象是被<code>ReplicaManager</code>类的<code>replicaFetcher</code>实例变量引用的。（之前说过，方法的局部变量和类的静态变量是GC Roots。但是类的实例变量不是GC Roots。）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplicaManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ReplicaFetcher replicaFetcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaFetcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191724008.png" alt=""></p><p>初识标记如图所示</p><h4 id="（2）并发标记——对老年代所有对象进行GC-Roots追踪（最耗时）"><a href="#（2）并发标记——对老年代所有对象进行GC-Roots追踪（最耗时）" class="headerlink" title="（2）并发标记——对老年代所有对象进行GC Roots追踪（最耗时）"></a>（2）并发标记——对老年代所有对象进行GC Roots追踪（最耗时）</h4><p>&emsp;&emsp;这个阶段会让系统线程可以随意创建各种新对象，继续运行。在运行期间可能会创建新的存活对象，也可能会让部分存活对象失去引用，变成垃圾对象。在这个过程中，垃圾回收线程，会尽可能的对已有的对象进行GC Roots追踪。GC Roots追踪，意思就是对类似<code>ReplicaFetcher</code>之类的全部老年代里的对象，他会去看他被谁引用了，<strong>认定为是被GC Roots间接引用后，就不需要回收它。因为老年代里存活对象是比较多的，这个过程会追踪大量的对象，所以耗时较高。</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191740459.png" alt=""></p><p>这里我看的时候有一个问题，为什么要经过初始标记而不直接进入并发标记呢？</p><blockquote><p>因为初始标记是用来标记GC Roots直接关联的对象，如果不在初始标记时找到哪些是GC Roots直接关联的对象的话，并发标记的GC Root Tracing没办法进行啊</p></blockquote><h4 id="（3）重新标记"><a href="#（3）重新标记" class="headerlink" title="（3）重新标记"></a>（3）重新标记</h4><p>&emsp;&emsp;第二阶段里，你一边标记存活对象和垃圾对象，一边系统在不停运行创建新对象，让老对象变成垃圾，所以第二阶段结束之后，绝对会有很多存活对象和垃圾对象，是之前第二阶段没标记出来的。在这个阶段，要再次进入<code>Stop the World</code>阶段，重新标记下在第二阶段里新创建的一些对象，还有一些已有对象可能失去引用变成垃圾的情况。重新标记的阶段只是对变动过的<strong>少数对象</strong>进行标记，是速度很快的</p><h4 id="（4）并发清理"><a href="#（4）并发清理" class="headerlink" title="（4）并发清理"></a>（4）并发清理</h4><p>&emsp;&emsp;这个阶段就是让系统程序随意运行，然后清理掉之前标记为垃圾的对象即可，也是很耗时的。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191757623.png" alt=""></p><h3 id="3、CMS性能分析"><a href="#3、CMS性能分析" class="headerlink" title="3、CMS性能分析"></a>3、CMS性能分析</h3><h4 id="（1）好的方面"><a href="#（1）好的方面" class="headerlink" title="（1）好的方面"></a>（1）好的方面</h4><p>&emsp;&emsp;CMS的第二阶段和第四阶段，都是很耗时的，但都和系统程序是并发执行的，所以基本这两个最耗时的阶段对性能影响不大。只有第一个阶段和第三个阶段是需要<code>Stop the World</code>的，但是这两个阶段都是简单的标记而已，速度非常的快，所以基本上对系统运行响应也不大。</p><h4 id="（2）坏的方面"><a href="#（2）坏的方面" class="headerlink" title="（2）坏的方面"></a>（2）坏的方面</h4><h5 id="①并发回收导致CPU资源紧张。"><a href="#①并发回收导致CPU资源紧张。" class="headerlink" title="①并发回收导致CPU资源紧张。"></a>①并发回收导致CPU资源紧张。</h5><p>&emsp;&emsp;并发标记和并发清理两个最耗时的阶段，使垃圾回收线程和系统工作线程同时工作，导致有限的CPU资源被垃圾回收线程占用了一部分。在这两个阶段，CMS的垃圾回收线程是比较耗费CPU资源的。CMS默认启动的垃圾回收线程的数量是（CPU核数 + 3）/ 4，比如的2核4G机器，就会占用(2+3)/4 = 1个CPU被用来垃圾回收。</p><h5 id="②Concurrent-Mode-Failure问题"><a href="#②Concurrent-Mode-Failure问题" class="headerlink" title="②Concurrent Mode Failure问题"></a>②Concurrent Mode Failure问题</h5><p>&emsp;&emsp;在并发清理阶段，CMS只不过是回收之前标记好的垃圾对象，但这个时候系统一直在运行，先把某些对象分配在新生代，然后可能触发了一次Minor GC，一些对象进入了老年代，在短时间内又没人使用这些对象，这种垃圾对象就是<strong>浮动垃圾</strong>，虽然它是垃圾，但是不会回收他们，要等到下一次才能回收。</p><p>&emsp;&emsp;<strong>CMS垃圾触发的时机是当老年代内存占用到达一定比例时，就会自动GC</strong>，<code>-XX:CMSInitiatingOccupancyFaction</code>这个参数可以设置老年代内存占用到多少比例时触发垃圾回收。JDK 1.6默认是92%。预留8%的空间给并发回收期间，系统程序把一些新对象放入老年代中。如果垃圾回收期间，要放入的对象大于可用内存空间，就会发生<code>Concurrent Mode Failure</code>，即并发垃圾回收失败了，我一边回收，你一边把对象放入老年代，内存都不够了。此时就会自动用<code>Serial Old</code>垃圾回收器替代CMS，就是直接强行把系统程序<code>Stop the World</code>，重新进行长时间的GC Roots追踪，标记出来全部垃圾对象，不允许新的对象产生。</p><h5 id="③内存碎片问题"><a href="#③内存碎片问题" class="headerlink" title="③内存碎片问题"></a>③内存碎片问题</h5><p>&emsp;&emsp;老年代的CMS采用<code>标记清理</code>算法（不是<code>标记整理</code>），每次都是标记出来垃圾对象，然后一次性回收掉，这样会导致大量的内存碎片产生，太多的内存碎片实际上会导致更加频繁的Full GC。</p><p>&emsp;&emsp;CMS有一个参数是<code>-XX:+UseCMSCompactAtFullCollection</code>，默认是打开的，意思是在Full GC之后要再次进行<code>Stop the World</code>，停止工作线程，然后进行碎片整理，就是把存活对象挪到一起，空出来大片连续内存空间，避免内存碎片。</p><p>&emsp;&emsp;还有一个参数是<code>-XX:CMSFullGCsBeforeCompaction</code>，这个意思是执行多少次Full GC之后再执行一次内存碎片整理的工作，默认是0，意思就是每次Full GC之后都会进行一次内存整理，存活对象都放在一起，然后空出来大片连续内存空间可供使用。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191831226.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/08/24/JVM%E4%B9%8BParNew%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2019/08/24/JVM%E4%B9%8BParNew%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="新生代回收器——ParNew"><a href="#新生代回收器——ParNew" class="headerlink" title="新生代回收器——ParNew"></a>新生代回收器——ParNew</h2><h3 id="1、工作原理"><a href="#1、工作原理" class="headerlink" title="1、工作原理"></a>1、工作原理</h3><p>&emsp;&emsp;ParNew垃圾回收器如果一旦在合适的时机执行Minor GC的时候，就会把系统程序的工作线程全部停掉，禁止程序继续运行创建新的对象，然后自己就用多个垃圾回收线程去进行垃圾回收，回收的机制和算法就跟之前说的是一样的。我们启动系统的时候可以指定垃圾回收器，使用<code>-XX:+UseParNewGC</code>选项，只要加入这个选项，JVM启动之后对新生代进行垃圾回收的，就是ParNew垃圾回收器了。</p><p>&emsp;&emsp;<strong>不管是老年代回收还是新生代回收，都要<code>Stop the World</code>，因为必须让程序停止创建新对象，才能回收垃圾对象，新生代只需要一次<code>stop the world</code>的时间，在此期间完成标记清除并把存活对象转到survivor或老年代。</strong></p><hr><h3 id="2、ParNew垃圾回收器默认情况下的线程数量"><a href="#2、ParNew垃圾回收器默认情况下的线程数量" class="headerlink" title="2、ParNew垃圾回收器默认情况下的线程数量"></a>2、ParNew垃圾回收器默认情况下的线程数量</h3><p>&emsp;&emsp;产生跟CPU核数一样的线程数量，比如我们线上机器假设用的是4核CPU，或者8核CPU，或者16核CPU，那么此时ParNew的垃圾回收线程数就会分别是4个线程、8个线程、16个线程，这个东西一般不用我们手动去调节。</p><hr><h3 id="3、到底是用单线程垃圾还是多线程垃圾回收好？到底是用Serial垃圾回收器还是用ParNew垃圾回收器好？"><a href="#3、到底是用单线程垃圾还是多线程垃圾回收好？到底是用Serial垃圾回收器还是用ParNew垃圾回收器好？" class="headerlink" title="3、到底是用单线程垃圾还是多线程垃圾回收好？到底是用Serial垃圾回收器还是用ParNew垃圾回收器好？"></a>3、到底是用单线程垃圾还是多线程垃圾回收好？到底是用Serial垃圾回收器还是用ParNew垃圾回收器好？</h3><p>&emsp;&emsp;启动系统的时候是可以区分<strong>服务器模式</strong>和<strong>客户端模式</strong>的，如果你启动系统的时候加入<code>-server</code>就是服务器模式，如果加入<code>-cilent</code>就是客户端模式。他们俩的区别就是，如果你的系统部署在比如4核8G的Linux服务器上，那么就应该用服务器模式，如果你的系统是运行在比如Windows上的客户端程序，那么就应该是客户端模式</p><p>&emsp;&emsp;<strong>服务器模式</strong>通常运行我们的网站系统、电商系统、业务系统、APP后台系统之类的大型系统，一般都是<strong>多核CPU</strong>，所以此时如果要垃圾回收，那么肯定是用ParNew更好，因为多线程并行垃圾回收，充分利用多核CPU资源，可以提升性能。</p><p>&emsp;&emsp;如果你的Java程序是一个<strong>客户端程序</strong>，比如类似百度云网盘的Windows客户端，或者是印象笔记的Windows客户端，运行在Windows个人操作系统上呢？这种操作系统很多都是<strong>单核CPU</strong>，此时你如果要是还是用ParNew来进行垃圾回收，就会导致一个CPU运行多个线程，反而加重了性能开销，因为单CPU运行多线程会导致频繁的线上上下文切换，有效率开销，可能最后效率还不如单线程好。所以如果是类似于那种运行在Windows上的客户端程序，建议采用Serial垃圾回收器。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/08/24/JVM%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/08/24/JVM%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM学习笔记（3）：垃圾回收机制详解"><a href="#JVM学习笔记（3）：垃圾回收机制详解" class="headerlink" title="JVM学习笔记（3）：垃圾回收机制详解"></a>JVM学习笔记（3）：垃圾回收机制详解</h1><h2 id="一、GC-Roots的类型"><a href="#一、GC-Roots的类型" class="headerlink" title="一、GC Roots的类型"></a>一、GC Roots的类型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JVM使用了<code>可达性分析算法</code>，该算法会分析每个对象，看有谁在引用他，一层层判断有没有一个<code>GC Roots</code>，在JVM规范中，<strong>局部变量</strong>是可以作为<code>GC Roots</code>的，只要一个类的对象被局部变量引用了，那就说明有一个<code>GC Roots</code>，就不能被回收了。当然，<strong>静态变量</strong>也可以看作是一种<code>GC Roots</code>。<strong>总结下来就是，只要你的对象被方法的局部变量或是类的静态变量引用了，就不能回收它。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至此我们知道回收和引 用有关，Java中有四种引用类型，它们分别是：<code>强引用</code>、<code>软引用</code>、<code>弱引用</code>和<code>虚引用</code>，针对不同的引用类型又有不同的回收策略：</p><ul><li><p><code>强引用</code>：一个变量引用一个对象。<strong>只要是强引用，垃圾回收时绝对不会去回收这个对象。</strong></p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>软引用</code>：通过<code>SoftReference</code>软引用类型把<code>ReplicaManager</code>类的对象直接包裹起来，这时候<code>replicaManager</code>对<code>ReplicaManager</code>类的对象就是软引用。<strong>正常垃圾回收不会回收软引用对象，只有当垃圾回收之后，发现内存还是不够存放新对象时，内存要溢出时，才会去回收软引用的对象。</strong></p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SoftReference<span class="token operator">&lt;</span>ReplicaManager<span class="token operator">></span> replicaManager <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>弱引用</code>：通过<code>WeakReference</code>软引用类型把<code>ReplicaManager</code>类的对象直接包裹起来，这样静态变量持有的<code>ReplicaManager</code>类对象就是弱引用的了。<strong>弱引用就跟没有一样，垃圾回收直接回收掉。</strong></p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> WeakReference<span class="token operator">&lt;</span>ReplicaManager<span class="token operator">></span> replicaManager <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>虚引用</code>：很少使用</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>总结</strong>：有<code>GC Roots</code>引用的对象不能回收，没有引用的可以回收，强引用不能回收，对于软引用，如果回收后内存依旧不够放入新的对象，就回收软引用的对象了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然，如果我们不想没有GC Roots的对象立即被回收，我们可与使用重写Object的<code>finalize()</code>方法来拯救一下，这东西很少用，知道一下即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有下面这么一段代码，ReplicaFetcher的对象会被回收掉嘛？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplicaManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ReplicaFetcher replicaFetcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaFetcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;肯定是不会的，<code>ReplicaFetcher</code>类的对象被<code>ReplicaManager</code>类的<code>replicaFetcher</code>强引用着，而<code>ReplicaManager</code>类的对象被可作为GC Root的静态变量<code>replicaManager</code>强引用着，所以<code>ReplicaFetcher</code>对象可以向上找到GC Root，因此不会被回收。</p><h2 id="二、针对新生代的垃圾回收算法——复制算法"><a href="#二、针对新生代的垃圾回收算法——复制算法" class="headerlink" title="二、针对新生代的垃圾回收算法——复制算法"></a>二、针对新生代的垃圾回收算法——复制算法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;背景：对于新生代，一种不太好的垃圾回收思路是直接对新生代里的垃圾对象进行标记，然后直接对垃圾进行回收，这样的缺陷是引入了许多内存碎片，内存碎片导致了内存的浪费，我们没有了完整的连续的内存空间是很难受的一件事。在这改进一下，我们可以将新生代内存空间划分为两部分，对<strong>不回收</strong>的对象进行标记，转移到另一块区域中顺便整理下，然后把另一块区域里的垃圾干掉，这就是所谓的复制算法。如下图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304171904248.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为什么标记不回收的呢？因为新生代里存放的对象大都是存活时间很短的，所以不回收的只是很少一部分，标记速度更快，如果标记回收的，就不合适了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是复制算法有缺点，因为我们永远只有一半内存可以使用，另一半放垃圾，这样转移，使得内存使用效率太低了。所以对复制算法进行了优化。因为新生代放的都是存活时期非常短的对象，极端情况比如99%的垃圾1%有用的。实际上新生代内存区被划分为三部分：1块<code>Eden</code>区，2块<code>Survivor</code>区。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初始对象都是优先被分配在<code>Eden</code>区的，如果<code>Eden</code>区快满了就触发<code>Minor GC</code>，把<code>Eden</code>中存活的对象全部转移到空的<code>Survivor</code>区，接着清空<code>Eden</code>中的垃圾，再次配分对象到<code>Eden</code>。由于存活的对象较少，所以给Survivor区域分配的内存就较少，当然看实际场景来分配。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304171914949.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>如果<code>Survivor</code>一个区域中都放满了，并且<code>Eden</code>区域中也占满了，但是垃圾回收后可能就只有10M对象活着，只要把那10MB对象转移到另一块<code>Survivor</code>区域中即可，之后把第一块<code>Survivor</code>区域和<code>Eden</code>区域中垃圾全部回收，这样始终保证着有一块<code>Survivor</code>区域是空的。</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304171932766.png" alt=""></p><h2 id="三、针对老年代的垃圾回收算法——标记整理算法"><a href="#三、针对老年代的垃圾回收算法——标记整理算法" class="headerlink" title="三、针对老年代的垃圾回收算法——标记整理算法"></a>三、针对老年代的垃圾回收算法——标记整理算法</h2><h3 id="1、进入老年代的几种情况"><a href="#1、进入老年代的几种情况" class="headerlink" title="1、进入老年代的几种情况"></a>1、进入老年代的几种情况</h3><h4 id="（1）躲过15次GC（当然我们可以自己设置次数）"><a href="#（1）躲过15次GC（当然我们可以自己设置次数）" class="headerlink" title="（1）躲过15次GC（当然我们可以自己设置次数）"></a>（1）躲过15次GC（当然我们可以自己设置次数）</h4><h4 id="（2）大对象直接进入老年代"><a href="#（2）大对象直接进入老年代" class="headerlink" title="（2）大对象直接进入老年代"></a>（2）大对象直接进入老年代</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过<code>-XX:PretenureSizeThreshold</code>把值设置成字节数，创建的对象大于这个值就直接进入老年代，之所以这么做是避免新生代里的大对象屡次躲过GC还要在三个区域来回复制，耗费时间。</p><h4 id="（3）动态对象年龄判断"><a href="#（3）动态对象年龄判断" class="headerlink" title="（3）动态对象年龄判断"></a>（3）动态对象年龄判断</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如当前放对象的Survivor区域里，一批对象的总大小，大于这块Survivor区域的内存大小的50%，那么此时大于等于这批对象年龄的对象就直接进入老年代</p><ul><li>假设100MB的Survivor中有俩对象，年龄都是2岁，但是俩对象加起来超过了50MB，也就是超过了一半了，这个时候，Survivor中大于等于2岁的对象都要进入老年代里去。<ul><li>避免动态年龄判断的方式：如果新生代内存有限，可以调整<code>-XX:SurvivorRatio=8</code>这个参数，默认是说Eden区比例为80%，也可以降低Eden区的比例，给两块Survivor区更多的内存空间，然后让每次Minor GC后的对象进入Survivor区中，还可以避免动态年龄判定规则直接把他们升入老年代。</li></ul></li></ul><h4 id="（4）空间分配担保规则"><a href="#（4）空间分配担保规则" class="headerlink" title="（4）空间分配担保规则"></a>（4）空间分配担保规则</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Minor GC后发现对象太多，放不进Survivor区，就必须直接转移到老年代区的情况。<strong>在执行任何一次<code>Micro GC</code>前，JVM都会检查老年代的可用空间是否大于新生代所有对象的总大小</strong>，记住，是<strong>新生代所有对象总大小</strong>，因为极端情况下新生代可能所有对象都活下来了。下面就有两种情况了。</p><ul><li><strong>第一种情况</strong>：老年代剩余内存大小大于新生代所有对象总大小，放心<code>Minor GC</code>吧！即使你的Survivor区域放不下也可以放老年代去；</li><li><strong>第二种情况：</strong>老年代剩余内存大小小于新生代所有对象总大小，此时就会看<code>-XX:HandlePromotionFailure</code>参数是否设置了，若设置了，则会看老年代可用内存大小是否大于<strong>之前每一次Minor GC后进入老年代的对象的平均大小</strong>，如果不是，只能<code>Full GC</code>,即对老年代里的对象进行回收，才能让剩余存活对象进入老年代。如果是，则可以冒险尝试下<code>Minor GC</code>，但这个尝试也是有三种可能：<br>&emsp;<strong>可能一：</strong><code>Minor GC</code>后，剩余存活对象比<code>Survivor</code>区还小，就直接放进<code>Survivor</code>中<br>&emsp;<strong>可能二：</strong><code>Minor GC</code>后，剩余存活对象大于<code>Survivor</code>区，小于老年代可用区，即直接进入老年代<br>&emsp;<strong>可能三：</strong><code>Minor GC</code>后，剩余存活对象大于老年代可用区，放不下了，这时候就会触发<code>Full GC</code>，要是<code>Full GC</code>后还是放不下，直接导致<code>OOM内存溢出</code>。</li></ul><p>&emsp;&emsp;<strong>简介：空间担保机制是看老年代可用空间是否大于新生代所有对象总大小的，如果成立了，那么Minor GC就是安全的，如果不成立，则看<code>HandlerPromotionFailure</code>是否设置为true，true则允许担保失败，如果允许，则检查老年代可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，则尝试Minor GC，如果小于，则Full GC。<br>&emsp;&emsp;实际上<code>-XX:HandlePromotionFailure</code>参数在JDK 1.6以后就被废弃了，所以现在一般都不会在生产环境里设置这个参数了。JDK 1.6之前是把空间担保机制和<code>HandlerPromotionFailure</code>参数拆开了，JDK 1.6之后的空间担保机制只要满足”老年代可用连续空间 &gt; 新生代对象总大小或历次晋升到老年代对象的平均大小”其中一个就可，不满足就Full GC。</strong></p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304171950708.png" alt=""></p><h3 id="2、老年代Full-GC算法——标记整理算法"><a href="#2、老年代Full-GC算法——标记整理算法" class="headerlink" title="2、老年代Full GC算法——标记整理算法"></a>2、老年代Full GC算法——标记整理算法</h3><p>&emsp;&emsp;顾名思义，标记整理就是把老年代里活着的对象整理，紧凑在一起，避免垃圾回收后出现内存碎片。注意<code>Full GC</code>的速度比<code>Minor GC</code>慢10多倍，如果频繁出现<code>Full GC</code>就影响了系统性能，出现卡顿，但是你多两次<code>Minor GC</code>无关紧要，反正速度很快。</p><p>&emsp;&emsp;所以，所谓JVM优化，就是尽量能让对象在新生代里进行分配和回收，别让太多对象进入老年代，避免对老年代的频繁<code>Full GC</code>，同时要给系统足够的内存大小来避免新生代频繁的<code>Minor GC</code>。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172009272.png" alt=""></p><p>未回收前</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172023156.png" alt=""></p><p>回收后</p><p><strong>为什么老年代不用复制算法？</strong></p><p>&emsp;&emsp;因为老年代存活的对象太多了，如果用复制算法，每次挪动90%的对象很不方便，所以采用标记回收，把有用的挪到一边，然后回收垃圾，是很好的一个方式。</p><h3 id="3、针对第三节面试会问的问题"><a href="#3、针对第三节面试会问的问题" class="headerlink" title="3、针对第三节面试会问的问题"></a>3、针对第三节面试会问的问题</h3><pre><code>(1)、什么时候会尝试触发Minor GC？ 答：当新生代的Eden区和其中一个Survivor区空间不足时。(2)、什么时候会尝试触发Full GC？答：第一是老年代可用内存小于新生代全部对象的大小，如果没开启空间担保参数，会直接触发Full GC，所以一般空间担保参数都会打开；第二是老年代可用内存小于历次新生代GC后进入老年代的平均对象大小，此时会提前Full GC；第三是新生代Minor GC后的存活对象大于Survivor，那么就会进入老年代，此时老年代内存不足，就要Full GC；第四是是“-XX:CMSInitiatingOccupancyFaction”参数的设置，当老年代中的对象到达这个比例时就会GC；（老年代可用内存大于历次新生代GC后进入老年代的对象平均大小，但是老年代已经使用的内存空间超过了这个参数指定的比例，也会自动触发Full GC）(3)、触发Minor GC之前会如何检查老年代大小，涉及哪几个步骤和条件？ 答：1、先判断新生代中所有对象的大小是否 小于 老年代的可用区域 true 则 触发Minor GC，false则继续进行下面2中的判断 2、如果设置了-XX:HandlePromotionFailure这个参数，那么进入第3步 如果没有设置-XX:HandlePromotionFailure参数，那么触发Full GC (4)、什么时候在Minor GC之前就会提前触发一次Full GC？ 答：当判断 新生代历次进入老年代对象的平均大小 大于 老年代的可用区域就会触发一次Full GC，让老年代腾出一些空间，腾出空间后再进行Minor GC。 (5)、Minor GC过后可能对应哪几种情况？ 答： 情况1：Minor GC前先判断：存活的对象所占的内存空间 &lt; Survivor区域内存空间的大小，那么存活的对象进入Survivor区。 情况2：Minor GC前先判断：Survivor区域内存空间的大小 &lt; 存活的对象所占的内存空间 &lt; 老年代的可用空间大小。那么存活的对象，直接进入老年代。 情况3：Minor GC前先判断： (存活的对象所占的内存空间 &gt; Survivor区域内存空间的大小) &amp;&amp; (存活的对象所占的内存空间 &gt; 老年代的可用空间大小)。那么会触发Full GC，老年代腾出空间后，再进行Minor GC。如果腾出空间后还不能存放存活的对象，那么会导致OOM即堆内存空间不足、堆内存溢出。 </code></pre><h2 id="四、垃圾回收容器简介"><a href="#四、垃圾回收容器简介" class="headerlink" title="四、垃圾回收容器简介"></a>四、垃圾回收容器简介</h2><h3 id="1、抛出问题：垃圾回收的同时能创建对象吗？"><a href="#1、抛出问题：垃圾回收的同时能创建对象吗？" class="headerlink" title="1、抛出问题：垃圾回收的同时能创建对象吗？"></a>1、抛出问题：垃圾回收的同时能创建对象吗？</h3><p>&emsp;&emsp;<strong>不能</strong>！垃圾回收的时候，尽可能要让垃圾收集器专心工作，此时JVM在后台直接进入<code>Stop the World</code>状态，停止我们写的Java系统的所有线程，让我们代码不再运行。一旦回收完毕，就可以恢复线程运行了。这里要注意的就是避免频繁GC，无论是新生代还是老年代，我们都不希望系统隔一段时间卡死一下，这是JVM最需要优化的地方。当然我们可以使用适当的垃圾回收容器来缩短回收的时间。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172050467.png" alt=""></p><h3 id="2、垃圾回收容器"><a href="#2、垃圾回收容器" class="headerlink" title="2、垃圾回收容器"></a>2、垃圾回收容器</h3><p>&emsp;&emsp;不同的内存区域使用不同的垃圾回收容器，简单介绍下垃圾回收容器</p><ul><li><p><code>Serial和Serial Old</code>：分别用来回收新生代和老年代对象。工作原理就是单线程运行，回收的时候会停止系统中其他工作线程，现在几乎不用。</p></li><li><p><code>ParNew和CMS</code>：<code>ParNew</code>是用在新生代的回收容器，<code>CMS</code>是用在老年代的回收容器，他们都是多线程并发机制，性能较好，一般是线上系统标配组合。</p></li><li><p><code>G1</code>：统一收集新生代和老年代，采用了更优秀的算法和设计机制</p></li></ul><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200304172109733.png" alt=""><br>多线程回收</p><h2 id="五、捋清概念"><a href="#五、捋清概念" class="headerlink" title="五、捋清概念"></a>五、捋清概念</h2><p>&emsp;&emsp;有很多GC名词需要捋一下：Minor GC、Young GC、Full GC、Old GC、Major GC、Mixed GC。</p><h3 id="1、Minor-GC-与Young-GC"><a href="#1、Minor-GC-与Young-GC" class="headerlink" title="1、Minor GC 与Young GC"></a>1、Minor GC 与Young GC</h3><p>&emsp;&emsp;年轻代 = 新生代，新生代的回收就叫Minor GC或是Young GC</p><h3 id="2、Full-GC与Old-GC"><a href="#2、Full-GC与Old-GC" class="headerlink" title="2、Full GC与Old GC"></a>2、Full GC与Old GC</h3><p>&emsp;&emsp;Full GC就是整体的意思，指的是针对新生代、老年代、永久代的全体内存空间的垃圾回收，所以称之为Full GC，但是说实话，平时习惯就是把Full GC等价为Old GC，也就是仅仅针对老年代的垃圾回收。</p><h3 id="3、Major-GC"><a href="#3、Major-GC" class="headerlink" title="3、Major GC"></a>3、Major GC</h3><p>&emsp;&emsp;有些人把Major GC跟Old GC等价起来，认为他就是针对老年代的GC，也有人把Major GC和Full GC等价起来，认为他是针对JVM全体内存区域的GC。这个概念少提，如果提了，就要问清楚你到底针对整体还是针对老年代。</p><h3 id="4、Mixed-GC"><a href="#4、Mixed-GC" class="headerlink" title="4、Mixed GC"></a>4、Mixed GC</h3><p>&emsp;&emsp;G1中的一个垃圾回收机制，一旦老年代占据堆内存的45%了，就要触发Mixed GC，此时对年轻代和老年代都会进行回收。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/08/22/JVM%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%86%85%E5%AD%98%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
      <url>/2019/08/22/JVM%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%86%85%E5%AD%98%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM学习笔记（2）：JVM分代模型与内存参数设置"><a href="#JVM学习笔记（2）：JVM分代模型与内存参数设置" class="headerlink" title="JVM学习笔记（2）：JVM分代模型与内存参数设置"></a>JVM学习笔记（2）：JVM分代模型与内存参数设置</h1><h2 id="一、JVM分代模型"><a href="#一、JVM分代模型" class="headerlink" title="一、JVM分代模型"></a>一、JVM分代模型</h2><h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 年轻代</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">loadReplicasFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadReplicasFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        replicaManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们可以看到在<code>main()</code>方法的<code>while</code>循环中，不断调用<code>loadReplicasFromDisk()</code>方法生成新对象，这个新生成对象的存活时间是极其短的，大致过程是<code>loadReplicasFromDisk()</code>入栈，在堆内存中生成对象，栈帧里的局部变量指向这个对象，然后方法结束，出栈，这个对象就没人指向了，结果如下图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191130661.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但有些对象是长期存活的，比如下面这段代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 老年代</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">loadReplicasFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadReplicasFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        replicaManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Kafka类中定一个一个<strong>静态</strong>变量，这个静态变量指向堆内存中的对象，while循环中不停得调用这个对象的方法，使得这个对象一直被引用，这样就长期存活下来了。<br><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191148973.png" alt=""></p><h3 id="2、年轻代、老年代、永久代"><a href="#2、年轻代、老年代、永久代" class="headerlink" title="2、年轻代、老年代、永久代"></a>2、年轻代、老年代、永久代</h3><ul><li><p>JVM将Java堆内存分成两个区域，即年轻代和老年代，年轻代就是生命周期极短、用完就要被回收的对象所在的区域，老年代就是生命周期较长对象存在的区域，需要一直存在堆中，让程序后续不断的去使用。</p></li><li><p>为什么要设计两个区域呢？因为针对每个对象的生命周期特点来设计不同的GC算法，保证GC的稳定性。</p></li><li><p>永久代：之前讲过的<strong>方法区</strong>就是永久代，它存放了类相关的信息</p></li><li><p>永久代会产生回收嘛？肯定是会的，有这样几种情况会导致回收</p><ul><li>该类在堆中的<strong>所有实例对象</strong>都被回收了</li><li>加载这个<strong>类的ClassLoader</strong>也被回收了（比如自己定义的类加载器也是个对象，没人用就会被回收）</li><li>最后对该<strong>类的Class对象</strong>也没有引用（如果有变量引用类的Class对象，就是有引用）<ul><li>比如利用反射，来获取一个对象的类的Class对象实例，如<code>Class c = replicaManager.getClass()</code>，可以通过<code>replicaManager</code>引用的对象来获取<code>ReplicaManager</code>类的Class对象，这个变量<code>c</code>就能引用这个Class对象</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ReplicaFetcher fetcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaFetcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//年轻代</span>        <span class="token function">loadReplicasFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//老年代</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">loadReplicasFromRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadReplicasFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        replicaManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadReplicasFromRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fetcher<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对应下面这张图</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191205882.png" alt=""></p><h2 id="二、JVM内存如何分配？"><a href="#二、JVM内存如何分配？" class="headerlink" title="二、JVM内存如何分配？"></a>二、JVM内存如何分配？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然有了年轻代和老年代，但是对于大部分正常对象，都是先升在新生代中分配内存的，新生代就是年轻代和老年代的总和，一开始并没有区分。我们的对象有两种类型，一种是像ReplicaManager这样的，用完一次就没人指向他了，这样的对象在新生代内存中不断囤积，最后导致空间几乎都被它占满了，那就会触发<code>Minor GC</code>，又称之为<code>Young GC</code>，它就把新生代中的没用的这些垃圾回收掉；另一种对象是像ReplicaFetcher这样的，始终有人指向它，JVM中有规定，垃圾每回收一次，如果一个对象没被回收掉，它的年龄就增加1，如果一个对象年龄超过15，就会把它放置到老年代区域（这个阈值我们可以修改，默认值是15），也就是说老年代存放了年龄很大的对象，下面两张图就很形象。同样的，如果老年代也满了也会被回收。</p><p>小结：</p><ul><li>一般对象先分在新生代，新生代满了就GC，有些对象满足条件进入老年代，老年代满了也会GC，清除没用的</li></ul><p>对象分配的机制有很多，如</p><ul><li>Minor GC后存活对象太多，大量对象直接进入老年代</li><li>超大对象不经新生代直接进入老年代</li><li>动态对象年龄判断机制</li><li>空间担保机制</li></ul><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191221284.png" alt=""></p><p>ReplicaManager的对象太多导致内存不够</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191240283.png" alt=""></p><p>ReplicaManager的对象被回收掉，且ReplicaFetcher对象符合要求进入老年代</p><h2 id="三、JVM内存分配参数"><a href="#三、JVM内存分配参数" class="headerlink" title="三、JVM内存分配参数"></a>三、JVM内存分配参数</h2><pre><code>-Xms：Java堆内存大小-Xmx：Java堆内存最大大小-Xmn：Java堆内存中新生代大小，扣除新生代就是老年代的大小了-XX:PermSize：永久代大小-XX:MaxPermSize：永久代最大大小-Xss：每个线程栈内大小，一般0.5～1M</code></pre><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191321086.png" alt=""></p><h2 id="四、JVM堆内存、栈内存、永久代大小设置"><a href="#四、JVM堆内存、栈内存、永久代大小设置" class="headerlink" title="四、JVM堆内存、栈内存、永久代大小设置"></a>四、JVM堆内存、栈内存、永久代大小设置</h2><h3 id="1、堆内存大小设置"><a href="#1、堆内存大小设置" class="headerlink" title="1、堆内存大小设置"></a>1、堆内存大小设置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;背景是电商支付系统，首先看一下支付流程：</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191341344.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个系统的支付压力就是每日百万订单的交易，从JVM角度来看，就是在堆内存中生存了百万个订单对象，而这些订单频繁的创建和销毁就是核心问题。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191356871.png" alt=""></p><p>我们怎么去设定堆内存的大小呢？按照下边的步骤估计：</p><ul><li>确定业务规模，分析系统压力点</li><li>确定我们的系统部署了多少台机器，计算每秒请求数，考虑每个请求的耗时</li><li>结合每个请求消耗的内存，确定机器的参数，分配多少内存空间合适</li><li>确定每台机器JVM分配的内存空间（方法区、栈内存、堆内存，堆中新生代、老年代大小）</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设我们一天100万个订单，共三台机器，把这100w个订单分配到几个小时里（考虑高峰时间段），假设算下来一秒钟100个订单。把这100个订单的任务分配个3台机器，每台机器一秒30个订单，那这30个订单占多少内存？就要看我们订单对象是多大了，看订单对象里面的变量来计算（Integer变量4字节，Long类型8字节…），假设1kb，那么30个订单也就30kb，大概情况如下。系统运行起来后，一台机器每秒有30个对象不被使用了，然后直到新生代空间快满了，就发生一次Minor GC，这就是这个业务运行的模型。但是实际情况下，每秒钟创建出来的对象不单单就订单对象，还会创建许多其他对象，所以每秒创建出来的被栈内存中局部变量引用的对象所占用的空间大致在几百KB～1MB之间。</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191413590.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做完了前三步后，我们要估算JVM堆内存如何分配了，常见的机器配置也就2核4G或4核8G。以2核4G为例，一半内存要给机器本身运行，另一半分配给JVM，也就是说分配到了2G，这2G要分配给方法区、栈内存、堆内存，堆内存最多再分得一半，也就是1G，堆内存中要划分新生代和老年代，假设都给一半，实际业务情况下1秒占1M那么过不了多了就会GC，频繁的GC影响了系统的稳定性，所以不行，还是得换4核8G，这样堆内存还能分得多一点，比如分3G（-Xms和-Xmx设置为3G，整个堆内存，然后-Xmn给新生代2G），能够大大降低GC频率，当然部署机器越多，对JVM压力更小。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们设置内存过小会出现什么情况？比如双十一，这会每秒支付不再是1秒100个了，而是秒1000个，这时候所有资源都会吃紧，当然有些支付请求并不是立即支付的，它可能卡好久，使得这些数据在Minor GC后都放到了老年代，与此同时新生代中又不断增加对象，最后新生代又爆满，然后再Minor GC放到老年代。。。最后老年代对象越来越多，可能频繁触发老年代的垃圾回收，<strong>老年代的垃圾回收速度是很慢的！</strong>，然后不断影响系统性能</p><p><img src="https://gitee.com/Jerry1997/img-bed/raw/master/uPic/image-20200305191431151.png" alt=""></p><h3 id="2、栈内存和永久代大小设置"><a href="#2、栈内存和永久代大小设置" class="headerlink" title="2、栈内存和永久代大小设置"></a>2、栈内存和永久代大小设置</h3><p>栈内存：不用特别的去估计和设置，默认的是<strong>512KB～1MB</strong>，差不多够了。</p><p>永久代：存放类相关信息，一般设置<strong>几百MB</strong>是够的，当然有些系统会导致永久代内存溢出，后面分析。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2019/08/21/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
      <url>/2019/08/21/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM学习笔记"><a href="#JVM学习笔记" class="headerlink" title="JVM学习笔记"></a>JVM学习笔记</h1><h2 id="一、初识JVM"><a href="#一、初识JVM" class="headerlink" title="一、初识JVM"></a>一、初识JVM</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们写好一份Java代码，要将其部署到线上的机器去运行，就要将其打包成<code>.jar</code>或<code>.war</code>后缀的包，再进行部署。其中关键的一步是<strong>编译</strong>，也就是要把<code>.java</code>文件编译成<code>.class</code>字节码文件，有了字节码文件可以通过java命令来启动一个<code>JVM</code>进程，由JVM来负责运行这些字节码文件。所以说，在某个机器上部署某个系统后，一旦启动这个系统，实际上就是启动了<code>JVM</code>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们写好了一个个类是通过<code>类加载器</code>把字节码文件加载到JVM中的，JVM会首先从<code>main()</code>方法开始执行里面的代码，它需要哪个类就会使用类加载器来加载对应的类，反正对应的类就在<code>.class</code>文件中。</p><p><strong>注意</strong>：如果一个项目中有多个<code>main()</code>方法，在启动一个jar包的时候，就制定了是走哪个<code>main()</code>方法，所以入口是唯一的。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmRwb244ajMxMnMwcnNnbmcuanBn?x-oss-process=image/format,png" alt=""></p><p>程序运行机制</p><h2 id="二、初识JVM类加载器机制"><a href="#二、初识JVM类加载器机制" class="headerlink" title="二、初识JVM类加载器机制"></a>二、初识JVM类加载器机制</h2><h3 id="2-1引入"><a href="#2-1引入" class="headerlink" title="2.1引入"></a>2.1引入</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;问题：JVM什么时候会加载一个类？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最简单的例子是直接从<code>main()</code>进入开始执行，比如</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmZsb2U5ajMwZGkwYXFxMzMuanBn?x-oss-process=image/format,png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果碰到了实例化对象的操作，才把实例化的这个类的<code>.class</code>文件加载到内存（之前是没有加载进来的）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmJkamxwajMwa3MwYmNqcnUuanBn?x-oss-process=image/format,png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先是包含<code>main()</code>方法的主类会在JVM启动之后首先被加载到内存中，然后开始执行<code>main()</code>中的代码，碰到需要使用的类，才去加载这个类对应的字节码文件，也就是说是按需加载。</p><h3 id="2-2类加载过程"><a href="#2-2类加载过程" class="headerlink" title="2.2类加载过程"></a>2.2类加载过程</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类加载的过程为：加载、验证、准备、解析、初始化、使用、卸载</p><ul><li><p><code>验证</code>：就是看字节码文件是否符合规范。</p></li><li><p><code>准备</code>：给类<strong>分配内存空间</strong>，其次为<code>类变量</code>分配内存空间，并设定一个默认值。<strong>不执行赋值！</strong></p></li><li><p><code>解析</code>：符号引用替换为直接引用的过程</p></li><li><p><code>初始化</code>：正式执行类初始化的代码，在这里才是执行赋值代码等操作，<code>准备阶段</code>仅仅为类和变量开辟空间。在这个阶段执行初始化操作有很多，比如对于静态代码块的初始化就是在这个阶段执行的（JVM设计者设计先执行静态代码块的机制是希望开发者把类使用之前的准备工作在这准备好类级别的数据）。要记住，类的初始化就是初始化这个类，和里头的对象无关，只有new关键字才会构造出一个对象。</p></li><li><p><strong>什么时候会初始化一个类呢？</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般来说包含<code>main()</code>方法的类是必须立马初始化的，或者说执行到new对象了，就会把这个对象的类初始化，如果这个类初始化过了，就不用进行第二次初始化。初始化重要的一个规则是：<strong>初始化一个类的时候，如果该类的父类没有初始化，（如果父类也没有加载的话）必须先加载并初始化它的父类！</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplicaManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDataManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ReplicaManager继承AbstractDataManager，在初始化ReplicaManager时必须先初始化它的父类</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="2-3类加载器和双亲委派机制"><a href="#2-3类加载器和双亲委派机制" class="headerlink" title="2.3类加载器和双亲委派机制"></a>2.3类加载器和双亲委派机制</h3><p>1、Java中的类加载器</p><ul><li><code>启动类加载器</code>：负责加载机器上安装的Java目录下的核心类，Java安装目录下有个<code>lib</code>文件存放了Java的核心库，JVM启动后，首先会依托<code>启动类加载器</code>去加载lib。</li><li><code>扩展类加载器</code>：就是加载<code>lib/ext</code>目录，和启动类加载器差不多，但它是启动类加载器的儿子。</li><li><code>应用程序类加载器</code>：负责加载<code>ClassPath</code>环境变量指定路径中的类，就是把你写好的代码加载进内存。</li><li><code>自定义类加载器</code>：自己写的类加载器，继承<code>ClassLoader</code>类，重写类加载方法</li></ul><p>2、双亲委派机制</p><p>JVM的加载器是有亲子结构的，如图所示，提出了<strong>双亲委派机制</strong>。</p><p><code>双亲委派机制</code>：如果应用程序要加载一个类，首先会委派自己的父类加载器去加载，直至传到最顶层的加载器去加载，如果父类加载器在自己的职责范围内没有找到这个类，就会把加载权利下放给子类加载器。<strong>总的来说，就说先找父类去加载，不行再由儿子来加载</strong>。先从顶层加载器开始，发现自己加载不到，往下推给子类，这样能<strong>保证绝不会重复加载某个类</strong>。</p><p>双亲委派的好处：避免了类的重复加载，如果两个不同层级的类加载器可以加载同一个类，就重复了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmU3ajJiajMwZW8waG1qcnouanBn?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmc2eDF0ajMweDIwdTBhZ3EuanBn?x-oss-process=image/format,png" alt=""></p><h2 id="三、初识JVM内存区域"><a href="#三、初识JVM内存区域" class="headerlink" title="三、初识JVM内存区域"></a>三、初识JVM内存区域</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们写好的代码中有很多的类，类中有许多的方法，同时方法中也有许多变量，它们都需要放到合适的区域，这就是JVM为什么要划分出不同内存区域的原因，下面介绍下JVM中的内存区域分类。</p><h3 id="3-1存放类的区域——方法区"><a href="#3-1存放类的区域——方法区" class="headerlink" title="3.1存放类的区域——方法区"></a>3.1存放类的区域——方法区</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>方法区</code>主要存放从<code>class</code>文件中加载进来的类，JDK 1.8后这块区域改名为<code>Metaspace</code>，即元数据空间，放的还是我们自己写的各种类相关的信息。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设我们有上面这个例子，JVM首先类加载<code>Kafka.class</code>到方法区，当程序运行到实例化对象那句，就把<code>ReplicaManager.class</code>加载到方法区。如果<code>Kafka</code>类中有静态变量，也一样会进入方法区。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmVvZGkwajMwczYwZjgzem8uanBn?x-oss-process=image/format,png" alt=""></p><h3 id="3-2程序计数器——执行代码指令用的"><a href="#3-2程序计数器——执行代码指令用的" class="headerlink" title="3.2程序计数器——执行代码指令用的"></a>3.2程序计数器——执行代码指令用的</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们写好的Java文件被编译成.class文件后就应对成了一行行的字节码指令，JVM加载类信息到方法区后，会去执行编译出来的字节码指令，执行的时候用到了<code>程序计数器</code>，它用来记录我们的程序执行到了哪一行字节码指令。由于JVM是支持多线程的，如果写好的代码开启了多个线程，那么每个线程都会有对应的程序计数器，来表示当前线程执行到了哪一条指令。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmQ5aGU0ajMwejIwbTRkaHouanBn?x-oss-process=image/format,png" alt=""></p><h3 id="3-3存放方法的区域——Java虚拟机栈"><a href="#3-3存放方法的区域——Java虚拟机栈" class="headerlink" title="3.3存放方法的区域——Java虚拟机栈"></a>3.3存放方法的区域——Java虚拟机栈</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>main()</code>方法中有程序计数器来记录指令执行到哪了，但在方法中我们也会定义一些<code>局部变量</code>，JVM有一块区域是专门用来放<code>局部变量</code>的，即<code>Java虚拟机栈</code>，同样的，对于每个线程，它们有自己的<code>Java虚拟机栈</code>，如果一个线程执行了一个方法，会为这个方法调用创建一个对应的<code>栈帧</code>，<code>栈帧</code>中包含着局部变量表、操作数栈、动态链接、方法出口等。比如main线程执行了<code>main()</code>方法，那就为<code>main()</code>方法创建了一个<code>栈帧</code>，并将其压入了<code>Java虚拟机栈</code>，同时在<code>main()</code>方法的栈帧中也存放着它的局部变量。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmF3cWhmajMwYnkwNzhhYTguanBn?x-oss-process=image/format,png" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//含有main方法的Kafka类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kafka</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReplicaManager replicaManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplicaManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        replicaManager<span class="token punctuation">.</span><span class="token function">loadReplicasFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplicaManager</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadReplicasFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Boolean hasFinishedLoad <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLocalDataCorrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">isLocalDataCorrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Boolean isCorrect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> isCorrect<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如上面这段代码，对应的Java虚拟机栈如下。在栈帧里存放了这个方法对应的局部变量之类的数据，包括这个方法执行的其他相关的信息，方法执行完毕之后就出栈。如果<code>isLocalDataCorrupt</code>方法执行完毕了，就会把<code>isLocalDataCorrupt</code>方法对应的栈帧从Java虚拟机栈里给出栈，然后如果<code>loadReplicasFromDisk</code>方法也执行完毕了，就会把<code>loadReplicasFromDisk</code>方法也从Java虚拟机栈里出栈。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmNxb3MyajMwYnUwZWVteHYuanBn?x-oss-process=image/format,png" alt=""></p><h3 id="3-4存放对象的区域——Java内存堆"><a href="#3-4存放对象的区域——Java内存堆" class="headerlink" title="3.4存放对象的区域——Java内存堆"></a>3.4存放对象的区域——Java内存堆</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在main方法里创建了ReplicaManager对象的时候，就会在main方法对应的栈帧的局部变量表里，让一个引用类型的“replicaManager”局部变量来存放ReplicaManager对象的地址。</p><p><strong>注意：</strong></p><ul><li>新建的实例在堆内存，实例变量（对象变量）也是在堆内存的</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmYzZW93ajMwdmUwaDhqc3QuanBn?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmFrZzl1ajMwdmEwbW03NmIuanBn?x-oss-process=image/format,png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结一下这个过程：JVM进程启动后，首先会加载含有<code>main</code>方法的<code>Kafka</code>类到内存里（方法区），生成一个main线程，然后为这个线程分配一个程序计数器，开始执行程序。先生成main方法的栈帧，压入Java虚拟机栈，然后执行到<code>new ReplicaManager()</code>时，就会把<code>ReplicaManager</code>类加载进内存（方法区），接着发现要实例化一个对象，把这个对象的内存分配在Java内存堆中，并在main方法的栈帧里的局部变量表引入一个<code>replicaManager</code>局部变量，把它指向堆内存中的地址，然后main线程开始执行<code>ReplicaManager</code>对象中的方法依次把方法压栈，执行完出栈。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结：<strong>类都是加载到方法区里的，而且是按需加载，只加载一次，要new对象时候，对象被分配在堆汇总，执行方法时为这个方法生成栈栈压入虚拟机栈，然后对应变量指向堆内存中的地址，完成方法则出栈。</strong></p><h2 id="四、初识垃圾回收机制"><a href="#四、初识垃圾回收机制" class="headerlink" title="四、初识垃圾回收机制"></a>四、初识垃圾回收机制</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个方法执行完后的结果是怎样的？如图，也就是没有变量指向这个变量了，由于我们在内存堆里创建的对象都是占用内存资源的，所以需要回收它。JVM本身带有垃圾回收机制，它是<strong>后台自动运行的线程</strong>。它检索这个对象是否有人引用，如果没有任何人指向他，就会把这个对象给回收掉，从内存中清除。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2dE5iUndseTFnYWN1dmNib3R2ajMwejgwYmlhYXIuanBn?x-oss-process=image/format,png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
